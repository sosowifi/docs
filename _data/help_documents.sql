
SET NAMES utf8;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
--  Records of `help_documents`
-- ----------------------------
BEGIN;
INSERT INTO `help_documents` VALUES ('1', '0', '账户信息', 'https://coding.net/help/doc/account/account.html', '---\nlayout: post\n\ntitle: 账户信息\n---\n\n本章节主要描述如何修改和设置账户信息。\n\n## 账户信息修改\n\n\n### 修改个人资料###\n\n方法一：\n登录个人账户之后，将鼠标移至用户头像，点击下拉菜单中的「设置」，即可进入个人设置页面，进行个人资料的修改。\n\n方法二：\n登录个人账户之后，点击屏幕左下角的「设置」，即可进入个人设置页面，进行个人资料的修改。\n\n### 修改注册邮箱###\n\n注意，一个邮箱只能用来注册一个账号。如果 A 邮箱已被用于注册 a 账号，要将 A 邮箱关联到 b 账号，只能先修改 a 账号对应的邮箱地址为其他。\n\n1）进入个人首页，点击左下角的「账户」，点击菜单栏里的「个人设置」，\n![在这里输入图片描述][3]\n\n2）点击个人信息中的「修改邮箱」\n![在这里输入图片描述][4]\n\n3）在弹出框内输入想要更改的邮箱\n![在这里输入图片描述][5]\n\n4）输入登录密码，点击确认\n![在这里输入图片描述][6]\n\n\n###  重置密码\n\n1）忘记密码\n在 Coding.net 登录框的右下角点击「忘记密码」的链接，就可以通过您的注册邮箱来重置密码了。\n如果长时间收不到密码重置邮件，请检查一下你的垃圾邮件夹，或者重新尝试一下。如果连续尝试都无法收到密码重置邮件，则很可能您的邮件服务器拒收了来自 Coding.net 的邮件，您需要将 Coding.net 加入域名白名单以确保收到来自 Coding.net 的邮件。\n\n2）登陆后修改密码\n进入个人主页，点击账户，然后点击密码设置即可进行密码重置。\n![在这里输入图片描述][7]\n\n如果长时间收不到密码重置邮件，请检查一下你的垃圾邮件夹，或者重新尝试一下。如果连续尝试都无法收到密码重置邮件，则很可能您的邮件服务器拒收了来自 Coding.net 的邮件，您需要将 Coding.net 加入域名白名单以确保收到来自 Coding.net 的邮件。\n\n## 关于提醒设置\n\n提醒设置是为 Coding 用户提供在coding平台上的相关信息提醒而设置的一个功能，你可以根据个人需求进行可以化的设置。\n\n### 修改提醒设置\n\n进入个人主页后，点击“账户”然后点击“提醒设置”即可在右边的选项中选择系统提醒或者邮件提醒完成设置。\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/4802fe64-4fa1-46e6-a0d1-70d7aa8b5850.png) \n\n---\n\n<div class=\"footer-nav\">\n<div class=\"left-nav\"><i class=\"fa fa-angle-left\"></i><a href=\"/help/doc/account/register.html\">上一篇：账户注册&激活</a></div>\n<div class=\"right-nav\"><a href=\"/help/doc/account/setting.html\">下一篇：账户设置</a><i class=\"fa fa-angle-right\"></i></div>\n</div>\n\n\n  [1]: https://coding.net/api/project/130548/files/261942/imagePreview\n  [2]: https://coding.net/api/project/130548/files/261943/imagePreview\n  [3]: https://coding.net/api/project/130548/files/261945/imagePreview\n  [4]: https://coding.net/api/project/130548/files/261946/imagePreview\n  [5]: https://coding.net/api/project/130548/files/261947/imagePreview\n  [6]: https://coding.net/api/project/130548/files/261949/imagePreview\n  [7]: https://coding.net/api/project/130548/files/261953/imagePreview\n  [8]: https://coding.net/api/project/130548/files/261954/imagePreview\n  [9]: https://coding.net/api/project/130548/files/261955/imagePreview\n  [10]: https://coding.net/api/project/130548/files/261956/imagePreview\n  [11]: https://coding.net/api/project/130548/files/261958/imagePreview\n  [12]: https://coding.net/api/project/130548/files/261959/imagePreview\n  [13]: https://coding.net/api/project/130548/files/261960/imagePreview\n  [14]: https://coding.net/api/project/130548/files/261961/imagePreview\n  [15]: https://coding.net/api/project/130548/files/261962/imagePreview\n  [16]: https://coding.net/api/project/130548/files/262582/imagePreview', '本章节主要描述如何修改和设置账户信息。\n\n\n账户信息修改\n\n修改个人资料\n\n方法一：\n\n登录个人账户之后，将鼠标移至用户头像，点击下拉菜单中的「设置」，即可进入个人设置页面，进行个人资料的修改。\n\n\n方法二：\n\n登录个人账户之后，点击屏幕左下角的「设置」，即可进入个人设置页面，进行个人资料的修改。\n\n\n修改注册邮箱\n\n注意，一个邮箱只能用来注册一个账号。如果\nA\n邮箱已被用于注册\na\n账号，要将\nA\n邮箱关联到\nb\n账号，只能先修改\na\n账号对应的邮箱地址为其他。\n\n\n1）进入个人首页，点击左下角的「账户」，点击菜单栏里的「个人设置」，\n在这里输入图片描述 [https://coding.net/api/project/130548/files/261945/imagePreview]\n\n\n2）点击个人信息中的「修改邮箱」\n在这里输入图片描述 [https://coding.net/api/project/130548/files/261946/imagePreview]\n\n\n3）在弹出框内输入想要更改的邮箱\n在这里输入图片描述 [https://coding.net/api/project/130548/files/261947/imagePreview]\n\n\n4）输入登录密码，点击确认\n在这里输入图片描述 [https://coding.net/api/project/130548/files/261949/imagePreview]\n\n\n重置密码\n\n1）忘记密码\n\n在\nCoding.net\n登录框的右下角点击「忘记密码」的链接，就可以通过您的注册邮箱来重置密码了。\n\n如果长时间收不到密码重置邮件，请检查一下你的垃圾邮件夹，或者重新尝试一下。如果连续尝试都无法收到密码重置邮件，则很可能您的邮件服务器拒收了来自\nCoding.net\n的邮件，您需要将\nCoding.net\n加入域名白名单以确保收到来自\nCoding.net\n的邮件。\n\n\n2）登陆后修改密码\n\n进入个人主页，点击账户，然后点击密码设置即可进行密码重置。\n在这里输入图片描述 [https://coding.net/api/project/130548/files/261953/imagePreview]\n\n\n如果长时间收不到密码重置邮件，请检查一下你的垃圾邮件夹，或者重新尝试一下。如果连续尝试都无法收到密码重置邮件，则很可能您的邮件服务器拒收了来自\nCoding.net\n的邮件，您需要将\nCoding.net\n加入域名白名单以确保收到来自\nCoding.net\n的邮件。\n\n\n关于提醒设置\n\n提醒设置是为\nCoding\n用户提供在coding平台上的相关信息提醒而设置的一个功能，你可以根据个人需求进行可以化的设置。\n\n\n修改提醒设置\n\n进入个人主页后，点击“账户”然后点击“提醒设置”即可在右边的选项中选择系统提醒或者邮件提醒完成设置。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/4802fe64-4fa1-46e6-a0d1-70d7aa8b5850.png]\n\n\n\n\n\n<div\nclass=\"footer-nav\">\n\n<div\nclass=\"left-nav\"><i\nclass=\"fa\nfa-angle-left\"></i><a\nhref=\"/help/doc/account/register.html\">上一篇：账户注册&激活</a></div>\n\n<div\nclass=\"right-nav\"><a\nhref=\"/help/doc/account/setting.html\">下一篇：账户设置</a><i\nclass=\"fa\nfa-angle-right\"></i></div>\n\n</div>', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00'), ('2', '0', '两步认证', 'https://coding.net/help/doc/account/2fa.html', '---\nlayout: post\n\ntitle: 两步认证\n---\n\n本章节主要介绍什么是两步认证，及如何使用两步认证来保障 Coding 账户的安全。\n\n## 什么是两步验证\n\n两步验证，是 coding.net 提供给用户的一种附加安全功能，以防账户被盗用。\n1）用户开启两步验证后，在登录 coding.net 的时候，输入电子邮箱或个性后缀和登录密码之后，必须再输入用户手机 Coding 客户端（或 Google 身份验证器）生成的动态验证码进行两步验证，以保护账户安全；\n2）用户开启两步验证后，在 coding.net 进行危险操作（如删除项目、转让项目、升级项目、关闭两步验证功能等）的时候，必须要输入用户手机 Coding 客户端（Google 身份验证器）生成的动态验证码，以保护账户安全。\n\n### 两步验证的意义\n\n用户开启了两步验证以后，即使登录密码被窃取，入侵者也会因无法获得手机 Coding 客户端（Google 身份验证器）生成的动态验证码而无法登录账户，进而实施一些危险操作。实施危险操作的时候，必须输入用户手机 Coding 客户端（Google 身份验证器）生成的动态验证码。两步验证通过结合密码和手机的使用，为账户增加了一道额外的安全保障。\n\n### 开启步骤\n\n1）用户登录 coding.net 后，进入个人账户页面，选择两步验证，如果手机号码没有被验证，则需要先在个人账户页面的个人设置里面验证手机号码后，才能开启两步验证。\n手机号码验证完成后，进入个人账户页面，选择两步验证，出现如下图所示页面。\n![在这里输入图片描述][8]\n\n2）安装 Coding 身份验证器\n点击开启两步验证按钮，出现如下图所示页面，如果您的手机上没有安装 Coding 客户端，请点击 APP 下载或者在各大应用市场搜索 “Coding” 并下载，安装 Coding 身份验证器；如果您已经安装了 Coding 客户端，请更新至最新版本。\n![在这里输入图片描述][9]\n你也可以安装“Google 身份验证器”生成验证码。\n\n3）配置生成验证码\n点击下一步按钮，出现如下图所示页面；\n![在这里输入图片描述][10]\n打开 Coding 客户端，点击“+”，选择“2FA”，扫描该页面的二维码；\n![在这里输入图片描述][11]\n扫描后，手机 Coding 客户端身份验证器生成动态验证码，如下图所示；如果您上次开启两步验证时生成的身份验证器没有删除，那么当前生成验证器时会提醒您选择覆盖，请选择覆盖以保证身份验证器是最新版本。\n![在这里输入图片描述][12]\n或者，使用“Google 身份验证器”扫描该页面的二维码或者手动添加账户和密钥，生成动态验证码，如下图所示。\n![在这里输入图片描述][13]\n\n4）验证并开启\n请输入身份验证器自动生成的动态验证码和登录密码，确认开启两步验证。\n![在这里输入图片描述][14]\n开启两步验证后，所有网页端和客户端的 session 都会过期，需要重新登录。其中，用户在登录 coding.net 时，输入电子邮箱或个性后缀和登录密码之后，需要再输入手机 Coding 客户端（或 Google 身份验证器）生成的动态验证码才能完成登录流程。\n\n### 关闭两步验证\n\n用户登录 coding.net 后，进入个人账户页面，选择两步验证，点击关闭两步验证按钮，输入手机 Coding 客户端（Google 身份验证器）生成的动态验证码，即可关闭两步验证。最后，请一定要删除手机上过期的身份验证器。\n![在这里输入图片描述][15]\n\n### 手机丢失或刷机\n\n请用您的注册邮箱发送一封邮件到 support@coding.net 并附上您的电话联系方式，客服会在24小时以内联系您，帮助关闭两步验证。\n\n---\n\n<div class=\"footer-nav\">\n<div class=\"left-nav\"><i class=\"fa fa-angle-left\"></i><a href=\"/help/doc/account/ssh-key.html\">上一篇：SSH公钥配置</a></div>\n<div class=\"right-nav\"><a href=\"/help/doc/account/oauth.html\">下一篇：OAuth</a><i class=\"fa fa-angle-right\"></i></div>\n</div>\n\n\n\n  [5]: https://coding.net/api/project/130548/files/261947/imagePreview\n  [6]: https://coding.net/api/project/130548/files/261949/imagePreview\n  [7]: https://coding.net/api/project/130548/files/261953/imagePreview\n  [8]: https://coding.net/api/project/130548/files/261954/imagePreview\n  [9]: https://coding.net/api/project/130548/files/261955/imagePreview\n  [10]: https://coding.net/api/project/130548/files/261956/imagePreview\n  [11]: https://coding.net/api/project/130548/files/261958/imagePreview\n  [12]: https://coding.net/api/project/130548/files/261959/imagePreview\n  [13]: https://coding.net/api/project/130548/files/261960/imagePreview\n  [14]: https://coding.net/api/project/130548/files/261961/imagePreview\n  [15]: https://coding.net/api/project/130548/files/261962/imagePreview\n  [16]: https://coding.net/api/project/130548/files/262582/imagePreview', '本章节主要介绍什么是两步认证，及如何使用两步认证来保障\nCoding\n账户的安全。\n\n\n什么是两步验证\n\n两步验证，是\ncoding.net\n提供给用户的一种附加安全功能，以防账户被盗用。\n\n1）用户开启两步验证后，在登录\ncoding.net\n的时候，输入电子邮箱或个性后缀和登录密码之后，必须再输入用户手机\nCoding\n客户端（或\nGoogle\n身份验证器）生成的动态验证码进行两步验证，以保护账户安全；\n\n2）用户开启两步验证后，在\ncoding.net\n进行危险操作（如删除项目、转让项目、升级项目、关闭两步验证功能等）的时候，必须要输入用户手机\nCoding\n客户端（Google\n身份验证器）生成的动态验证码，以保护账户安全。\n\n\n两步验证的意义\n\n用户开启了两步验证以后，即使登录密码被窃取，入侵者也会因无法获得手机\nCoding\n客户端（Google\n身份验证器）生成的动态验证码而无法登录账户，进而实施一些危险操作。实施危险操作的时候，必须输入用户手机\nCoding\n客户端（Google\n身份验证器）生成的动态验证码。两步验证通过结合密码和手机的使用，为账户增加了一道额外的安全保障。\n\n\n开启步骤\n\n1）用户登录\ncoding.net\n后，进入个人账户页面，选择两步验证，如果手机号码没有被验证，则需要先在个人账户页面的个人设置里面验证手机号码后，才能开启两步验证。\n\n手机号码验证完成后，进入个人账户页面，选择两步验证，出现如下图所示页面。\n在这里输入图片描述 [https://coding.net/api/project/130548/files/261954/imagePreview]\n\n\n2）安装\nCoding\n身份验证器\n\n点击开启两步验证按钮，出现如下图所示页面，如果您的手机上没有安装\nCoding\n客户端，请点击\nAPP\n下载或者在各大应用市场搜索\n“Coding”\n并下载，安装\nCoding\n身份验证器；如果您已经安装了\nCoding\n客户端，请更新至最新版本。\n在这里输入图片描述 [https://coding.net/api/project/130548/files/261955/imagePreview]\n\n你也可以安装“Google\n身份验证器”生成验证码。\n\n\n3）配置生成验证码\n\n点击下一步按钮，出现如下图所示页面；\n在这里输入图片描述 [https://coding.net/api/project/130548/files/261956/imagePreview]\n\n打开\nCoding\n客户端，点击“+”，选择“2FA”，扫描该页面的二维码；\n在这里输入图片描述 [https://coding.net/api/project/130548/files/261958/imagePreview]\n\n扫描后，手机\nCoding\n客户端身份验证器生成动态验证码，如下图所示；如果您上次开启两步验证时生成的身份验证器没有删除，那么当前生成验证器时会提醒您选择覆盖，请选择覆盖以保证身份验证器是最新版本。\n在这里输入图片描述 [https://coding.net/api/project/130548/files/261959/imagePreview]\n\n或者，使用“Google\n身份验证器”扫描该页面的二维码或者手动添加账户和密钥，生成动态验证码，如下图所示。\n在这里输入图片描述 [https://coding.net/api/project/130548/files/261960/imagePreview]\n\n\n4）验证并开启\n\n请输入身份验证器自动生成的动态验证码和登录密码，确认开启两步验证。\n在这里输入图片描述 [https://coding.net/api/project/130548/files/261961/imagePreview]\n\n开启两步验证后，所有网页端和客户端的\nsession\n都会过期，需要重新登录。其中，用户在登录\ncoding.net\n时，输入电子邮箱或个性后缀和登录密码之后，需要再输入手机\nCoding\n客户端（或\nGoogle\n身份验证器）生成的动态验证码才能完成登录流程。\n\n\n关闭两步验证\n\n用户登录\ncoding.net\n后，进入个人账户页面，选择两步验证，点击关闭两步验证按钮，输入手机\nCoding\n客户端（Google\n身份验证器）生成的动态验证码，即可关闭两步验证。最后，请一定要删除手机上过期的身份验证器。\n在这里输入图片描述 [https://coding.net/api/project/130548/files/261962/imagePreview]\n\n\n手机丢失或刷机\n\n请用您的注册邮箱发送一封邮件到\nsupport@coding.net\n并附上您的电话联系方式，客服会在24小时以内联系您，帮助关闭两步验证。\n\n\n\n\n\n<div\nclass=\"footer-nav\">\n\n<div\nclass=\"left-nav\"><i\nclass=\"fa\nfa-angle-left\"></i><a\nhref=\"/help/doc/account/ssh-key.html\">上一篇：SSH公钥配置</a></div>\n\n<div\nclass=\"right-nav\"><a\nhref=\"/help/doc/account/oauth.html\">下一篇：OAuth</a><i\nclass=\"fa\nfa-angle-right\"></i></div>\n\n</div>', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00'), ('3', '0', 'Coding 产品手册', 'https://coding.net/help/doc/index.html', '---\nlayout: post\ntitle: Coding 产品手册\n---\n\nCoding.net 向广大开发者提供了一系列的云端开发工具，包括：\n\n1. [Git代码托管](/help/doc/git/index.html)\n1. [演示平台](/help/doc/paas/index.html)\n1. [WebIDE](/help/doc/webide/index.html)\n1. [项目管理](/help/doc/proeject/index.html)\n1. [移动App](help/doc/mobile/index.html)\n1. [用户账户](/help/doc/account/index.html)\n\n', 'Coding.net\n向广大开发者提供了一系列的云端开发工具，包括：\n\n 1. \n    Git代码托管\n    [/help/doc/git/index.html]\n 2. \n    演示平台\n    [/help/doc/paas/index.html]\n 3. \n    WebIDE\n    [/help/doc/webide/index.html]\n 4. \n    项目管理\n    [/help/doc/proeject/index.html]\n 5. \n    移动App\n    [help/doc/mobile/index.html]\n 6. \n    用户账户\n    [/help/doc/account/index.html]', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00'), ('4', '0', '应用管理与开放API', 'https://coding.net/help/doc/account/oauth.html', '---\nlayout: post\n\ntitle: 应用管理与开放API\n---\n\n本章节主要介绍如何使用应用管理来管理你的第三方应用和使用 Coding 的 OpenAPI：\n\n### 第三方应用注册\n\n在账户 -> 应用管理页面添加应用，注册要接入 Coding 的应用。\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/44b91ec2-f6b4-4520-b9f4-206eaf6c5507.png) \n\n ![图片](https://dn-coding-net-production-pp.qbox.me/8868a88a-e38d-48a6-93bb-edbd8d995194.png) \n\n\n\n其中\"回调地址\"是用户授权后，Coding 回调到应用，并且回传\"授权码\"的地址。\n保存后，会返回到应用列表。\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/400ebd43-f10f-4819-81b3-c890ff2562f4.png) \n\n此时再查看应用，会生成 `client id` 和 `client secret`。\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/c6e5054f-01bb-489d-8f84-a9f0400ce8ee.png) \n\n\n保存 `client id`和 `client secret`，以便后续认证使用。\n\n\n\n### 开放 API & OAuth \n\n#### Coding 开放 API\n\n1.注册应用无需审核即可使用授权。\n2.采用 OAuth 2.0 协议认证。\n\n#### 认证流程图\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/32fb9213-9ccb-4f70-8c58-8921f8c2d349.png) \n\n\n\n#### 认证流程简介\n\n1）将用户引导到 Coding 第三方登录页面上。`https://coding.net/oauth_authorize.html?client_id={client_id}&redirect_uri={redirect_uri}&response_type=code[&scope={scope}]`\n\n 如果用户未登录 Coding，跳转到登录页面。\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/878b45df-fd69-4784-b68d-a85e6fce7c3c.png) \n\n2）用户登录，并对应用请求的 `scope` 进行授权。\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/19347165-4d15-4d64-b601-d041b3e1e34d.png) \n\n\n3）授权通过，Coding 会将授权码回传给应用在 Coding 注册的回调地址（`http://xxx.com/callback?code=xxx`），应用直接获取授权码 `code`即可。\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/91295ede-e0b6-42bd-9b75-8402d171c58e.png) \n\n4）应用向 Coding 的 Token Endpoint 发送请求。\n `https://coding.net/api/oauth/access_token?client_id={client_id}&client_secret={client_secret}&grant_type=authorization_code&code={code}` 返回值 `{ expires_in: \"271645\", refresh_token: \"xxxxxx\", access_token:\"xxxxxx\" }` \n\n ![图片](https://dn-coding-net-production-pp.qbox.me/ab3a24b3-8358-46b8-b258-e8708e9da45b.png) \n\n5）使用 access_token 访问受保护的资源\n\n     https://coding.net/api/current_user?access_token={access_token}\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/2e33f408-ed45-49ee-86ac-a082565a288a.png) \n\nResponse body 中的 `code` 为 0，表示正常接收请求。如果 `code`为 1，表示请求异常，请参照 msg中的返回信息进行处理。\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/92b17830-1112-4086-a6ba-f46b51b8caa5.png) \n\n### Coding 开放平台\n\n更多 API 和开放资源，可查看 [Coding 开放平台](http://open.coding.net/)\n\n---\n\n\n<div class=\"footer-nav\">\n<div class=\"left-nav\"><i class=\"fa fa-angle-left\"></i><a href=\"/help/doc/account/2fa.html\">上一篇：两步认证</a></div>\n<div class=\"right-nav\"><a href=\"/help/doc/account/shop.html\">下一篇：码币&Shop</a><i class=\"fa fa-angle-right\"></i></div>\n</div>\n', '本章节主要介绍如何使用应用管理来管理你的第三方应用和使用\nCoding\n的\nOpenAPI：\n\n\n第三方应用注册\n\n在账户\n->\n应用管理页面添加应用，注册要接入\nCoding\n的应用。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/44b91ec2-f6b4-4520-b9f4-206eaf6c5507.png]\n\n图片 [https://dn-coding-net-production-pp.qbox.me/8868a88a-e38d-48a6-93bb-edbd8d995194.png]\n\n\n其中\"回调地址\"是用户授权后，Coding\n回调到应用，并且回传\"授权码\"的地址。\n\n保存后，会返回到应用列表。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/400ebd43-f10f-4819-81b3-c890ff2562f4.png]\n\n\n此时再查看应用，会生成 \nclient\nid \n和 \nclient\nsecret \n。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/c6e5054f-01bb-489d-8f84-a9f0400ce8ee.png]\n\n\n保存 \nclient\nid \n和 \nclient\nsecret \n，以便后续认证使用。\n\n\n开放\nAPI\n&\nOAUTH\n\nCODING\n开放\nAPI\n\n1.注册应用无需审核即可使用授权。\n\n2.采用\nOAuth\n2.0\n协议认证。\n\n\n认证流程图\n图片 [https://dn-coding-net-production-pp.qbox.me/32fb9213-9ccb-4f70-8c58-8921f8c2d349.png]\n\n\n认证流程简介\n\n1）将用户引导到\nCoding\n第三方登录页面上。 \nhttps://coding.net/oauth_authorize.html?client_id={client_id}&redirect_uri={redirect_uri}&response_type=code[&scope={scope}]\n\n\n如果用户未登录\nCoding，跳转到登录页面。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/878b45df-fd69-4784-b68d-a85e6fce7c3c.png]\n\n\n2）用户登录，并对应用请求的 \nscope \n进行授权。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/19347165-4d15-4d64-b601-d041b3e1e34d.png]\n\n\n3）授权通过，Coding\n会将授权码回传给应用在\nCoding\n注册的回调地址（ \nhttp://xxx.com/callback?code=xxx \n），应用直接获取授权码 \ncode \n即可。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/91295ede-e0b6-42bd-9b75-8402d171c58e.png]\n\n\n4）应用向\nCoding\n的\nToken\nEndpoint\n发送请求。\n\nhttps://coding.net/api/oauth/access_token?client_id={client_id}&client_secret={client_secret}&grant_type=authorization_code&code={code} \n返回值 \n{\nexpires_in:\n\"271645\",\nrefresh_token:\n\"xxxxxx\",\naccess_token:\"xxxxxx\"\n}\n\n图片 [https://dn-coding-net-production-pp.qbox.me/ab3a24b3-8358-46b8-b258-e8708e9da45b.png]\n\n\n5）使用\naccess_token\n访问受保护的资源\n\n https://coding.net/api/current_user?access_token={access_token}\n\n\n图片 [https://dn-coding-net-production-pp.qbox.me/2e33f408-ed45-49ee-86ac-a082565a288a.png]\n\n\nResponse\nbody\n中的 \ncode \n为\n0，表示正常接收请求。如果 \ncode \n为\n1，表示请求异常，请参照\nmsg中的返回信息进行处理。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/92b17830-1112-4086-a6ba-f46b51b8caa5.png]\n\n\nCODING\n开放平台\n\n更多\nAPI\n和开放资源，可查看 \nCoding\n开放平台\n[http://open.coding.net/]\n\n\n\n\n\n<div\nclass=\"footer-nav\">\n\n<div\nclass=\"left-nav\"><i\nclass=\"fa\nfa-angle-left\"></i><a\nhref=\"/help/doc/account/2fa.html\">上一篇：两步认证</a></div>\n\n<div\nclass=\"right-nav\"><a\nhref=\"/help/doc/account/shop.html\">下一篇：码币&Shop</a><i\nclass=\"fa\nfa-angle-right\"></i></div>\n\n</div>', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00'), ('5', '0', '用户账户介绍', 'https://coding.net/help/doc/account/index.html', '---\nlayout: post\n\ntitle: 用户账户介绍\n---\n\n本手册主要描述 Coding.net 账户相关功能说明, Coding 账户是用户在Coding 的唯一身份证明。\n主要包含以下内容：\n\n- [账号的注册&激活](/help/doc/account/register.html)\n- [账户信息修改](/help/doc/account/setting.html)\n- [SSH公钥配置](/help/doc/account/ssh-key.html)\n- [两步认证](/help/doc/account/2fa.html)\n- [应用管理与API](/help/doc/account/oauth.html)\n- [码币和商城](/help/doc/account/shop.html)\n- [服务级别](/help/doc/account/service-level.html)\n\nCopyRight by Coding.net  更新时间 2015-09-04\n\n---\n\n<div class=\"footer-nav\">\n<div class=\"right-nav\"><a href=\"/help/doc/account/register.html\">下一篇：/help/doc/account/register.html</a><i class=\"fa fa-angle-right\"></i></div>\n</div>', '本手册主要描述\nCoding.net\n账户相关功能说明,\nCoding\n账户是用户在Coding\n的唯一身份证明。\n\n主要包含以下内容：\n\n * \n   账号的注册&激活\n   [/help/doc/account/register.html]\n * \n   账户信息修改\n   [/help/doc/account/setting.html]\n * \n   SSH公钥配置\n   [/help/doc/account/ssh-key.html]\n * \n   两步认证\n   [/help/doc/account/2fa.html]\n * \n   应用管理与API\n   [/help/doc/account/oauth.html]\n * \n   码币和商城\n   [/help/doc/account/shop.html]\n * \n   服务级别\n   [/help/doc/account/service-level.html]\n\n\nCopyRight\nby\nCoding.net\n更新时间\n2015-09-04\n\n\n\n\n\n<div\nclass=\"footer-nav\">\n\n<div\nclass=\"right-nav\"><a\nhref=\"/help/doc/account/register.html\">下一篇：/help/doc/account/register.html</a><i\nclass=\"fa\nfa-angle-right\"></i></div>\n\n</div>', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00'), ('6', '0', '账户信息修改', 'https://coding.net/help/doc/account/setting.html', '---\nlayout: post\n\ntitle: 账户信息修改\n---\n\n本章节主要介绍如何维护和修改个人账户的信息：\n\n## 个人账户信息\n\n个人账户信息包括邮箱，昵称等\n\n### 修改个人资料###\n\n方法一：\n登录个人账户之后，将鼠标移至用户头像，点击下拉菜单中的「设置」，即可进入个人设置页面，进行个人资料的修改。\n\n方法二：\n登录个人账户之后，点击屏幕左下角的「设置」，即可进入个人设置页面，进行个人资料的修改。\n\n### 修改注册邮箱###\n\n注意，一个邮箱只能用来注册一个账号。如果 A 邮箱已被用于注册 a 账号，要将 A 邮箱关联到 b 账号，只能先修改 a 账号对应的邮箱地址为其他。\n\n1）进入个人首页，点击左下角的「账户」，点击菜单栏里的「个人设置」，\n![在这里输入图片描述][3]\n\n2）点击个人信息中的「修改邮箱」\n![在这里输入图片描述][4]\n\n3）在弹出框内输入想要更改的邮箱\n![在这里输入图片描述][5]\n\n4）输入登录密码，点击确认\n![在这里输入图片描述][6]\n\n\n### 重置密码\n\n1）忘记密码\n在 Coding.net 登录框的右下角点击「忘记密码」的链接，就可以通过您的注册邮箱来重置密码了。\n如果长时间收不到密码重置邮件，请检查一下你的垃圾邮件夹，或者重新尝试一下。如果连续尝试都无法收到密码重置邮件，则很可能您的邮件服务器拒收了来自 Coding.net 的邮件，您需要将 Coding.net 加入域名白名单以确保收到来自 Coding.net 的邮件。\n\n2）登陆后修改密码\n进入个人主页，点击账户，然后点击密码设置即可进行密码重置。\n![在这里输入图片描述][7]\n\n如果长时间收不到密码重置邮件，请检查一下你的垃圾邮件夹，或者重新尝试一下。如果连续尝试都无法收到密码重置邮件，则很可能您的邮件服务器拒收了来自 Coding.net 的邮件，您需要将 Coding.net 加入域名白名单以确保收到来自 Coding.net 的邮件。\n\n\n### 关于提醒设置\n\n提醒设置是为 Coding 用户提供在coding平台上的相关信息提醒而设置的一个功能，你可以根据个人需求进行可以化的设置。\n\n### 修改提醒设置\n\n进入个人主页后，点击“账户”然后点击“提醒设置”即可在右边的选项中选择系统提醒或者邮件提醒完成设置。\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/4802fe64-4fa1-46e6-a0d1-70d7aa8b5850.png) \n \n---\n\n\n  [3]: https://coding.net/api/project/130548/files/261945/imagePreview\n  [4]: https://coding.net/api/project/130548/files/261946/imagePreview\n  [5]: https://coding.net/api/project/130548/files/261947/imagePreview\n  [6]: https://coding.net/api/project/130548/files/261949/imagePreview\n  [7]: https://coding.net/api/project/130548/files/261953/imagePreview\n  [8]: https://coding.net/api/project/130548/files/261954/imagePreview\n  [9]: https://coding.net/api/project/130548/files/261955/imagePreview\n  [10]: https://coding.net/api/project/130548/files/261956/imagePreview\n  [11]: https://coding.net/api/project/130548/files/261958/imagePreview\n  [12]: https://coding.net/api/project/130548/files/261959/imagePreview\n  [13]: https://coding.net/api/project/130548/files/261960/imagePreview\n  [14]: https://coding.net/api/project/130548/files/261961/imagePreview\n  [15]: https://coding.net/api/project/130548/files/261962/imagePreview\n  [16]: https://coding.net/api/project/130548/files/262582/imagePreview\n\n\n\n  <div class=\"footer-nav\">\n  <div class=\"left-nav\"><i class=\"fa fa-angle-left\"></i><a href=\"/help/doc/account/register.html\">上一篇：账户注册&激活</a></div>\n  <div class=\"right-nav\"><a href=\"/help/doc/account/ssh-key.html\">下一篇：SSH公钥配置</a><i class=\"fa fa-angle-right\"></i></div>\n  </div>\n', '本章节主要介绍如何维护和修改个人账户的信息：\n\n\n个人账户信息\n\n个人账户信息包括邮箱，昵称等\n\n\n修改个人资料\n\n方法一：\n\n登录个人账户之后，将鼠标移至用户头像，点击下拉菜单中的「设置」，即可进入个人设置页面，进行个人资料的修改。\n\n\n方法二：\n\n登录个人账户之后，点击屏幕左下角的「设置」，即可进入个人设置页面，进行个人资料的修改。\n\n\n修改注册邮箱\n\n注意，一个邮箱只能用来注册一个账号。如果\nA\n邮箱已被用于注册\na\n账号，要将\nA\n邮箱关联到\nb\n账号，只能先修改\na\n账号对应的邮箱地址为其他。\n\n\n1）进入个人首页，点击左下角的「账户」，点击菜单栏里的「个人设置」，\n在这里输入图片描述 [https://coding.net/api/project/130548/files/261945/imagePreview]\n\n\n2）点击个人信息中的「修改邮箱」\n在这里输入图片描述 [https://coding.net/api/project/130548/files/261946/imagePreview]\n\n\n3）在弹出框内输入想要更改的邮箱\n在这里输入图片描述 [https://coding.net/api/project/130548/files/261947/imagePreview]\n\n\n4）输入登录密码，点击确认\n在这里输入图片描述 [https://coding.net/api/project/130548/files/261949/imagePreview]\n\n\n重置密码\n\n1）忘记密码\n\n在\nCoding.net\n登录框的右下角点击「忘记密码」的链接，就可以通过您的注册邮箱来重置密码了。\n\n如果长时间收不到密码重置邮件，请检查一下你的垃圾邮件夹，或者重新尝试一下。如果连续尝试都无法收到密码重置邮件，则很可能您的邮件服务器拒收了来自\nCoding.net\n的邮件，您需要将\nCoding.net\n加入域名白名单以确保收到来自\nCoding.net\n的邮件。\n\n\n2）登陆后修改密码\n\n进入个人主页，点击账户，然后点击密码设置即可进行密码重置。\n在这里输入图片描述 [https://coding.net/api/project/130548/files/261953/imagePreview]\n\n\n如果长时间收不到密码重置邮件，请检查一下你的垃圾邮件夹，或者重新尝试一下。如果连续尝试都无法收到密码重置邮件，则很可能您的邮件服务器拒收了来自\nCoding.net\n的邮件，您需要将\nCoding.net\n加入域名白名单以确保收到来自\nCoding.net\n的邮件。\n\n\n关于提醒设置\n\n提醒设置是为\nCoding\n用户提供在coding平台上的相关信息提醒而设置的一个功能，你可以根据个人需求进行可以化的设置。\n\n\n修改提醒设置\n\n进入个人主页后，点击“账户”然后点击“提醒设置”即可在右边的选项中选择系统提醒或者邮件提醒完成设置。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/4802fe64-4fa1-46e6-a0d1-70d7aa8b5850.png]\n\n\n\n\n\n<div\nclass=\"footer-nav\">\n\n<div\nclass=\"left-nav\"><i\nclass=\"fa\nfa-angle-left\"></i><a\nhref=\"/help/doc/account/register.html\">上一篇：账户注册&激活</a></div>\n\n<div\nclass=\"right-nav\"><a\nhref=\"/help/doc/account/ssh-key.html\">下一篇：SSH公钥配置</a><i\nclass=\"fa\nfa-angle-right\"></i></div>\n\n</div>', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00'), ('7', '0', '服务级别', 'https://coding.net/help/doc/account/service-level.html', '---\nlayout: post\n\ntitle: 服务级别\n---\n\nCoding 针对不同的资源需求，提供给用户不同的服务。\n\n### 项目升级是什么\n\n项目升级是Coding平台推出为项目提供更多资源更高服务的一项收费业务模块，现阶段推出的付费种类有开发版和高级版这两个版本。\n\n### 项目升级详情和收费\n\n  区别  |免费版|开发版| 高级版\n :-----------: | :-----------: | :-----------: | :-----------: \n价格 ( 单个项目 ) |    免费  |      ￥49/月、￥245/半年、￥441/年  |  ￥199/月、￥995/半年、￥1791/年\n项目成员 |     10人   |       20人 |  50人 \nGit 仓库容量 |    1G   |       5G  |  10G\n演示平台 |    512M 内存/用户,24 小时挂起1   |       1G 内存/项目,无挂起  |  2G 内存/项目,无挂起\n 自定义域名 |     不支持  |       支持  |  支持\nCodeInsight   |     不支持   |       支持 |  支持 \nWebIDE |     3 Workspaces/用户  |     不占成员个人份额|  不占成员个人份额\nSLA|  -   |       - | 99.9%\n数据打包下载|  不支持   |       支持 |  支持\n客服支持|  邮件   |      邮件、工单 |  邮件、工单、QQ、电话\n详细信息可点击https://coding.net/upgrade 您也可以发送邮件至support@coding.net 咨询。\n\n---\n\n## 上一篇 >> [码币&Shop](/help/doc/account/shop.html)\n\n  <div class=\"footer-nav\">\n  <div class=\"left-nav\"><i class=\"fa fa-angle-left\"></i><a href=\"/help/doc/account/shop.html\">上一篇：码币&Shop</a></div>\n  </div>\n', 'Coding\n针对不同的资源需求，提供给用户不同的服务。\n\n\n项目升级是什么\n\n项目升级是Coding平台推出为项目提供更多资源更高服务的一项收费业务模块，现阶段推出的付费种类有开发版和高级版这两个版本。\n\n\n项目升级详情和收费\n\n区别 \n免费版 \n开发版 \n高级版 \n价格\n(\n单个项目\n) \n免费 \n￥49/月、￥245/半年、￥441/年 \n￥199/月、￥995/半年、￥1791/年 \n项目成员 \n10人 \n20人 \n50人 \nGit\n仓库容量 \n1G \n5G \n10G \n演示平台 \n512M\n内存/用户,24\n小时挂起1 \n1G\n内存/项目,无挂起 \n2G\n内存/项目,无挂起 \n自定义域名 \n不支持 \n支持 \n支持 \nCodeInsight \n不支持 \n支持 \n支持 \nWebIDE \n3\nWorkspaces/用户 \n不占成员个人份额 \n不占成员个人份额 \nSLA \n- \n- \n99.9% \n数据打包下载 \n不支持 \n支持 \n支持 \n客服支持 \n邮件 \n邮件、工单 \n邮件、工单、QQ、电话\n详细信息可点击 \nhttps://coding.net/upgrade\n[https://coding.net/upgrade] \n您也可以发送邮件至support@coding.net\n咨询。\n\n\n\n\n\n上一篇\n>> \n码币&SHOP\n[/HELP/DOC/ACCOUNT/SHOP.HTML]\n\n<div\nclass=\"footer-nav\">\n\n<div\nclass=\"left-nav\"><i\nclass=\"fa\nfa-angle-left\"></i><a\nhref=\"/help/doc/account/shop.html\">上一篇：码币&Shop</a></div>\n\n</div>', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00'), ('8', '0', '开始使用Git', 'https://coding.net/help/doc/git/getting-started.html', '---\nlayout: post\n\ntitle: 开始使用Git\n---\n\n本章节介绍如安装 Git 并在 Coding 上管理代码\n\n## Git管理代码 ###\n\n### 安装Git\n\n#### Windows下安装\n\n1. 先从 **[git 官网](http://git-scm.com/downloads)** 上下载 git 并安装到 C 盘。\n2. 将 git 目录下的 bin（如 C:\\Program Files (x86)\\Git\\bin ）添加到 PATH 环境变量。\n3. 增加路径，打开**环境变量**设置：\n\n>   ThisPC > properties > Adavanced system settings > Environment Variables \n\n ![\'\'](https://dn-coding-net-production-pp.qbox.me/f117c387-5655-47d0-9d57-6205a3adf54b.jpg) \n\n选择 PATH, 点击 Edit（如红框所示）。将 bin 的路径（ C:\\Program Files (x86)\\Git\\bin ）添加到变量值后面\n\n ![\'\'](https://dn-coding-net-production-pp.qbox.me/7f1b2ce6-2fa0-4995-850a-7a15bf31c584.jpg) \n\n大功告成，以后你就可以在 cmd 和 Git Bash 中使用 git 命令了， 习惯 bash 的推荐使用 Git Bash\n\n#### Linux下安装\n\n如果要在 Linux 上安装预编译好的 Git 二进制安装包，可以直接用系统提供的包管理工具。\n\n- 在 Fedora 上用 yum 安装：\n \n     $ yum install git-core\n\n- 在 Ubuntu 这类 Debian 体系的系统上，可以用 apt-get 安装：\n\n     $ apt-get install git\n\n#### Mac下安装\n\n在 Mac 上安装 Git 有两种方式。最容易的当属使用图形化的 Git 安装工具，界面如图所示，\n\n![Mac](https://dn-coding-net-production-pp.qbox.me/66fc93ff-4e42-4b19-a4a0-89caa21e6722.png)\n\n下载地址：http://sourceforge.net/projects/git-osx-installer/\n\n\n另一种是通过 [MacPorts](http://www.macports.org) 安装。如果已经装好了 [MacPorts](http://www.macports.org) ，用下面的命令安装 Git：\n\n         $ sudo port install git-core +svn +doc +bash_completion +gitweb\n\n这种方式就不需要再自己安装依赖库了，Macports 会帮你搞定这些麻烦事。一般上面列出的安装选项已经够用，要是你想用 Git 连接 Subversion 的代码仓库，还可以加上 +svn 选项。\n\n\n以上安装好了 Git 的客户端就可以使用 Git 来管理代码啦。\n\n---\n\n\n\n  <div class=\"footer-nav\">\n  <div class=\"left-nav\"><i class=\"fa fa-angle-left\"></i><a href=\"/help/doc/git/index.html\">上一篇：Git 代码托管介绍</a></div>\n  <div class=\"right-nav\"><a href=\"/help/doc/git/repository.html\">下一篇：Git 代码仓库</a><i class=\"fa fa-angle-right\"></i></div>\n  </div>\n', '本章节介绍如安装\nGit\n并在\nCoding\n上管理代码\n\n\nGIT管理代码\n\n安装GIT\n\nWINDOWS下安装\n 1. \n    先从 \n    git\n    官网\n    [http://git-scm.com/downloads] \n    上下载\n    git\n    并安装到\n    C\n    盘。\n 2. \n    将\n    git\n    目录下的\n    bin（如\n    C:\\Program\n    Files\n    (x86)\\Git\\bin\n    ）添加到\n    PATH\n    环境变量。\n 3. \n    增加路径，打开 \n    环境变量 \n    设置：\n\n\nThisPC\n>\nproperties\n>\nAdavanced\nsystem\nsettings\n>\nEnvironment\nVariables\n\n&#39;&#39; [https://dn-coding-net-production-pp.qbox.me/f117c387-5655-47d0-9d57-6205a3adf54b.jpg]\n\n\n选择\nPATH,\n点击\nEdit（如红框所示）。将\nbin\n的路径（\nC:\\Program\nFiles\n(x86)\\Git\\bin\n）添加到变量值后面\n\n&#39;&#39; [https://dn-coding-net-production-pp.qbox.me/7f1b2ce6-2fa0-4995-850a-7a15bf31c584.jpg]\n\n\n大功告成，以后你就可以在\ncmd\n和\nGit\nBash\n中使用\ngit\n命令了，\n习惯\nbash\n的推荐使用\nGit\nBash\n\n\nLINUX下安装\n\n如果要在\nLinux\n上安装预编译好的\nGit\n二进制安装包，可以直接用系统提供的包管理工具。\n\n * \n   在\n   Fedora\n   上用\n   yum\n   安装：\n   \n   \n   $\n   yum\n   install\n   git-core\n   \n   \n * \n   在\n   Ubuntu\n   这类\n   Debian\n   体系的系统上，可以用\n   apt-get\n   安装：\n   \n   \n   $\n   apt-get\n   install\n   git\n   \n   \n\n\nMAC下安装\n\n在\nMac\n上安装\nGit\n有两种方式。最容易的当属使用图形化的\nGit\n安装工具，界面如图所示，\n\nMac [https://dn-coding-net-production-pp.qbox.me/66fc93ff-4e42-4b19-a4a0-89caa21e6722.png]\n\n\n下载地址： \nhttp://sourceforge.net/projects/git-osx-installer/\n[http://sourceforge.net/projects/git-osx-installer/]\n\n\n另一种是通过 \nMacPorts\n[http://www.macports.org] \n安装。如果已经装好了 \nMacPorts\n[http://www.macports.org] \n，用下面的命令安装\nGit：\n\n     $ sudo port install git-core +svn +doc +bash_completion +gitweb\n\n\n\n这种方式就不需要再自己安装依赖库了，Macports\n会帮你搞定这些麻烦事。一般上面列出的安装选项已经够用，要是你想用\nGit\n连接\nSubversion\n的代码仓库，还可以加上\n+svn\n选项。\n\n\n以上安装好了\nGit\n的客户端就可以使用\nGit\n来管理代码啦。\n\n\n\n\n\n<div\nclass=\"footer-nav\">\n\n<div\nclass=\"left-nav\"><i\nclass=\"fa\nfa-angle-left\"></i><a\nhref=\"/help/doc/git/index.html\">上一篇：Git\n代码托管介绍</a></div>\n\n<div\nclass=\"right-nav\"><a\nhref=\"/help/doc/git/repository.html\">下一篇：Git\n代码仓库</a><i\nclass=\"fa\nfa-angle-right\"></i></div>\n\n</div>', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00'), ('9', '0', '码币和商城', 'https://coding.net/help/doc/account/shop.html', '---\nlayout: post\n\ntitle: 码币和商城\n---\n\n## 什么是码币\n\n码币是 Coding 平台推出的线上虚拟货币，可通过在 Coding 上进行 push 代码、完善个人信息、冒泡等动作赚取，目前可用于购买 Coding 商店的礼品以及购买项目升级代金券。\n\n### 可以用码币做什么\n\n1）你可以利用码币购买 Shop 页面所列 Coding 定制等商品：如洋葱猴抱枕、Coding 毛巾、T恤、短裤、Coding定制拖鞋等\n2）购买Coding推出的项目升级业务，拥有更多资源，提供更多个性化的服务详情请点击https://coding.net/upgrade\n(推代码是真的能挣钱！)\n\n### 如何得到码币\n\n![在这里输入图片描述][16]\n\n### Coding Shop 是什么\n\nCoding Shop 是Coding平台推出的使用虚拟货币玛币来购买Shop中商品的一个板块。\n\n###  Coding Shop 商品\n\nShop 中的商品现阶段有洋葱猴抱枕、Coding定制毛巾、Coding定制纯棉T恤、Coding代金券（50元、200元,500元）、Coding人字拖、Coding短裤、推荐图书等。\nCoding不定时地会在Shop中推出新款的定制商品，请多多关注。\n\n### 商品发货&物流\n\nShop中的商品会在每周五进行发货（周五当天订购商品需等到下周五发货），物流信息会在三天内更新。\n\n### 开具发票\n\nCoding会在每个月的月初与月中开具发票并寄出，如果您有开具发票的需求，您可以线上申请开具。\n\n\n---\n\n\n[16]: https://coding.net/api/project/130548/files/262582/imagePreview\n\n\n  <div class=\"footer-nav\">\n  <div class=\"left-nav\"><i class=\"fa fa-angle-left\"></i><a href=\"/help/doc/account/oauth.html\">上一篇：OAuth</a></div>\n  <div class=\"right-nav\"><a href=\"/help/doc/account/service-level.html\">下一篇：服务级别</a><i class=\"fa fa-angle-right\"></i></div>\n  </div>\n', '什么是码币\n\n码币是\nCoding\n平台推出的线上虚拟货币，可通过在\nCoding\n上进行\npush\n代码、完善个人信息、冒泡等动作赚取，目前可用于购买\nCoding\n商店的礼品以及购买项目升级代金券。\n\n\n可以用码币做什么\n\n1）你可以利用码币购买\nShop\n页面所列\nCoding\n定制等商品：如洋葱猴抱枕、Coding\n毛巾、T恤、短裤、Coding定制拖鞋等\n\n2）购买Coding推出的项目升级业务，拥有更多资源，提供更多个性化的服务详情请点击 \nhttps://coding.net/upgrade\n[https://coding.net/upgrade]\n\n(推代码是真的能挣钱！)\n\n\n如何得到码币\n在这里输入图片描述 [https://coding.net/api/project/130548/files/262582/imagePreview]\n\n\nCODING\nSHOP\n是什么\n\nCoding\nShop\n是Coding平台推出的使用虚拟货币玛币来购买Shop中商品的一个板块。\n\n\nCODING\nSHOP\n商品\n\nShop\n中的商品现阶段有洋葱猴抱枕、Coding定制毛巾、Coding定制纯棉T恤、Coding代金券（50元、200元,500元）、Coding人字拖、Coding短裤、推荐图书等。\n\nCoding不定时地会在Shop中推出新款的定制商品，请多多关注。\n\n\n商品发货&物流\n\nShop中的商品会在每周五进行发货（周五当天订购商品需等到下周五发货），物流信息会在三天内更新。\n\n\n开具发票\n\nCoding会在每个月的月初与月中开具发票并寄出，如果您有开具发票的需求，您可以线上申请开具。\n\n\n\n\n\n<div\nclass=\"footer-nav\">\n\n<div\nclass=\"left-nav\"><i\nclass=\"fa\nfa-angle-left\"></i><a\nhref=\"/help/doc/account/oauth.html\">上一篇：OAuth</a></div>\n\n<div\nclass=\"right-nav\"><a\nhref=\"/help/doc/account/service-level.html\">下一篇：服务级别</a><i\nclass=\"fa\nfa-angle-right\"></i></div>\n\n</div>', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00'), ('10', '0', 'SSH公钥配置', 'https://coding.net/help/doc/account/ssh-key.html', '---\nlayout: post\n\ntitle: SSH公钥配置\n---\n\n本章节主要介绍如何配置 Coding 的SSH公钥，并通过 SSH 的方式访问代码仓库。\n\n有关什么是 SSH，可参考中文维基百科（http://zh.wikipedia.org/zh/Secure_Shell）。\n这里要说明的是，Coding.net 支持使用 SSH 协议来访问 Git仓库，提供账户 SSH 公钥和项目部署 SSH 公钥设置。\n用户可以在认证身份时选择在账户里面设置 SSH公钥，并获所有仓库的读写权限（注意！您的公钥对应的私钥必须要妥善保存，如果您的私钥被第三方获取，那么他将可以以您的身份来操作 Git 仓库，这跟密码被盗一样严重）]， 也可以在项目设置里面设置项目部署公钥，获取仓库的只读权限。\n\n添加公钥后，您就可以在项目的代码页面点击 SSH 切换到 SSH 协议的 clone 地址，类似这样：（git@coding.net:wzw/leave-a-message.git），这样就可以使用 SSH 协议来访问 Git 仓库了，每次链接都不需要再输入账号和密码了。\n\n> 注意：一个公钥只能认证一个用户，而一个用户却可以拥有多个公钥。\n\n\n## 账户 SSH 公钥\n\n账户 SSH 公钥是跟用户账户关联的公钥，一旦设置，就拥有账户下所有项目仓库的读写权限。\n\n### 生成公钥 \n\n打开命令行终端输入ssh-keygen -t rsa -C \"username@example.com\",( 注册的邮箱)，接下来点击enter键即可（也可以输入密码）。\n\n    ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\n    # Creates a new ssh key, using the provided email as a label\n    # Generating public/private rsa key pair.\n    Enter file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter]  // 推荐使用默认地址\n\n成功之后\n\n    Your identification has been saved in /Users/you/.ssh/id_rsa.\n    # Your public key has been saved in /Users/you/.ssh/id_rsa.pub.\n    # The key fingerprint is:\n    # 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com\n\n### 添加公钥\n\n1. 本地打开 id_rsa.pub 文件，复制其中全部内容，填写到SSH_RSA公钥key下的一栏，公钥名称可以随意起名字。\n2. 完成后点击“添加”，然后输入密码或动态码即可添加完成。\n ![图片](https://dn-coding-net-production-pp.qbox.me/49eab64b-8d8a-4787-a0ed-ce347f753a69.png) \n\n3. 完成后在命令行测试，首次建立链接会要求信任主机。\n ![图片](https://dn-coding-net-production-pp.qbox.me/946e60e5-27e3-4ab0-93cf-ea045096dc85.png) \n\n\n### 部署 SSH 公钥\n\n项目部署 SSH 公钥是跟项目关联的公钥，设置后有该项目的仓库的只读权限。\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/862d0517-5b77-49c7-bfb2-398674e476dd.png) \n\n添加方式同 SSH 公钥一致。\n\n---\n\n\n  <div class=\"footer-nav\">\n  <div class=\"left-nav\"><i class=\"fa fa-angle-left\"></i><a href=\"/help/doc/account/setting.html\">上一篇：账户设置</a></div>\n  <div class=\"right-nav\"><a href=\"/help/doc/account/2fa.html\">下一篇：两步认证</a><i class=\"fa fa-angle-right\"></i></div>\n  </div>\n', '本章节主要介绍如何配置\nCoding\n的SSH公钥，并通过\nSSH\n的方式访问代码仓库。\n\n\n有关什么是\nSSH，可参考中文维基百科（ \nhttp://zh.wikipedia.org/zh/Secure_Shell）。\n[http://zh.wikipedia.org/zh/Secure_Shell）。]\n\n这里要说明的是，Coding.net\n支持使用\nSSH\n协议来访问\nGit仓库，提供账户\nSSH\n公钥和项目部署\nSSH\n公钥设置。\n\n用户可以在认证身份时选择在账户里面设置\nSSH公钥，并获所有仓库的读写权限（注意！您的公钥对应的私钥必须要妥善保存，如果您的私钥被第三方获取，那么他将可以以您的身份来操作\nGit\n仓库，这跟密码被盗一样严重）]，\n也可以在项目设置里面设置项目部署公钥，获取仓库的只读权限。\n\n\n添加公钥后，您就可以在项目的代码页面点击\nSSH\n切换到\nSSH\n协议的\nclone\n地址，类似这样：（git@coding.net:wzw/leave-a-message.git），这样就可以使用\nSSH\n协议来访问\nGit\n仓库了，每次链接都不需要再输入账号和密码了。\n\n\n注意：一个公钥只能认证一个用户，而一个用户却可以拥有多个公钥。\n\n\n账户\nSSH\n公钥\n\n账户\nSSH\n公钥是跟用户账户关联的公钥，一旦设置，就拥有账户下所有项目仓库的读写权限。\n\n\n生成公钥\n\n打开命令行终端输入ssh-keygen\n-t\nrsa\n-C\n\"username@example.com\",(\n注册的邮箱)，接下来点击enter键即可（也可以输入密码）。\n\nssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\n# Creates a new ssh key, using the provided email as a label\n# Generating public/private rsa key pair.\nEnter file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter]  // 推荐使用默认地址\n\n\n\n成功之后\n\nYour identification has been saved in /Users/you/.ssh/id_rsa.\n# Your public key has been saved in /Users/you/.ssh/id_rsa.pub.\n# The key fingerprint is:\n# 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com\n\n\n\n添加公钥\n 1. \n    本地打开\n    id_rsa.pub\n    文件，复制其中全部内容，填写到SSH_RSA公钥key下的一栏，公钥名称可以随意起名字。\n 2. \n    完成后点击“添加”，然后输入密码或动态码即可添加完成。\n    图片 [https://dn-coding-net-production-pp.qbox.me/49eab64b-8d8a-4787-a0ed-ce347f753a69.png]\n    \n    \n 3. \n    完成后在命令行测试，首次建立链接会要求信任主机。\n    图片 [https://dn-coding-net-production-pp.qbox.me/946e60e5-27e3-4ab0-93cf-ea045096dc85.png]\n    \n    \n\n\n部署\nSSH\n公钥\n\n项目部署\nSSH\n公钥是跟项目关联的公钥，设置后有该项目的仓库的只读权限。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/862d0517-5b77-49c7-bfb2-398674e476dd.png]\n\n\n添加方式同\nSSH\n公钥一致。\n\n\n\n\n\n<div\nclass=\"footer-nav\">\n\n<div\nclass=\"left-nav\"><i\nclass=\"fa\nfa-angle-left\"></i><a\nhref=\"/help/doc/account/setting.html\">上一篇：账户设置</a></div>\n\n<div\nclass=\"right-nav\"><a\nhref=\"/help/doc/account/2fa.html\">下一篇：两步认证</a><i\nclass=\"fa\nfa-angle-right\"></i></div>\n\n</div>', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00'), ('11', '0', 'Code Insight代码阅读', 'https://coding.net/help/doc/git/code-insight.html', '---\nlayout: post\n\ntitle: Code Insight代码阅读\n---\n\n## 代码阅读\n\n代码阅读( CodeInsight )是 Coding 开发的用来在线阅读代码的一种功能，在 Coding 你不止可以在代码托管页面阅读代码，我们将提供 代码阅读（CodeInsight）功能，该功能提供了一系列语法分析，交叉引用分析等，最终可以实现在线精准的代码高亮显示，交叉引用查询，声明，定义，调用查询等等高级功能。\n\n如果是付费项目，可以在代码页面的右上角，点击代码阅读，进行阅读，如下图：\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/9b35714c-bfd2-422e-8896-32be3d5d4d11.png) \n\n---\n\n\n\n  <div class=\"footer-nav\">\n  <div class=\"left-nav\"><i class=\"fa fa-angle-left\"></i><a href=\"/help/doc/git/git-branch.html\">上一篇：分支管理</a></div>\n  <div class=\"right-nav\"><a href=\"/help/doc/git/ssh-key.html\">下一篇：SSH公钥配置</a><i class=\"fa fa-angle-right\"></i></div>\n  </div>\n', '代码阅读\n\n代码阅读(\nCodeInsight\n)是\nCoding\n开发的用来在线阅读代码的一种功能，在\nCoding\n你不止可以在代码托管页面阅读代码，我们将提供\n代码阅读（CodeInsight）功能，该功能提供了一系列语法分析，交叉引用分析等，最终可以实现在线精准的代码高亮显示，交叉引用查询，声明，定义，调用查询等等高级功能。\n\n\n如果是付费项目，可以在代码页面的右上角，点击代码阅读，进行阅读，如下图：\n\n图片 [https://dn-coding-net-production-pp.qbox.me/9b35714c-bfd2-422e-8896-32be3d5d4d11.png]\n\n\n\n\n\n<div\nclass=\"footer-nav\">\n\n<div\nclass=\"left-nav\"><i\nclass=\"fa\nfa-angle-left\"></i><a\nhref=\"/help/doc/git/git-branch.html\">上一篇：分支管理</a></div>\n\n<div\nclass=\"right-nav\"><a\nhref=\"/help/doc/git/ssh-key.html\">下一篇：SSH公钥配置</a><i\nclass=\"fa\nfa-angle-right\"></i></div>\n\n</div>', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00'), ('12', '0', 'Git代码仓库', 'https://coding.net/help/doc/git/repository.html', '---\nlayout: post\n\ntitle: Git代码仓库\n---\n\n本章节介绍如何创建和管理你的代码仓库。\n\n### 前提条件\n\n -  已经是某个项目的成员\n -  对项目代码有写权限\n -  项目仓库大小低于项目配额[项目版本说明][3]\n -  安装 Git 客户端，推荐高于 1.9 的版本\n \n### 创建远程代码仓库\n\n远程代码仓库可以理解为在 Coding.net 服务器上创建的一个专供放置代码等文件的一个文件目录。 每当创建一个项目的时候便会默认创建一个 Git 代码仓库与之相关联。\n\n#### 创建私有项目\n\n私有项目的代码仓库如图所示：\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/c261f410-09bd-4bb4-bb27-eef4bcf6965d.png) \n\n#### 创建公开项目\n\n公开项目的代码仓库如图所示：\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/bfbd0905-bf7f-4ce7-98c4-bcb13451a938.png) \n\n#### 导入代码仓库\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/4035d6c0-83a6-43eb-b274-1ac0d601a6f0.png) \n\n在新建项目页面，填写你要导入的项目的名称和描述后，选择导入仓库选项卡，根据你要导入的仓库类型选择版本控制类型，填写导入公开项目的 Clone 地址，\n如：https://github.com/twbs/bootstrap.git （svn 仓库导入格式如 http://code.taobao.org/svn/dev_codes/trunk） \n\nCoding 暂不支持导入外站的私有项目，另外受制于网络条件，Coding不能一定保证导入成功。结果会通过站内通知和邮件告知您。\n\n### Git本地仓库\n\n有两种取得 Git 项目仓库的方法。第一种是在现存的目录下，通过导入所有文件来创建新的 Git 仓库。第二种是从已有的 Git 仓库克隆出一个新的镜像仓库来。\n\n#### 初始化新仓库\n\n要对现有的某个文件夹开始用 Git 管理，只需到所在的目录，执行：\n         \n          $ git init\n\n命令行中会出现以下提示\n\n          Initialized empty Git repository in X:/XXX/.git/\n\n在当前文件夹中会出现一个 .git 文件夹。所有 Git 需要的数据和资源都存放在这个目录中。\n\n\n#### 添加远程仓库\n\n目前 Coding 支持以下三种协议对 git 仓库进行访问：\n\n1) HTTPS：读写仓库加密通道，有单次上传限制。\n2) SSH：读写仓库加密通道，无单次上传限制，需先在个人设置页面上传 SSH-RSA 公钥，完成配对验证。\n3) Git：只读，并且只对公开项目有效。\n\n注意：Git 用户名为 Coding 的账户邮箱或者个性后缀，密码为 Coding 的账户密码。\n\n**私有项目地址**\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/c0ad92a5-9bf5-4d35-b2f6-7bc4feabd5c7.png) \n\n\n**公开项目地址**\n\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/e7babea4-4dff-4152-a2c4-ba684a97401a.png) \n\n\n要添加一个新的远程仓库，可以使用 git remote 命令，给远程仓库一个别名，以HTTPS 地址为例运行： \n\ngit remote add [shortname] [url] 命令：\n      \n      $ git remote add codingios https://git.coding.net/Kyle_lyk/learn-git.git\n\n此处以 coding.net 上的一个开源项目 learn-git 为例，添加其为远程仓库，并取别名为\"learn-git\"，接下来用 git remote 命令来查看当前添加的远程仓库：\n\n      $ git remote -v \n\n得到以下结果：\n\n     learn-git  https://git.coding.net/Kyle_lyk/learn-git.git<fetch>\n     learn-git  https://git.coding.net/Kyle_lyk/learn-git.git<push>\n\n现在可以用字符串 learn-git 指代对应的仓库地址了。比如说，要抓取所有 learn-git 有的，但本地仓库没有的信息，可以运行 \n\n     $ git fetch learn-git\n\n现在，learn-git 的主干（master）已经完全可以在本地访问了，对应的名字是 learn-git/master，你可以将它合并到自己的某个分支，或者切换到这个分支，看看有些什么有趣的更新。\n\n####  克隆远程仓库\n\n除了  所述的方法，也可以直接通过 git clone 命令来直接复制远程仓库到本地目录：\n\n    https://git.coding.net/Kyle_lyk/learn-git.git\n\n运行该命令之后，你会发现在当前目录下出现了一个名为 learn-git 的文件夹，其中包含一个 .git 文件夹，用于保存下载下来的所有版本记录，然后从中取出最新版本的文件拷贝。打开 learn-git 文件夹，你会看到项目中的所有文件已经在里边了，准备好后续的开发和使用。如果希望在克隆的时候，自己定义新建文件夹的名称，可以在上面的命令末尾指定新的名字：\n\n    $ git clone https://git.coding.net/Kyle_lyk/learn-git.git study-git\n\n> 注意： 上述 clone 使用的是 HTTPS 的方式，Coding 支持 SSH，HTTPS, Git 3种方式获取代码\n\n上述命令将在当前位置新建一个名为 \"study-git\" 的文件夹，内容和之前的 learn-git 文件夹一样。\n\n---\n\n\n\n  <div class=\"footer-nav\">\n  <div class=\"left-nav\"><i class=\"fa fa-angle-left\"></i><a href=\"/help/doc/git/getting-started.html\">上一篇：开始使用 Git</a></div>\n  <div class=\"right-nav\"><a href=\"/help/doc/git/push.html\">下一篇：提交代码</a><i class=\"fa fa-angle-right\"></i></div>\n  </div>\n', '本章节介绍如何创建和管理你的代码仓库。\n\n\n前提条件\n * \n   已经是某个项目的成员\n * \n   对项目代码有写权限\n * \n   项目仓库大小低于项目配额[项目版本说明][3]\n * \n   安装\n   Git\n   客户端，推荐高于\n   1.9\n   的版本\n\n\n创建远程代码仓库\n\n远程代码仓库可以理解为在\nCoding.net\n服务器上创建的一个专供放置代码等文件的一个文件目录。\n每当创建一个项目的时候便会默认创建一个\nGit\n代码仓库与之相关联。\n\n\n创建私有项目\n\n私有项目的代码仓库如图所示：\n\n图片 [https://dn-coding-net-production-pp.qbox.me/c261f410-09bd-4bb4-bb27-eef4bcf6965d.png]\n\n\n创建公开项目\n\n公开项目的代码仓库如图所示：\n\n图片 [https://dn-coding-net-production-pp.qbox.me/bfbd0905-bf7f-4ce7-98c4-bcb13451a938.png]\n\n\n导入代码仓库\n图片 [https://dn-coding-net-production-pp.qbox.me/4035d6c0-83a6-43eb-b274-1ac0d601a6f0.png]\n\n\n在新建项目页面，填写你要导入的项目的名称和描述后，选择导入仓库选项卡，根据你要导入的仓库类型选择版本控制类型，填写导入公开项目的\nClone\n地址，\n\n如： \nhttps://github.com/twbs/bootstrap.git\n[https://github.com/twbs/bootstrap.git] \n（svn\n仓库导入格式如 \nhttp://code.taobao.org/svn/dev_codes/trunk）\n[http://code.taobao.org/svn/dev_codes/trunk）]\n\n\nCoding\n暂不支持导入外站的私有项目，另外受制于网络条件，Coding不能一定保证导入成功。结果会通过站内通知和邮件告知您。\n\n\nGIT本地仓库\n\n有两种取得\nGit\n项目仓库的方法。第一种是在现存的目录下，通过导入所有文件来创建新的\nGit\n仓库。第二种是从已有的\nGit\n仓库克隆出一个新的镜像仓库来。\n\n\n初始化新仓库\n\n要对现有的某个文件夹开始用\nGit\n管理，只需到所在的目录，执行：\n\n      $ git init\n\n\n\n命令行中会出现以下提示\n\n      Initialized empty Git repository in X:/XXX/.git/\n\n\n\n在当前文件夹中会出现一个\n.git\n文件夹。所有\nGit\n需要的数据和资源都存放在这个目录中。\n\n\n添加远程仓库\n\n目前\nCoding\n支持以下三种协议对\ngit\n仓库进行访问：\n\n\n1)\nHTTPS：读写仓库加密通道，有单次上传限制。\n\n2)\nSSH：读写仓库加密通道，无单次上传限制，需先在个人设置页面上传\nSSH-RSA\n公钥，完成配对验证。\n\n3)\nGit：只读，并且只对公开项目有效。\n\n\n注意：Git\n用户名为\nCoding\n的账户邮箱或者个性后缀，密码为\nCoding\n的账户密码。\n\n\n私有项目地址\n\n图片 [https://dn-coding-net-production-pp.qbox.me/c0ad92a5-9bf5-4d35-b2f6-7bc4feabd5c7.png]\n\n\n公开项目地址\n\n图片 [https://dn-coding-net-production-pp.qbox.me/e7babea4-4dff-4152-a2c4-ba684a97401a.png]\n\n\n要添加一个新的远程仓库，可以使用\ngit\nremote\n命令，给远程仓库一个别名，以HTTPS\n地址为例运行：\n\n\ngit\nremote\nadd\n[shortname]\n[url]\n命令：\n\n  $ git remote add codingios https://git.coding.net/Kyle_lyk/learn-git.git\n\n\n\n此处以\ncoding.net\n上的一个开源项目\nlearn-git\n为例，添加其为远程仓库，并取别名为\"learn-git\"，接下来用\ngit\nremote\n命令来查看当前添加的远程仓库：\n\n  $ git remote -v \n\n\n\n得到以下结果：\n\n learn-git  https://git.coding.net/Kyle_lyk/learn-git.git<fetch>\n learn-git  https://git.coding.net/Kyle_lyk/learn-git.git<push>\n\n\n\n现在可以用字符串\nlearn-git\n指代对应的仓库地址了。比如说，要抓取所有\nlearn-git\n有的，但本地仓库没有的信息，可以运行\n\n $ git fetch learn-git\n\n\n\n现在，learn-git\n的主干（master）已经完全可以在本地访问了，对应的名字是\nlearn-git/master，你可以将它合并到自己的某个分支，或者切换到这个分支，看看有些什么有趣的更新。\n\n\n克隆远程仓库\n\n除了\n所述的方法，也可以直接通过\ngit\nclone\n命令来直接复制远程仓库到本地目录：\n\nhttps://git.coding.net/Kyle_lyk/learn-git.git\n\n\n\n运行该命令之后，你会发现在当前目录下出现了一个名为\nlearn-git\n的文件夹，其中包含一个\n.git\n文件夹，用于保存下载下来的所有版本记录，然后从中取出最新版本的文件拷贝。打开\nlearn-git\n文件夹，你会看到项目中的所有文件已经在里边了，准备好后续的开发和使用。如果希望在克隆的时候，自己定义新建文件夹的名称，可以在上面的命令末尾指定新的名字：\n\n$ git clone https://git.coding.net/Kyle_lyk/learn-git.git study-git\n\n\n\n注意：\n上述\nclone\n使用的是\nHTTPS\n的方式，Coding\n支持\nSSH，HTTPS,\nGit\n3种方式获取代码\n\n\n上述命令将在当前位置新建一个名为\n\"study-git\"\n的文件夹，内容和之前的\nlearn-git\n文件夹一样。\n\n\n\n\n\n<div\nclass=\"footer-nav\">\n\n<div\nclass=\"left-nav\"><i\nclass=\"fa\nfa-angle-left\"></i><a\nhref=\"/help/doc/git/getting-started.html\">上一篇：开始使用\nGit</a></div>\n\n<div\nclass=\"right-nav\"><a\nhref=\"/help/doc/git/push.html\">下一篇：提交代码</a><i\nclass=\"fa\nfa-angle-right\"></i></div>\n\n</div>', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00'), ('13', '0', 'Git 提交代码', 'https://coding.net/help/doc/git/push.html', '---\nlayout: post\n\ntitle: Git 提交代码\n---\n\n本章节介绍如何将代码提交到 Coding 的代码仓库上。\n\n### 提交代码到远程仓库\n\n接下来我们会介绍如何记录更新，并提交更新代码到远程仓库。\n\n#### 文件的状态\n\n工作目录下面的所有文件都不外乎这两种状态：已跟踪或未跟踪。\n\n**已跟踪的文件 ———— tracked**\n\n指本来就被纳入版本控制管理的文件，在上次快照中有它们的记录，工作一段时间后，它们的状态可能是未修改，已修改或者已放入暂存区。\n\n**未跟踪文件 ———— untracked**\n\n它们既没有上次更新时的快照，也不在当前的暂存区域。\n\n初次克隆某个仓库时，工作目录中的所有文件都属于已跟踪文件，且状态为未修改。\n在编辑过某些文件之后，Git 将这些文件标为已修改。我们逐步把这些修改过的文件放到暂存区域，直到最后一次性提交所有这些暂存起来的文件，如此重复。所以使用 Git 时的文件状态变化周期如图所示。\n\n![xx](https://dn-coding-net-production-pp.qbox.me/cfe7389a-6d56-4c01-95e2-87ec1fa4da7a.jpg)\n\n#### 新建跟踪文件\n\n回到我们在 3.2 中创建的本地目录 study-git(详见 3.2.3)。我们可以使用 ^git status^ 命令来查看当前工作目录下的文件状态。因为我们在将远程仓库克隆到本地后并未进行任何操作，所以我们会得到以下输出：\n\n    $ git status\n    On branch master\n    Your branch is up-to-date with \'origin/master\'\n    nothing to commit, working directory clean\n\n这说明你现在的工作目录相当干净。换句话说，所有已跟踪文件在上次提交后都未被更改过。此外，上面的信息还表明，当前目录下没有出现任何处于未跟踪的新文件，否则 Git 会在这里列出来。最后，该命令还显示了当前所在的分支是 master，这是默认的分支名称。\n接下来我们新建一个文本文件,运行 git status 会看到该文件出现在未跟踪文件列表中：\n\n    $ touch test.txt\n    $ echo something > test.txt\n    $ git status \n    On branch master\n    Your branch is up-to-date with \'origin/master\'\n\n    Untracked files:\n      (use \"git add <file>...\" to include in what will be committed)\n\n        test.txt\n\n    nothing added to commit but untracked files present (use \"git add\" to track)\n\n在状态报告中可以看到新建的 test.txt 文件出现在“Untracked files”下面。未跟踪的文件意味着 Git 在之前的快照（提交）中没有这些文件；Git 不会自动将之纳入跟踪范围，除非你明明白白地告诉它“我需要跟踪该文件”，因而不用担心把临时文件什么的也归入版本管理。\n\n**跟踪新文件**\n\n使用命令 git add 我们就可以跟踪一个文件。所以，要跟踪 test.txt 文件，只需运行：\n\n    $ git add test.txt \n\n接下来我们再次用 git status 查看文件状态：\n\n    $ git status \n    On branch master\n    Your branch is up-to-date with \'origin/master\'\n\n    Changes to be committed:\n      (use \"git reset HEAD <file>...\" to unstage)\n\n          new file:  test.txt\n\n只要在 “Changes to be committed” 这行下面的，就说明是已暂存状态。如果此时提交，那么该文件此时此刻的版本将被留存在历史记录中。在 git add 后面可以指明要跟踪的文件或目录路径。如果是目录的话，就说明要递归跟踪该目录下的所有文件。\n\n#### 暂存修改的已跟踪文件\n\n接下来我们把已跟踪的文件 `README.md` 做一些修改。打开 `README.md`，并在第二行加上了一句 \"I am learning to use git\"，现在 `README.md`  中有以下内容：\n\n     #learn-git\n     I am learning to use git\n\n这时我们再次使用 `git status` 命令查看文件状态：\n\n    $ git status \n    On branch master\n    Your branch is up-to-date with \'origin/master\'\n\n    Changes to be committed:\n      (use \"git reset HEAD <file>...\" to unstage)\n\n            new file:  test.txt\n\n    Changes not staged for commit:\n       (use \"git add <file>...\" to update what will be committed)\n       (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n             modified:   README.md\n\n文件 README.md 出现在 \"Changes not staged for commit\" 这行下面，说明已跟踪文件的内容发生了变化，但还没有放到暂存区。要暂存这次更新，需要运行 git add 命令。\n实际上 `git add` 命令是多功能命令，对不同状态的文件，它起到的作用也会不同：\n\n1. 操作对象是未跟踪文件时，将其加入到跟踪文件中\n2. 操作对象是已跟踪文件时，将其放入暂存区\n3. 合并时把有冲突的文件标记为已解决状态（将在下一章详细描述）\n\n现在让我们运行 git add 将 README.md 放到暂存区，然后再看看 git status 的输出：\n\n     $ git add README.md\n     $ git status\n     On branch master\n     Your branch is up-to-date with \'origin/master\'\n\n    Changes to be committed:\n      (use \"git reset HEAD <file>...\" to unstage)\n\n            modified:   README.md\n            new file:   test.txt\n\n#### 查看更改的内容\n\n在工作中，我们经常会需要查看修改后的文件相比之前的文件有哪些不同，那么这时候 `git status` 命令就不够了，我们需要使用 `git diff` 命令来查看更改的内容。我们再对 `README.md` 做一些修改，先不要使用 `git add` 命令将其暂存，此时运行 `git diff` 命令：\n\n     $ git diff\n     diff --git a/README.md b/README.md\n     index a21c979..cf2f0cc 100644\n     --- a/README.md\n     +++ b/README.md\n     @@ -1,2 +1,3 @@ \n      #learn-git\n	  I am learning to use git\n     +new line\n     \\ No newline at end of file\n\n此命令比较的是工作目录中当前文件和暂存区域快照之间的差异，也就是修改之后还没有暂存起来的变化内容。\n\n若要看已经暂存起来的文件和上次提交时的快照之间的差异，可以用 `git diff --cached` 命令。（Git 1.6.1 及更高版本还允许使用 git diff --staged，效果是相同的，但更好记些。）\n\n#### 提交更新到本地仓库\n\n现在的暂存区域已经准备妥当可以提交了。在此之前，请一定要确认还有什么修改过的或新建的文件还没有 `git add` 过，否则提交的时候不会记录这些还没暂存起来的变化。所以，每次准备提交前，最好先用 git status 看下，是不是都已暂存起来了，然后再运行提交命令 `git commit` 来完成提交。\n\n你可以直接输入 `git commit` 命令进行提交，这种方式会启动文本编辑器以便输入本次提交的说明:\n\n     # Please enter the commit message for your changes. Lines starting\n     # with \'#\' will be ignored, and an empty message aborts the commit.\n     # On branch master\n     # Your branch is up-to-date with \'origin/master\'\n     #\n     # Changes to be committed:\n     #       modified:   README.md\n     #       new file:   test.txt\n     #\n\n默认会启用 shell 的环境变量 $EDITOR 所指定的编辑器，一般都是 vim 或 emacs，也可以通过 git config 命令来修改默认的编辑器。\n以 \'#\' 开头的行都被视为注释，在提交时将被丢弃。如果没有输入提交信息就推出编辑器，将放弃这次提交。\n\n同时，你也可以直接使用 \n\n     `git commit -m [提交说明]` \n\n的方式来进行提交:\n\n     $ git commit -m \"My first commit\"\n     [master ca62ea0] My first commit\n      2 files changed, 3 insertions(+)\n      create mode 100644 test.txt\n\n好，现在已经创建了第一个提交！可以看到，提交后它会告诉你，当前是在哪个分支（master）提交的，本次提交的完整 SHA-1 校验和是什么（ca62ea0），以及在本次提交中，有多少文件修订过，多少行添改和删改过。\n\n记住，提交时记录的是放在暂存区域的快照，任何还未暂存的仍然保持已修改状态，可以在下次提交时纳入版本管理。每一次运行提交操作，都是对你项目作一次快照，以后可以回到这个状态，或者进行比较。\n          \n#### 推送到远程仓库\n\n当你想要同别人分享目前的成果时，可以将本地仓库中的数据推送到远程仓库。实现这个任务的命令很简单： \n\n     git push [远程仓库名] [分支名]\n\n如果要把本地的 master 分支推送到 origin 服务器上，可以运行下面的命令：\n\n     $ git push origin master\n     Username for \'https://git.coding.net\': [输入 ID/注册邮箱]\n     Password for \'https://[ID/注册邮箱]@git.coding.net\':\n     Counting objects: 6,done\n     Delta compression using up to 2 threads.\n     Compressing objects: 100% (2/2),done.\n     Writing objects: 100% (4/4),336 bytes | 0 bytes/s, done.\n     Total 4 (delta 0), reused 0 (delta 0)\n     To https://git.coding.net/Kyle_lyk/learn-git.git\n        764ecea..ca62ea0 master -> master\n\n\n现在已经第一次完成推送数据到远程仓库！但是要注意，只有在所克隆的服务器上有写权限，且同一时刻没有其他人在推数据，这条命令才会如期完成任务。如果在你推数据前，已经有其他人推送了若干更新，那你的推送操作就会被驳回。你必须先把他们的更新抓取到本地，合并到自己的项目中，然后才可以再次推送，相关详情请看下一章分支的描述。\n\n---\n\n\n\n  <div class=\"footer-nav\">\n  <div class=\"left-nav\"><i class=\"fa fa-angle-left\"></i><a href=\"/help/doc/git/repository.html\">上一篇：Git 代码仓库</a></div>\n  <div class=\"right-nav\"><a href=\"/help/doc/git/git-branch.html\">下一篇：分支管理</a><i class=\"fa fa-angle-right\"></i></div>\n  </div>\n', '本章节介绍如何将代码提交到\nCoding\n的代码仓库上。\n\n\n提交代码到远程仓库\n\n接下来我们会介绍如何记录更新，并提交更新代码到远程仓库。\n\n\n文件的状态\n\n工作目录下面的所有文件都不外乎这两种状态：已跟踪或未跟踪。\n\n\n已跟踪的文件\n————\ntracked\n\n\n指本来就被纳入版本控制管理的文件，在上次快照中有它们的记录，工作一段时间后，它们的状态可能是未修改，已修改或者已放入暂存区。\n\n\n未跟踪文件\n————\nuntracked\n\n\n它们既没有上次更新时的快照，也不在当前的暂存区域。\n\n\n初次克隆某个仓库时，工作目录中的所有文件都属于已跟踪文件，且状态为未修改。\n\n在编辑过某些文件之后，Git\n将这些文件标为已修改。我们逐步把这些修改过的文件放到暂存区域，直到最后一次性提交所有这些暂存起来的文件，如此重复。所以使用\nGit\n时的文件状态变化周期如图所示。\n\nxx [https://dn-coding-net-production-pp.qbox.me/cfe7389a-6d56-4c01-95e2-87ec1fa4da7a.jpg]\n\n\n新建跟踪文件\n\n回到我们在\n3.2\n中创建的本地目录\nstudy-git(详见\n3.2.3)。我们可以使用\n^git\nstatus^\n命令来查看当前工作目录下的文件状态。因为我们在将远程仓库克隆到本地后并未进行任何操作，所以我们会得到以下输出：\n\n$ git status\nOn branch master\nYour branch is up-to-date with \'origin/master\'\nnothing to commit, working directory clean\n\n\n\n这说明你现在的工作目录相当干净。换句话说，所有已跟踪文件在上次提交后都未被更改过。此外，上面的信息还表明，当前目录下没有出现任何处于未跟踪的新文件，否则\nGit\n会在这里列出来。最后，该命令还显示了当前所在的分支是\nmaster，这是默认的分支名称。\n\n接下来我们新建一个文本文件,运行\ngit\nstatus\n会看到该文件出现在未跟踪文件列表中：\n\n$ touch test.txt\n$ echo something > test.txt\n$ git status \nOn branch master\nYour branch is up-to-date with \'origin/master\'\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n    test.txt\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n\n\n\n在状态报告中可以看到新建的\ntest.txt\n文件出现在“Untracked\nfiles”下面。未跟踪的文件意味着\nGit\n在之前的快照（提交）中没有这些文件；Git\n不会自动将之纳入跟踪范围，除非你明明白白地告诉它“我需要跟踪该文件”，因而不用担心把临时文件什么的也归入版本管理。\n\n\n跟踪新文件\n\n\n使用命令\ngit\nadd\n我们就可以跟踪一个文件。所以，要跟踪\ntest.txt\n文件，只需运行：\n\n$ git add test.txt \n\n\n\n接下来我们再次用\ngit\nstatus\n查看文件状态：\n\n$ git status \nOn branch master\nYour branch is up-to-date with \'origin/master\'\n\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n      new file:  test.txt\n\n\n\n只要在\n“Changes\nto\nbe\ncommitted”\n这行下面的，就说明是已暂存状态。如果此时提交，那么该文件此时此刻的版本将被留存在历史记录中。在\ngit\nadd\n后面可以指明要跟踪的文件或目录路径。如果是目录的话，就说明要递归跟踪该目录下的所有文件。\n\n\n暂存修改的已跟踪文件\n\n接下来我们把已跟踪的文件 \nREADME.md \n做一些修改。打开 \nREADME.md \n，并在第二行加上了一句\n\"I\nam\nlearning\nto\nuse\ngit\"，现在 \nREADME.md \n中有以下内容：\n\n #learn-git\n I am learning to use git\n\n\n\n这时我们再次使用 \ngit\nstatus \n命令查看文件状态：\n\n$ git status \nOn branch master\nYour branch is up-to-date with \'origin/master\'\n\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n        new file:  test.txt\n\nChanges not staged for commit:\n   (use \"git add <file>...\" to update what will be committed)\n   (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n         modified:   README.md\n\n\n\n文件\nREADME.md\n出现在\n\"Changes\nnot\nstaged\nfor\ncommit\"\n这行下面，说明已跟踪文件的内容发生了变化，但还没有放到暂存区。要暂存这次更新，需要运行\ngit\nadd\n命令。\n\n实际上 \ngit\nadd \n命令是多功能命令，对不同状态的文件，它起到的作用也会不同：\n\n 1. \n    操作对象是未跟踪文件时，将其加入到跟踪文件中\n 2. \n    操作对象是已跟踪文件时，将其放入暂存区\n 3. \n    合并时把有冲突的文件标记为已解决状态（将在下一章详细描述）\n\n\n现在让我们运行\ngit\nadd\n将\nREADME.md\n放到暂存区，然后再看看\ngit\nstatus\n的输出：\n\n $ git add README.md\n $ git status\n On branch master\n Your branch is up-to-date with \'origin/master\'\n\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n        modified:   README.md\n        new file:   test.txt\n\n\n\n查看更改的内容\n\n在工作中，我们经常会需要查看修改后的文件相比之前的文件有哪些不同，那么这时候 \ngit\nstatus \n命令就不够了，我们需要使用 \ngit\ndiff \n命令来查看更改的内容。我们再对 \nREADME.md \n做一些修改，先不要使用 \ngit\nadd \n命令将其暂存，此时运行 \ngit\ndiff \n命令：\n\n $ git diff\n diff --git a/README.md b/README.md\n index a21c979..cf2f0cc 100644\n --- a/README.md\n +++ b/README.md\n @@ -1,2 +1,3 @@ \n  #learn-git\n  I am learning to use git\n +new line\n \\ No newline at end of file\n\n\n\n此命令比较的是工作目录中当前文件和暂存区域快照之间的差异，也就是修改之后还没有暂存起来的变化内容。\n\n\n若要看已经暂存起来的文件和上次提交时的快照之间的差异，可以用 \ngit\ndiff\n--cached \n命令。（Git\n1.6.1\n及更高版本还允许使用\ngit\ndiff\n--staged，效果是相同的，但更好记些。）\n\n\n提交更新到本地仓库\n\n现在的暂存区域已经准备妥当可以提交了。在此之前，请一定要确认还有什么修改过的或新建的文件还没有 \ngit\nadd \n过，否则提交的时候不会记录这些还没暂存起来的变化。所以，每次准备提交前，最好先用\ngit\nstatus\n看下，是不是都已暂存起来了，然后再运行提交命令 \ngit\ncommit \n来完成提交。\n\n\n你可以直接输入 \ngit\ncommit \n命令进行提交，这种方式会启动文本编辑器以便输入本次提交的说明:\n\n # Please enter the commit message for your changes. Lines starting\n # with \'#\' will be ignored, and an empty message aborts the commit.\n # On branch master\n # Your branch is up-to-date with \'origin/master\'\n #\n # Changes to be committed:\n #       modified:   README.md\n #       new file:   test.txt\n #\n\n\n\n默认会启用\nshell\n的环境变量\n$EDITOR\n所指定的编辑器，一般都是\nvim\n或\nemacs，也可以通过\ngit\nconfig\n命令来修改默认的编辑器。\n\n以\n\'#\'\n开头的行都被视为注释，在提交时将被丢弃。如果没有输入提交信息就推出编辑器，将放弃这次提交。\n\n\n同时，你也可以直接使用\n\n `git commit -m [提交说明]` \n\n\n\n的方式来进行提交:\n\n $ git commit -m \"My first commit\"\n [master ca62ea0] My first commit\n  2 files changed, 3 insertions(+)\n  create mode 100644 test.txt\n\n\n\n好，现在已经创建了第一个提交！可以看到，提交后它会告诉你，当前是在哪个分支（master）提交的，本次提交的完整\nSHA-1\n校验和是什么（ca62ea0），以及在本次提交中，有多少文件修订过，多少行添改和删改过。\n\n\n记住，提交时记录的是放在暂存区域的快照，任何还未暂存的仍然保持已修改状态，可以在下次提交时纳入版本管理。每一次运行提交操作，都是对你项目作一次快照，以后可以回到这个状态，或者进行比较。\n\n\n推送到远程仓库\n\n当你想要同别人分享目前的成果时，可以将本地仓库中的数据推送到远程仓库。实现这个任务的命令很简单：\n\n git push [远程仓库名] [分支名]\n\n\n\n如果要把本地的\nmaster\n分支推送到\norigin\n服务器上，可以运行下面的命令：\n\n $ git push origin master\n Username for \'https://git.coding.net\': [输入 ID/注册邮箱]\n Password for \'https://[ID/注册邮箱]@git.coding.net\':\n Counting objects: 6,done\n Delta compression using up to 2 threads.\n Compressing objects: 100% (2/2),done.\n Writing objects: 100% (4/4),336 bytes | 0 bytes/s, done.\n Total 4 (delta 0), reused 0 (delta 0)\n To https://git.coding.net/Kyle_lyk/learn-git.git\n    764ecea..ca62ea0 master -> master\n\n\n\n现在已经第一次完成推送数据到远程仓库！但是要注意，只有在所克隆的服务器上有写权限，且同一时刻没有其他人在推数据，这条命令才会如期完成任务。如果在你推数据前，已经有其他人推送了若干更新，那你的推送操作就会被驳回。你必须先把他们的更新抓取到本地，合并到自己的项目中，然后才可以再次推送，相关详情请看下一章分支的描述。\n\n\n\n\n\n<div\nclass=\"footer-nav\">\n\n<div\nclass=\"left-nav\"><i\nclass=\"fa\nfa-angle-left\"></i><a\nhref=\"/help/doc/git/repository.html\">上一篇：Git\n代码仓库</a></div>\n\n<div\nclass=\"right-nav\"><a\nhref=\"/help/doc/git/git-branch.html\">下一篇：分支管理</a><i\nclass=\"fa\nfa-angle-right\"></i></div>\n\n</div>', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00'), ('14', '0', 'Git分支管理', 'https://coding.net/help/doc/git/git-branch.html', '---\nlayout: post\n\ntitle: Git分支管理\n---\n\n本章我们会介绍使 Git 与其它版本控制系统区别开来的最关键特点 ———— Git 的分支。它被称为 Git 的“必杀技”。\n以及如何使用和管理分支。\n\n### 什么是分支\n\n分支一方面类似科幻电影里面经常出现的平行宇宙，每个分支的代码版本都是独立演进的，分支之间的代码版本完全不会干扰另外一个代码版本的开发。但是，与平行宇宙不同的一点是，分支之间还能合并。\n\nGit 的分支相比 SVN 要轻量很多，这是因为 Git 分支并不是复制一个新仓库，而是为一个分支存储一个指针，这个指针将指向某个提交对象。没错，这就和数据结构中常见的指针链表一样。所以 Git 的分支只是指针，并没有将仓库进行复制，每次提交都会让当前的分支向后移动，指向最后一次提交的对象。当你在切换分支时，Git 也只是改变指向当前所在分支的特殊指针 HEAD，所以可以快速地在各个分支之间进行切换。\n\n### 分支的功能\n\n分支在实际中可以方便的隔离开发。\n假设你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。\n\n\n### 创建一个分支\n\n**在 Coding.net 上创建分支**\n\n在 Coding.net 界面上可以进入到项目中，依次点击 [代码] -> [分支] -> [新建分支]：\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/fbb3e1d4-bdbd-4fce-b60c-19b68ce5c9e1.png) \n\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/86b673e4-3576-47cc-9fcc-d1aafb46b3fe.png) \n\n**在命令行创建本地分支**\n\n也可以在命令行用 `git branch`  新建一个分支，回到上一章中提到的 learn-git 项目，我们在本地运行以下命令：\n\n     $ git branch learn-branch\n\n这条命令将会在本地仓库创建一个名为 \"learn-branch\" 的分支，这条分支指向最近一次提交的数据。要注意的是，运行该命令后，当前工作分支仍然是在 \"master\" 分支上，需要使用 `git checkout` 命令来进行分支之间的切换。\n\n### 切换分支\n\n**本地分支切换**\n\n之前我们已经在本地创建好了分支，接下来切换到 \"learn-branch\" 分支：\n\n    $ git checkout learn-branch\n    Switched to branch \'learn-branch\'\n\n`git checkout` 下面这句话告诉我们，我们已经成功地将工作分支切换到了 \"learn-branch\" 分支。\n\n**远端分支切换**\n\nCoding.net 提供在线的分支切换，在项目代码页，master 标签下拉菜单处可以选择其他分支。\n\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/a3a8bb62-4157-4857-acfe-b02c4f29a334.png) \n\n\n也可以在分支页进行选择：\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/0402da8a-22f4-40d4-87b2-ead3db740f97.png) \n\n\n### 合并分支\n\n接下来我们将描述本地两种常见情形下的合并分支操作。本地的分支合并都是在命令行解决的。\n\n\n#### 快进式合并\n\n快进式合并分支，也叫Fast Foreword。 我们在 \"learn-branch\" 分支上进行一些操作，创建一个新的 txt 文件 \"learn-branch.txt\"，接着在其中输入一行 \"I am studying git branch\":\n\n     $touch learn-branch.txt\n     $echo I am studying git branch > learn-branch.txt\n\n接下来我们将 \"learn-branch.txt\" 加入到跟踪文件，并提交到本地仓库：\n\n     $git add learn-branch.txt\n     $git commit -m \"add learn-branch.txt\"\n     [learn-branch fce6c4e] add learn-branch.txt\n      1 files changed, 1 insertions(+)\n      create mode 100644 learn-branch.txt   \n\n接下来我们回到 \"master\" 分支，并将 \"learn-branch\" 分支合并进来：\n\n     $ git checkout master\n     Switched to branch \'master\'\n     Your branch is up-to-date with \'origin/master\'.\n\n     $ git merge learn-branch\n     Updating ca62ea0..fce6c4e\n     Fast-forward\n      learn-branch.txt | 1 +\n      1 file changed, 1 insertion(+)  \n      create mode 100644 learn-branch.txt\n\n`git merge [分支名]` 命令将指定分支合并到当前工作分支中。请注意，合并时出现了 \"Fast forward\" 的提示。由于当前 \"master\" 分支所在的提交对象是要并入的 learn-branch 分支的直接上游，Git 只需把 master 分支指针直接右移。换句话说，如果顺着一个分支走下去可以到达另一个分支的话，那么 Git 在合并两者时，只会简单地把指针右移，因为这种单线的历史分支不存在任何需要解决的分歧，所以这种合并过程可以称为快进（Fast forward）。\n\n合并之后，\"master\" 分支和 \"learn-branch\" 分支实际上是指向同一个位置。此时你可以通过 \n\n     $git branch -d [分支名]\n\n来删除某个分支。\n\n#### 普通分支合并\n\n分支合并之前，最好使用 git pull 将 \"master\" 分支的代码更新到最新：\n    \n如果我们在合并之前对 \"master\" 分支和 \"learn-branch\" 分支都做了一些修改，那合并时就不会像快进合并那么简单了。\n     \n我们首先在 \"master\" 分支中做一些修改，比如将 \"lear-branch.txt\" 的内容进行修改：\n\n     $echo I am on master branch > lear-branch.txt\n     $git commit -m \"alpha\"\n     [master a72cad8] alpha\n      1 files changed, 1 insertions(+), 1 deletion(-)\n \n\n接下来，我们进入到 \"learn-branch\" 分支，也对 \"learn-branch.txt\" 进行一些修改：\n\n     $git checkout learn-branch\n     Swtiched to branch \'learn-branch\'\n     $echo I am on learn-branch branch > lear-branch.txt\n     $git commit -m \"beta\"\n     [learn-branch 27a4a6e] beta\n      1 files changed, 1 insertions(+), 1 deletion(-)\n     \n我们回到 \"master\" 分支再尝试合并分支：\n\n     $git checkout master\n     Swtiched to branch \'master\' \n     $git merge learn-branch\n     Auto-merging learn-branch.txt\n     CONFLICT (content): Merge conflict in learn-branch.txt\n     Automatic merge failed; fix conflicts and then commit the result.\n\n通常来说，当工作分支所指向的提交对象并不是需合并分支的直接祖先，Git 不得不进行一些额外处理。Git 会根据分支的内容自动创建了一个包含了合并结果的提交对象，这个新的提交对象会包涵两次提交的内容。但是我们在两个分支中操作了同一个文件的同一个部分，这就需要我们手动来解决冲突了。\n\n现在运行 `git status` 命令，我们会看到在哪里出现了冲突：\n\n     $ git status\n     On branch master\n     You have unmerged paths.\n       (fix conflicts and run \"git commit\")\n\n     Unmerged paths:\n       (use \"git add <file>...\" to mark resolution)\n\n             both modified:      learn-branch.txt\n\n     no changes added to commit (use \"git add\" and/or \"git commit -a\")\n\n现在我们打开 learn-branch.txt，会发现 Git 加入了冲突解决标记：\n\n     <<<<<<< HEAD\n     I am on master branch \n     =======\n     I am on learn-branch branch \n     >>>>>>> learn-branch\n     \n可以看到 ======= 隔开的上半部分，是 HEAD（即 master 分支，在运行 merge 命令时的工作分支）中的内容，下半部分是在 learn-branch 分支中的内容。解决冲突的办法无非是二者选其一或者人工亲自整合到一起。把上述内容修改为这样：\n\n     I am on master branch \n\n接下来运行 `git add` 来告诉 Git 冲突已经解决，并运行 `git commit` 来完成合并：\n\n     $git add learn-branch.txt\n     $git commit -m \"conflict resolved\"\n     [master cadd265] conflict resloved\n\n这样的合并冲突在快进合并中不可能发生。\n\n\n#### 分支推送到仓库\n\n当你想和其他人分享某个本地分支时，你需要把它推送到一个你拥有写权限的远程仓库。你创建的本地分支不会因为你的写入操作而被自动同步到你引入的远程服务器上，你需要明确地执行推送分支的操作。换句话说，对于无意分享的分支，你尽管保留为私人分支好了，而只推送那些协同工作要用到的特性分支。\n\n我们可以使用 `git push [仓库名] [分支名]` 将之前在本地创建的 \"learn-branch\" 分支推送到 部署在 Coding.net 的 \"learn-git\" 项目中：\n\n\n     $ git push origin serverfix\n     Counting objects: 7, done.\n     Delta compression using up to 2 threads.\n     Compressing objects: 100% (2/2), done.\n     Writing objects: 100% (3/3), 333 bytes | 0 bytes/s, done.\n     Total 3 (delta 0), reused 0 (delta 0)\n     To https:git.coding.net/Kyle_lyk/learn-git.git\n      * [new branch]      learn-branch -> learn-branch\n\n现在查看 \"learn-git\" 仓库，你就会发现除了 \"master\" 分支外，还增加了一个 \"learn-branch\" 分支。\n\n#### 合并请求\n\nCoding 推荐使用合并请求，在线将2个分支合并。合并请求分为\n    \n    -  MergeRequest  针对私有项目 \n    -  PullRequest  针对公开项目\n\n**私有项目**\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/85a46436-5ca7-4f9e-8ee0-ba1e23513828.png) \n\n当你将分支推送到远端仓库后，通过新建&提交“合并请求”\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/56f812ec-c423-44b7-832c-dd08805fa6ee.png) \n\n在创建新的合并请求时，可以填写代码评审，并引用项目内任务进行关联。 合并请求(MR) 发起人可以在该MR被合并前，随时对代码评审和引用任务进行编辑。点击提交，即可以创建一个合并请求( MR ) ，系统会自动判断出该 MR 的是否可以合并状态。\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/980fded0-b1aa-47a7-b4ed-30085c98b9ba.png) \n\n在 MR 页面里面，MR 的提交者可以取消 MR ，MR 目标分支的管理者（对该分支有写权限的项目成员），可以选择合并或者拒绝。MR 支持 Markdown 语法评论。\n\n\n**公开项目** \n\n ![图片](https://dn-coding-net-production-pp.qbox.me/4703cf86-9268-4de5-a2de-c6072b446e3a.png) \n\n通过 Fork - Pull Request 的方式，提交合并请求。\n\n首先，你需要将共有项目 fork 到你自己的仓库，如图。\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/37acd26e-868f-4935-b479-d21fd1f1b1da.png) \n\nfork 后会在你的项目空间生成一个对应的项目，然后修改 fork 后项目的代码。\n\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/2cf2205c-f22b-41a3-9938-d075fe1e3b2c.png) \n\n\n\n当准备同源项目合并时，创建合并请求( Pull Request )\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/de9a67f9-bd8a-4f1e-b95c-a46a279358f7.png) \n\n点击提交，即可以创建一个合并请求( PR ) ，系统会自动判断出该 PR 的是否可以合并状态。 \n\n#### 代码行级比对\n\n代码行级比对( Line Notes ) 是 Coding 开发的可以针对代码的 diff 进行行级别的评论功能，支持 Markdown 语法，可以方便的用来进行 Code Review。\n你可以在代码 commit 页面，和合并请求( MR /PR ) 页面使用该功能。如下图：\n\n\n> 此处放上之前 Line Notes 上线推广时录制的 Gif。\n\n\n### 保护分支\n\n保护分支是 Coding 针对 Git 中有关代码权限开发的一个功能，阅读之前，我假设您已经知道分支的基本概念和用法。简而言之，保护分支就是将特定的分支保护起来，以防止被破坏。\n\n在项目代码分支页面，我们可以设置保护分支，如下图所示：\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/25bb5b4e-ebcd-40ac-bdc1-4ed15ab63b3a.png) \n\n分支名称左边有一个 lock 标志，表示改分支是保护分支。我们可以点击右侧的绿色盾牌标志来设置开关保护分支和设置保护分支成员。如下图：\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/f9f8b62d-ee87-4333-aec2-733c6699e53f.png) \n勾选某个项目成员，即代表改成员对该分支有 write 权限（可以push 至该分支，可以接受该分支的 MR）。\n\n其他成员，则没有权限 push 至该分支，当push 至该分支的时候，会得到如下错误提示：\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/bf94efb5-a604-4bf5-9e8a-fd9837fbef64.png) \n所以，当你看到这个错误提示的时候，就知道是因为没有该保护分支权限而导致 push 失败了。\n\n---\n\n\n  <div class=\"footer-nav\">\n  <div class=\"left-nav\"><i class=\"fa fa-angle-left\"></i><a href=\"/help/doc/git/push.html\">上一篇：提交代码</a></div>\n  <div class=\"right-nav\"><a href=\"/help/doc/git/code-insight.html\">下一篇：代码阅读</a><i class=\"fa fa-angle-right\"></i></div>\n  </div>\n', '本章我们会介绍使\nGit\n与其它版本控制系统区别开来的最关键特点\n————\nGit\n的分支。它被称为\nGit\n的“必杀技”。\n\n以及如何使用和管理分支。\n\n\n什么是分支\n\n分支一方面类似科幻电影里面经常出现的平行宇宙，每个分支的代码版本都是独立演进的，分支之间的代码版本完全不会干扰另外一个代码版本的开发。但是，与平行宇宙不同的一点是，分支之间还能合并。\n\n\nGit\n的分支相比\nSVN\n要轻量很多，这是因为\nGit\n分支并不是复制一个新仓库，而是为一个分支存储一个指针，这个指针将指向某个提交对象。没错，这就和数据结构中常见的指针链表一样。所以\nGit\n的分支只是指针，并没有将仓库进行复制，每次提交都会让当前的分支向后移动，指向最后一次提交的对象。当你在切换分支时，Git\n也只是改变指向当前所在分支的特殊指针\nHEAD，所以可以快速地在各个分支之间进行切换。\n\n\n分支的功能\n\n分支在实际中可以方便的隔离开发。\n\n假设你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。\n\n\n创建一个分支\n\n在\nCoding.net\n上创建分支\n\n\n在\nCoding.net\n界面上可以进入到项目中，依次点击\n[代码]\n->\n[分支]\n->\n[新建分支]：\n\n图片 [https://dn-coding-net-production-pp.qbox.me/fbb3e1d4-bdbd-4fce-b60c-19b68ce5c9e1.png]\n\n图片 [https://dn-coding-net-production-pp.qbox.me/86b673e4-3576-47cc-9fcc-d1aafb46b3fe.png]\n\n\n在命令行创建本地分支\n\n\n也可以在命令行用 \ngit\nbranch \n新建一个分支，回到上一章中提到的\nlearn-git\n项目，我们在本地运行以下命令：\n\n $ git branch learn-branch\n\n\n\n这条命令将会在本地仓库创建一个名为\n\"learn-branch\"\n的分支，这条分支指向最近一次提交的数据。要注意的是，运行该命令后，当前工作分支仍然是在\n\"master\"\n分支上，需要使用 \ngit\ncheckout \n命令来进行分支之间的切换。\n\n\n切换分支\n\n本地分支切换\n\n\n之前我们已经在本地创建好了分支，接下来切换到\n\"learn-branch\"\n分支：\n\n$ git checkout learn-branch\nSwitched to branch \'learn-branch\'\n\n\n\ngit\ncheckout \n下面这句话告诉我们，我们已经成功地将工作分支切换到了\n\"learn-branch\"\n分支。\n\n\n远端分支切换\n\n\nCoding.net\n提供在线的分支切换，在项目代码页，master\n标签下拉菜单处可以选择其他分支。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/a3a8bb62-4157-4857-acfe-b02c4f29a334.png]\n\n\n也可以在分支页进行选择：\n\n图片 [https://dn-coding-net-production-pp.qbox.me/0402da8a-22f4-40d4-87b2-ead3db740f97.png]\n\n\n合并分支\n\n接下来我们将描述本地两种常见情形下的合并分支操作。本地的分支合并都是在命令行解决的。\n\n\n快进式合并\n\n快进式合并分支，也叫Fast\nForeword。\n我们在\n\"learn-branch\"\n分支上进行一些操作，创建一个新的\ntxt\n文件\n\"learn-branch.txt\"，接着在其中输入一行\n\"I\nam\nstudying\ngit\nbranch\":\n\n $touch learn-branch.txt\n $echo I am studying git branch > learn-branch.txt\n\n\n\n接下来我们将\n\"learn-branch.txt\"\n加入到跟踪文件，并提交到本地仓库：\n\n $git add learn-branch.txt\n $git commit -m \"add learn-branch.txt\"\n [learn-branch fce6c4e] add learn-branch.txt\n  1 files changed, 1 insertions(+)\n  create mode 100644 learn-branch.txt   \n\n\n\n接下来我们回到\n\"master\"\n分支，并将\n\"learn-branch\"\n分支合并进来：\n\n $ git checkout master\n Switched to branch \'master\'\n Your branch is up-to-date with \'origin/master\'.\n\n $ git merge learn-branch\n Updating ca62ea0..fce6c4e\n Fast-forward\n  learn-branch.txt | 1 +\n  1 file changed, 1 insertion(+)  \n  create mode 100644 learn-branch.txt\n\n\n\ngit\nmerge\n[分支名] \n命令将指定分支合并到当前工作分支中。请注意，合并时出现了\n\"Fast\nforward\"\n的提示。由于当前\n\"master\"\n分支所在的提交对象是要并入的\nlearn-branch\n分支的直接上游，Git\n只需把\nmaster\n分支指针直接右移。换句话说，如果顺着一个分支走下去可以到达另一个分支的话，那么\nGit\n在合并两者时，只会简单地把指针右移，因为这种单线的历史分支不存在任何需要解决的分歧，所以这种合并过程可以称为快进（Fast\nforward）。\n\n\n合并之后，\"master\"\n分支和\n\"learn-branch\"\n分支实际上是指向同一个位置。此时你可以通过\n\n $git branch -d [分支名]\n\n\n\n来删除某个分支。\n\n\n普通分支合并\n\n分支合并之前，最好使用\ngit\npull\n将\n\"master\"\n分支的代码更新到最新：\n\n\n如果我们在合并之前对\n\"master\"\n分支和\n\"learn-branch\"\n分支都做了一些修改，那合并时就不会像快进合并那么简单了。\n\n\n我们首先在\n\"master\"\n分支中做一些修改，比如将\n\"lear-branch.txt\"\n的内容进行修改：\n\n $echo I am on master branch > lear-branch.txt\n $git commit -m \"alpha\"\n [master a72cad8] alpha\n  1 files changed, 1 insertions(+), 1 deletion(-)\n\n\n\n接下来，我们进入到\n\"learn-branch\"\n分支，也对\n\"learn-branch.txt\"\n进行一些修改：\n\n $git checkout learn-branch\n Swtiched to branch \'learn-branch\'\n $echo I am on learn-branch branch > lear-branch.txt\n $git commit -m \"beta\"\n [learn-branch 27a4a6e] beta\n  1 files changed, 1 insertions(+), 1 deletion(-)\n\n\n\n我们回到\n\"master\"\n分支再尝试合并分支：\n\n $git checkout master\n Swtiched to branch \'master\' \n $git merge learn-branch\n Auto-merging learn-branch.txt\n CONFLICT (content): Merge conflict in learn-branch.txt\n Automatic merge failed; fix conflicts and then commit the result.\n\n\n\n通常来说，当工作分支所指向的提交对象并不是需合并分支的直接祖先，Git\n不得不进行一些额外处理。Git\n会根据分支的内容自动创建了一个包含了合并结果的提交对象，这个新的提交对象会包涵两次提交的内容。但是我们在两个分支中操作了同一个文件的同一个部分，这就需要我们手动来解决冲突了。\n\n\n现在运行 \ngit\nstatus \n命令，我们会看到在哪里出现了冲突：\n\n $ git status\n On branch master\n You have unmerged paths.\n   (fix conflicts and run \"git commit\")\n\n Unmerged paths:\n   (use \"git add <file>...\" to mark resolution)\n\n         both modified:      learn-branch.txt\n\n no changes added to commit (use \"git add\" and/or \"git commit -a\")\n\n\n\n现在我们打开\nlearn-branch.txt，会发现\nGit\n加入了冲突解决标记：\n\n <<<<<<< HEAD\n I am on master branch \n =======\n I am on learn-branch branch \n >>>>>>> learn-branch\n\n\n\n可以看到\n=======\n隔开的上半部分，是\nHEAD（即\nmaster\n分支，在运行\nmerge\n命令时的工作分支）中的内容，下半部分是在\nlearn-branch\n分支中的内容。解决冲突的办法无非是二者选其一或者人工亲自整合到一起。把上述内容修改为这样：\n\n I am on master branch \n\n\n\n接下来运行 \ngit\nadd \n来告诉\nGit\n冲突已经解决，并运行 \ngit\ncommit \n来完成合并：\n\n $git add learn-branch.txt\n $git commit -m \"conflict resolved\"\n [master cadd265] conflict resloved\n\n\n\n这样的合并冲突在快进合并中不可能发生。\n\n\n分支推送到仓库\n\n当你想和其他人分享某个本地分支时，你需要把它推送到一个你拥有写权限的远程仓库。你创建的本地分支不会因为你的写入操作而被自动同步到你引入的远程服务器上，你需要明确地执行推送分支的操作。换句话说，对于无意分享的分支，你尽管保留为私人分支好了，而只推送那些协同工作要用到的特性分支。\n\n\n我们可以使用 \ngit\npush\n[仓库名]\n[分支名] \n将之前在本地创建的\n\"learn-branch\"\n分支推送到\n部署在\nCoding.net\n的\n\"learn-git\"\n项目中：\n\n $ git push origin serverfix\n Counting objects: 7, done.\n Delta compression using up to 2 threads.\n Compressing objects: 100% (2/2), done.\n Writing objects: 100% (3/3), 333 bytes | 0 bytes/s, done.\n Total 3 (delta 0), reused 0 (delta 0)\n To https:git.coding.net/Kyle_lyk/learn-git.git\n  * [new branch]      learn-branch -> learn-branch\n\n\n\n现在查看\n\"learn-git\"\n仓库，你就会发现除了\n\"master\"\n分支外，还增加了一个\n\"learn-branch\"\n分支。\n\n\n合并请求\n\nCoding\n推荐使用合并请求，在线将2个分支合并。合并请求分为\n\n-  MergeRequest  针对私有项目 \n-  PullRequest  针对公开项目\n\n\n\n私有项目\n\n图片 [https://dn-coding-net-production-pp.qbox.me/85a46436-5ca7-4f9e-8ee0-ba1e23513828.png]\n\n\n当你将分支推送到远端仓库后，通过新建&提交“合并请求”\n\n图片 [https://dn-coding-net-production-pp.qbox.me/56f812ec-c423-44b7-832c-dd08805fa6ee.png]\n\n\n在创建新的合并请求时，可以填写代码评审，并引用项目内任务进行关联。\n合并请求(MR)\n发起人可以在该MR被合并前，随时对代码评审和引用任务进行编辑。点击提交，即可以创建一个合并请求(\nMR\n)\n，系统会自动判断出该\nMR\n的是否可以合并状态。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/980fded0-b1aa-47a7-b4ed-30085c98b9ba.png]\n\n\n在\nMR\n页面里面，MR\n的提交者可以取消\nMR\n，MR\n目标分支的管理者（对该分支有写权限的项目成员），可以选择合并或者拒绝。MR\n支持\nMarkdown\n语法评论。\n\n\n公开项目\n\n图片 [https://dn-coding-net-production-pp.qbox.me/4703cf86-9268-4de5-a2de-c6072b446e3a.png]\n\n\n通过\nFork\n-\nPull\nRequest\n的方式，提交合并请求。\n\n\n首先，你需要将共有项目\nfork\n到你自己的仓库，如图。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/37acd26e-868f-4935-b479-d21fd1f1b1da.png]\n\n\nfork\n后会在你的项目空间生成一个对应的项目，然后修改\nfork\n后项目的代码。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/2cf2205c-f22b-41a3-9938-d075fe1e3b2c.png]\n\n\n当准备同源项目合并时，创建合并请求(\nPull\nRequest\n)\n\n图片 [https://dn-coding-net-production-pp.qbox.me/de9a67f9-bd8a-4f1e-b95c-a46a279358f7.png]\n\n\n点击提交，即可以创建一个合并请求(\nPR\n)\n，系统会自动判断出该\nPR\n的是否可以合并状态。\n\n\n代码行级比对\n\n代码行级比对(\nLine\nNotes\n)\n是\nCoding\n开发的可以针对代码的\ndiff\n进行行级别的评论功能，支持\nMarkdown\n语法，可以方便的用来进行\nCode\nReview。\n\n你可以在代码\ncommit\n页面，和合并请求(\nMR\n/PR\n)\n页面使用该功能。如下图：\n\n\n此处放上之前\nLine\nNotes\n上线推广时录制的\nGif。\n\n\n保护分支\n\n保护分支是\nCoding\n针对\nGit\n中有关代码权限开发的一个功能，阅读之前，我假设您已经知道分支的基本概念和用法。简而言之，保护分支就是将特定的分支保护起来，以防止被破坏。\n\n\n在项目代码分支页面，我们可以设置保护分支，如下图所示：\n\n图片 [https://dn-coding-net-production-pp.qbox.me/25bb5b4e-ebcd-40ac-bdc1-4ed15ab63b3a.png]\n\n\n分支名称左边有一个\nlock\n标志，表示改分支是保护分支。我们可以点击右侧的绿色盾牌标志来设置开关保护分支和设置保护分支成员。如下图：\n\n图片 [https://dn-coding-net-production-pp.qbox.me/f9f8b62d-ee87-4333-aec2-733c6699e53f.png]\n\n勾选某个项目成员，即代表改成员对该分支有\nwrite\n权限（可以push\n至该分支，可以接受该分支的\nMR）。\n\n\n其他成员，则没有权限\npush\n至该分支，当push\n至该分支的时候，会得到如下错误提示：\n\n图片 [https://dn-coding-net-production-pp.qbox.me/bf94efb5-a604-4bf5-9e8a-fd9837fbef64.png]\n\n所以，当你看到这个错误提示的时候，就知道是因为没有该保护分支权限而导致\npush\n失败了。\n\n\n\n\n\n<div\nclass=\"footer-nav\">\n\n<div\nclass=\"left-nav\"><i\nclass=\"fa\nfa-angle-left\"></i><a\nhref=\"/help/doc/git/push.html\">上一篇：提交代码</a></div>\n\n<div\nclass=\"right-nav\"><a\nhref=\"/help/doc/git/code-insight.html\">下一篇：代码阅读</a><i\nclass=\"fa\nfa-angle-right\"></i></div>\n\n</div>', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00');
INSERT INTO `help_documents` VALUES ('15', '0', 'Git代码托管使用手册', 'https://coding.net/help/doc/git/git.html', '---\nlayout: post\n\ntitle: Git代码托管使用手册\n---\n\n1.Git代码托管使用手册 \n-----\n\n本手册主要描述 Coding.net 旗下 Git代码托管产品的相关功能说明。\n\n相关参考资料： \n[git教程中文版v2][2]\n[廖雪峰的Git教程][1]\n\n\nCopyRight by Coding.net  更新时间 2015-09-01\n\n\n2.关于Git代码托管\n--------\n\n### 2.1 Git代码托管 ###\n\nGit代码托管是 Coding.net 基于 Java 自主研发的一款 Git 在线代码托管平台。\n开发者可以将源代码通过 Git 命令托管到 Coding.net, 并且享受 Coding.net 提供的各种延伸工具，如 合并请求( Merge Request/Pull Request)，Line Notes，保护分支，代码阅读，Webhook 等。\n\n\n### 2.2 Git代码托管的优势 ###\n\n传统的代码都是管理到本机或者内网。 一旦本机或者内网机器出问题，代码可能会丢失，使用远端代码仓库将永远存在一个备份。同时也免去了搭建本地代码版本控制服务的繁琐。\n云计算时代 Git 以其强大的分支和克隆功能，更加方便了开发者远程协作。\n\n\n### 2.3 Git代码托管主要功能 ###\n\n - 分支合并 ( MergeRequest/Pull Request )\n - 保护分支\n - 代码阅读 CodeInsight\n - Line Notes\n - WebHook\n\n3.功能介绍\n--------\n\n### 3.1 Git管理代码###\n\n#### 3.1.1 安装Git\n\n##### 3.1.1.1 Windows 下安装\n\n1. 先从 **[git 官网](http://git-scm.com/downloads)** 上下载 git 并安装到 C 盘。\n2. 将 git 目录下的 bin（如 C:\\Program Files (x86)\\Git\\bin ）添加到 PATH 环境变量。\n3. 增加路径，打开**环境变量**设置：\n\n>   ThisPC > properties > Adavanced system settings > Environment Variables \n\n ![\'\'](https://dn-coding-net-production-pp.qbox.me/f117c387-5655-47d0-9d57-6205a3adf54b.jpg) \n\n选择 PATH, 点击 Edit（如红框所示）。将 bin 的路径（ C:\\Program Files (x86)\\Git\\bin ）添加到变量值后面\n\n ![\'\'](https://dn-coding-net-production-pp.qbox.me/7f1b2ce6-2fa0-4995-850a-7a15bf31c584.jpg) \n\n大功告成，以后你就可以在 cmd 和 Git Bash 中使用 git 命令了， 习惯 bash 的推荐使用 Git Bash\n\n\n##### 3.1.1.2 Linux 下安装\n\n如果要在 Linux 上安装预编译好的 Git 二进制安装包，可以直接用系统提供的包管理工具。\n\n- 在 Fedora 上用 yum 安装：\n \n                     $ yum install git-core\n\n- 在 Ubuntu 这类 Debian 体系的系统上，可以用 apt-get 安装：\n\n                     $ apt-get install git\n\n##### 3.1.1.3 Mac 下安装\n\n在 Mac 上安装 Git 有两种方式。最容易的当属使用图形化的 Git 安装工具，界面如图所示，\n\n![Mac](https://dn-coding-net-production-pp.qbox.me/66fc93ff-4e42-4b19-a4a0-89caa21e6722.png)\n\n下载地址：http://sourceforge.net/projects/git-osx-installer/\n\n\n另一种是通过 [MacPorts](http://www.macports.org) 安装。如果已经装好了 [MacPorts](http://www.macports.org) ，用下面的命令安装 Git：\n\n         $ sudo port install git-core +svn +doc +bash_completion +gitweb\n\n这种方式就不需要再自己安装依赖库了，Macports 会帮你搞定这些麻烦事。一般上面列出的安装选项已经够用，要是你想用 Git 连接 Subversion 的代码仓库，还可以加上 +svn 选项。\n\n#### 3.1.1 前提条件\n\n -  已经是某个项目的成员\n -  对项目代码有写权限\n -  项目仓库大小低于项目配额[项目版本说明][3]\n -  安装 Git 客户端，推荐高于 1.9 的版本\n \n#### 3.1.2 创建代码仓库\n\n代码仓库可以理解为在 Coding.net 服务器上创建的一个专供放置代码等文件的一个文件目录。 每当创建一个项目的时候便会默认创建一个 Git 代码仓库与之相关联。\n\n##### 3.1.2.1 创建私有项目\n\n私有项目的代码仓库如图所示：\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/c261f410-09bd-4bb4-bb27-eef4bcf6965d.png) \n\n##### 3.1.2.2 创建公开项目\n\n公开项目的代码仓库如图所示：\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/bfbd0905-bf7f-4ce7-98c4-bcb13451a938.png) \n\n##### 3.1.2.3 导入代码仓库\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/4035d6c0-83a6-43eb-b274-1ac0d601a6f0.png) \n\n在新建项目页面，填写你要导入的项目的名称和描述后，选择导入仓库选项卡，根据你要导入的仓库类型选择版本控制类型，填写导入公开项目的 Clone 地址，\n如：https://github.com/twbs/bootstrap.git （svn 仓库导入格式如 http://code.taobao.org/svn/dev_codes/trunk） \n\nCoding 暂不支持导入外站的私有项目，另外受制于网络条件，Coding不能一定保证导入成功。结果会通过站内通知和邮件告知您。\n\n### 3.2 Git 仓库\n\n有两种取得 Git 项目仓库的方法。第一种是在现存的目录下，通过导入所有文件来创建新的 Git 仓库。第二种是从已有的 Git 仓库克隆出一个新的镜像仓库来。\n\n#### 3.2.1 初始化新仓库\n\n要对现有的某个文件夹开始用 Git 管理，只需到所在的目录，执行：\n         \n          $ git init\n\n命令行中会出现以下提示\n\n          Initialized empty Git repository in X:/XXX/.git/\n\n在当前文件夹中会出现一个 .git 文件夹。所有 Git 需要的数据和资源都存放在这个目录中。\n\n\n#### 3.2.2 添加远程仓库\n\n目前 Coding 支持以下三种协议对 git 仓库进行访问：\n\n1) HTTPS：读写仓库加密通道，有单次上传限制。\n2) SSH：读写仓库加密通道，无单次上传限制，需先在个人设置页面上传 SSH-RSA 公钥，完成配对验证。\n3) Git：只读，并且只对公开项目有效。\n\n注意：Git 用户名为 Coding 的账户邮箱或者个性后缀，密码为 Coding 的账户密码。\n\n**私有项目地址**\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/c0ad92a5-9bf5-4d35-b2f6-7bc4feabd5c7.png) \n\n\n**公开项目地址**\n\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/e7babea4-4dff-4152-a2c4-ba684a97401a.png) \n\n\n要添加一个新的远程仓库，可以使用 git remote 命令，给远程仓库一个别名，以HTTPS 地址为例运行： \n\ngit remote add [shortname] [url] 命令：\n      \n      $ git remote add codingios https://git.coding.net/Kyle_lyk/learn-git.git\n\n此处以 coding.net 上的一个开源项目 learn-git 为例，添加其为远程仓库，并取别名为\"learn-git\"，接下来用 git remote 命令来查看当前添加的远程仓库：\n\n      $ git remote -v \n\n得到以下结果：\n\n     learn-git  https://git.coding.net/Kyle_lyk/learn-git.git<fetch>\n     learn-git  https://git.coding.net/Kyle_lyk/learn-git.git<push>\n\n现在可以用字符串 learn-git 指代对应的仓库地址了。比如说，要抓取所有 learn-git 有的，但本地仓库没有的信息，可以运行 \n\n     $ git fetch learn-git\n\n现在，learn-git 的主干（master）已经完全可以在本地访问了，对应的名字是 learn-git/master，你可以将它合并到自己的某个分支，或者切换到这个分支，看看有些什么有趣的更新。\n\n#### 3.2.3 克隆远程仓库\n\n除了 3.2.2 所述的方法，也可以直接通过 git clone 命令来直接复制远程仓库到本地目录：\n\n    https://git.coding.net/Kyle_lyk/learn-git.git\n\n运行该命令之后，你会发现在当前目录下出现了一个名为 learn-git 的文件夹，其中包含一个 .git 文件夹，用于保存下载下来的所有版本记录，然后从中取出最新版本的文件拷贝。打开 learn-git 文件夹，你会看到项目中的所有文件已经在里边了，准备好后续的开发和使用。如果希望在克隆的时候，自己定义新建文件夹的名称，可以在上面的命令末尾指定新的名字：\n\n    $ git clone https://git.coding.net/Kyle_lyk/learn-git.git study-git\n\n上述命令将在当前位置新建一个名为 \"study-git\" 的文件夹，内容和之前的 learn-git 文件夹一样。\n\n### 3.3 提交更新到远程仓库\n\n接下来我们会介绍如何记录更新，并提交更新到远程仓库。\n\n#### 3.3.1 文件的状态\n\n工作目录下面的所有文件都不外乎这两种状态：已跟踪或未跟踪。\n\n**已跟踪的文件 ———— tracked**\n\n指本来就被纳入版本控制管理的文件，在上次快照中有它们的记录，工作一段时间后，它们的状态可能是未修改，已修改或者已放入暂存区。\n\n**未跟踪文件 ———— untracked**\n\n它们既没有上次更新时的快照，也不在当前的暂存区域。\n\n初次克隆某个仓库时，工作目录中的所有文件都属于已跟踪文件，且状态为未修改。\n在编辑过某些文件之后，Git 将这些文件标为已修改。我们逐步把这些修改过的文件放到暂存区域，直到最后一次性提交所有这些暂存起来的文件，如此重复。所以使用 Git 时的文件状态变化周期如图所示。\n\n![xx](https://dn-coding-net-production-pp.qbox.me/cfe7389a-6d56-4c01-95e2-87ec1fa4da7a.jpg)\n\n#### 3.3.2 新建跟踪文件\n\n回到我们在 3.2 中创建的本地目录 study-git(详见 3.2.3)。我们可以使用 ^git status^ 命令来查看当前工作目录下的文件状态。因为我们在将远程仓库克隆到本地后并未进行任何操作，所以我们会得到以下输出：\n\n    $ git status\n    On branch master\n    Your branch is up-to-date with \'origin/master\'\n    nothing to commit, working directory clean\n\n这说明你现在的工作目录相当干净。换句话说，所有已跟踪文件在上次提交后都未被更改过。此外，上面的信息还表明，当前目录下没有出现任何处于未跟踪的新文件，否则 Git 会在这里列出来。最后，该命令还显示了当前所在的分支是 master，这是默认的分支名称。\n接下来我们新建一个文本文件,运行 git status 会看到该文件出现在未跟踪文件列表中：\n\n    $ touch test.txt\n    $ echo something > test.txt\n    $ git status \n    On branch master\n    Your branch is up-to-date with \'origin/master\'\n\n    Untracked files:\n      (use \"git add <file>...\" to include in what will be committed)\n\n        test.txt\n\n    nothing added to commit but untracked files present (use \"git add\" to track)\n\n在状态报告中可以看到新建的 test.txt 文件出现在“Untracked files”下面。未跟踪的文件意味着 Git 在之前的快照（提交）中没有这些文件；Git 不会自动将之纳入跟踪范围，除非你明明白白地告诉它“我需要跟踪该文件”，因而不用担心把临时文件什么的也归入版本管理。\n\n**跟踪新文件**\n\n使用命令 git add 我们就可以跟踪一个文件。所以，要跟踪 test.txt 文件，只需运行：\n\n    $ git add test.txt \n\n接下来我们再次用 git status 查看文件状态：\n\n    $ git status \n    On branch master\n    Your branch is up-to-date with \'origin/master\'\n\n    Changes to be committed:\n      (use \"git reset HEAD <file>...\" to unstage)\n\n          new file:  test.txt\n\n只要在 “Changes to be committed” 这行下面的，就说明是已暂存状态。如果此时提交，那么该文件此时此刻的版本将被留存在历史记录中。在 git add 后面可以指明要跟踪的文件或目录路径。如果是目录的话，就说明要递归跟踪该目录下的所有文件。\n\n#### 3.3.3 暂存修改的已跟踪文件\n\n接下来我们把已跟踪的文件 `README.md` 做一些修改。打开 `README.md`，并在第二行加上了一句 \"I am learning to use git\"，现在 `README.md`  中有以下内容：\n\n     #learn-git\n     I am learning to use git\n\n这时我们再次使用 `git status` 命令查看文件状态：\n\n    $ git status \n    On branch master\n    Your branch is up-to-date with \'origin/master\'\n\n    Changes to be committed:\n      (use \"git reset HEAD <file>...\" to unstage)\n\n            new file:  test.txt\n\n    Changes not staged for commit:\n       (use \"git add <file>...\" to update what will be committed)\n       (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n             modified:   README.md\n\n文件 README.md 出现在 \"Changes not staged for commit\" 这行下面，说明已跟踪文件的内容发生了变化，但还没有放到暂存区。要暂存这次更新，需要运行 git add 命令。\n实际上 `git add` 命令是多功能命令，对不同状态的文件，它起到的作用也会不同：\n\n1. 操作对象是未跟踪文件时，将其加入到跟踪文件中\n2. 操作对象是已跟踪文件时，将其放入暂存区\n3. 合并时把有冲突的文件标记为已解决状态（将在下一章详细描述）\n\n现在让我们运行 git add 将 README.md 放到暂存区，然后再看看 git status 的输出：\n\n     $ git add README.md\n     $ git status\n     On branch master\n     Your branch is up-to-date with \'origin/master\'\n\n    Changes to be committed:\n      (use \"git reset HEAD <file>...\" to unstage)\n\n            modified:   README.md\n            new file:   test.txt\n\n#### 3.3.4 查看更改的内容\n\n在工作中，我们经常会需要查看修改后的文件相比之前的文件有哪些不同，那么这时候 `git status` 命令就不够了，我们需要使用 `git diff` 命令来查看更改的内容。我们再对 `README.md` 做一些修改，先不要使用 `git add` 命令将其暂存，此时运行 `git diff` 命令：\n\n     $ git diff\n     diff --git a/README.md b/README.md\n     index a21c979..cf2f0cc 100644\n     --- a/README.md\n     +++ b/README.md\n     @@ -1,2 +1,3 @@ \n      #learn-git\n	  I am learning to use git\n     +new line\n     \\ No newline at end of file\n\n此命令比较的是工作目录中当前文件和暂存区域快照之间的差异，也就是修改之后还没有暂存起来的变化内容。\n\n若要看已经暂存起来的文件和上次提交时的快照之间的差异，可以用 `git diff --cached` 命令。（Git 1.6.1 及更高版本还允许使用 git diff --staged，效果是相同的，但更好记些。）\n\n#### 3.3.5 提交更新到本地仓库\n\n现在的暂存区域已经准备妥当可以提交了。在此之前，请一定要确认还有什么修改过的或新建的文件还没有 `git add` 过，否则提交的时候不会记录这些还没暂存起来的变化。所以，每次准备提交前，最好先用 git status 看下，是不是都已暂存起来了，然后再运行提交命令 `git commit` 来完成提交。\n\n你可以直接输入 `git commit` 命令进行提交，这种方式会启动文本编辑器以便输入本次提交的说明:\n\n     # Please enter the commit message for your changes. Lines starting\n     # with \'#\' will be ignored, and an empty message aborts the commit.\n     # On branch master\n     # Your branch is up-to-date with \'origin/master\'\n     #\n     # Changes to be committed:\n     #       modified:   README.md\n     #       new file:   test.txt\n     #\n\n默认会启用 shell 的环境变量 $EDITOR 所指定的编辑器，一般都是 vim 或 emacs，也可以通过 git config 命令来修改默认的编辑器。\n以 \'#\' 开头的行都被视为注释，在提交时将被丢弃。如果没有输入提交信息就推出编辑器，将放弃这次提交。\n\n同时，你也可以直接使用 \n\n     `git commit -m [提交说明]` \n\n的方式来进行提交:\n\n     $ git commit -m \"My first commit\"\n     [master ca62ea0] My first commit\n      2 files changed, 3 insertions(+)\n      create mode 100644 test.txt\n\n好，现在已经创建了第一个提交！可以看到，提交后它会告诉你，当前是在哪个分支（master）提交的，本次提交的完整 SHA-1 校验和是什么（ca62ea0），以及在本次提交中，有多少文件修订过，多少行添改和删改过。\n\n记住，提交时记录的是放在暂存区域的快照，任何还未暂存的仍然保持已修改状态，可以在下次提交时纳入版本管理。每一次运行提交操作，都是对你项目作一次快照，以后可以回到这个状态，或者进行比较。\n          \n#### 3.3.6 推送到远程仓库\n\n当你想要同别人分享目前的成果时，可以将本地仓库中的数据推送到远程仓库。实现这个任务的命令很简单： \n\n     git push [远程仓库名] [分支名]\n\n如果要把本地的 master 分支推送到 origin 服务器上，可以运行下面的命令：\n\n     $ git push origin master\n     Username for \'https://git.coding.net\': [输入 ID/注册邮箱]\n     Password for \'https://[ID/注册邮箱]@git.coding.net\':\n     Counting objects: 6,done\n     Delta compression using up to 2 threads.\n     Compressing objects: 100% (2/2),done.\n     Writing objects: 100% (4/4),336 bytes | 0 bytes/s, done.\n     Total 4 (delta 0), reused 0 (delta 0)\n     To https://git.coding.net/Kyle_lyk/learn-git.git\n        764ecea..ca62ea0 master -> master\n\n\n现在已经第一次完成推送数据到远程仓库！但是要注意，只有在所克隆的服务器上有写权限，且同一时刻没有其他人在推数据，这条命令才会如期完成任务。如果在你推数据前，已经有其他人推送了若干更新，那你的推送操作就会被驳回。你必须先把他们的更新抓取到本地，合并到自己的项目中，然后才可以再次推送，相关详情请看下一章分支的描述。\n\n## 4  分支管理\n\n本章我们会介绍使 Git 与其它版本控制系统区别开来的最关键特点 ———— Git 的分支。它被称为 Git 的“必杀技”。\n\n### 4.1 什么是分支\n\n分支一方面类似科幻电影里面经常出现的平行宇宙，每个分支的代码版本都是独立演进的，分支之间的代码版本完全不会干扰另外一个代码版本的开发。但是，与平行宇宙不同的一点是，分支之间还能合并。\n\nGit 的分支相比 SVN 要轻量很多，这是因为 Git 分支并不是复制一个新仓库，而是为一个分支存储一个指针，这个指针将指向某个提交对象。没错，这就和数据结构中常见的指针链表一样。所以 Git 的分支只是指针，并没有将仓库进行复制，每次提交都会让当前的分支向后移动，指向最后一次提交的对象。当你在切换分支时，Git 也只是改变指向当前所在分支的特殊指针 HEAD，所以可以快速地在各个分支之间进行切换。\n\n### 4.2 分支的功能\n\n分支在实际中可以方便的隔离开发。\n假设你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。\n\n\n### 4.3 创建一个分支\n\n**在 Coding.net 上创建分支**\n\n在 Coding.net 界面上可以进入到项目中，依次点击 [代码] -> [分支] -> [新建分支]：\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/fbb3e1d4-bdbd-4fce-b60c-19b68ce5c9e1.png) \n\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/86b673e4-3576-47cc-9fcc-d1aafb46b3fe.png) \n\n**在命令行创建本地分支**\n\n也可以在命令行用 `git branch`  新建一个分支，回到上一章中提到的 learn-git 项目，我们在本地运行以下命令：\n\n     $ git branch learn-branch\n\n这条命令将会在本地仓库创建一个名为 \"learn-branch\" 的分支，这条分支指向最近一次提交的数据。要注意的是，运行该命令后，当前工作分支仍然是在 \"master\" 分支上，需要使用 `git checkout` 命令来进行分支之间的切换。\n\n### 4.4 切换分支\n\n**本地分支切换**\n\n之前我们已经在本地创建好了分支，接下来切换到 \"learn-branch\" 分支：\n\n    $ git checkout learn-branch\n    Switched to branch \'learn-branch\'\n\n`git checkout` 下面这句话告诉我们，我们已经成功地将工作分支切换到了 \"learn-branch\" 分支。\n\n**远端分支切换**\n\nCoding.net 提供在线的分支切换，在项目代码页，master 标签下拉菜单处可以选择其他分支。\n\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/a3a8bb62-4157-4857-acfe-b02c4f29a334.png) \n\n\n也可以在分支页进行选择：\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/0402da8a-22f4-40d4-87b2-ead3db740f97.png) \n\n\n### 4.5 合并分支\n\n接下来我们将描述本地两种常见情形下的合并分支操作。本地的分支合并都是在命令行解决的。\n\n\n#### 4.5.1 快进式合并\n\n快进式合并分支，也叫Fast Foreword。 我们在 \"learn-branch\" 分支上进行一些操作，创建一个新的 txt 文件 \"learn-branch.txt\"，接着在其中输入一行 \"I am studying git branch\":\n\n     $touch learn-branch.txt\n     $echo I am studying git branch > learn-branch.txt\n\n接下来我们将 \"learn-branch.txt\" 加入到跟踪文件，并提交到本地仓库：\n\n     $git add learn-branch.txt\n     $git commit -m \"add learn-branch.txt\"\n     [learn-branch fce6c4e] add learn-branch.txt\n      1 files changed, 1 insertions(+)\n      create mode 100644 learn-branch.txt   \n\n接下来我们回到 \"master\" 分支，并将 \"learn-branch\" 分支合并进来：\n\n     $ git checkout master\n     Switched to branch \'master\'\n     Your branch is up-to-date with \'origin/master\'.\n\n     $ git merge learn-branch\n     Updating ca62ea0..fce6c4e\n     Fast-forward\n      learn-branch.txt | 1 +\n      1 file changed, 1 insertion(+)  \n      create mode 100644 learn-branch.txt\n\n`git merge [分支名]` 命令将指定分支合并到当前工作分支中。请注意，合并时出现了 \"Fast forward\" 的提示。由于当前 \"master\" 分支所在的提交对象是要并入的 learn-branch 分支的直接上游，Git 只需把 master 分支指针直接右移。换句话说，如果顺着一个分支走下去可以到达另一个分支的话，那么 Git 在合并两者时，只会简单地把指针右移，因为这种单线的历史分支不存在任何需要解决的分歧，所以这种合并过程可以称为快进（Fast forward）。\n\n合并之后，\"master\" 分支和 \"learn-branch\" 分支实际上是指向同一个位置。此时你可以通过 \n\n     $git branch -d [分支名]\n\n来删除某个分支。\n\n#### 4.5.2 普通分支合并\n\n分支合并之前，最好使用 git pull 将 \"master\" 分支的代码更新到最新：\n    \n如果我们在合并之前对 \"master\" 分支和 \"learn-branch\" 分支都做了一些修改，那合并时就不会像快进合并那么简单了。\n     \n我们首先在 \"master\" 分支中做一些修改，比如将 \"lear-branch.txt\" 的内容进行修改：\n\n     $echo I am on master branch > lear-branch.txt\n     $git commit -m \"alpha\"\n     [master a72cad8] alpha\n      1 files changed, 1 insertions(+), 1 deletion(-)\n \n\n接下来，我们进入到 \"learn-branch\" 分支，也对 \"learn-branch.txt\" 进行一些修改：\n\n     $git checkout learn-branch\n     Swtiched to branch \'learn-branch\'\n     $echo I am on learn-branch branch > lear-branch.txt\n     $git commit -m \"beta\"\n     [learn-branch 27a4a6e] beta\n      1 files changed, 1 insertions(+), 1 deletion(-)\n     \n我们回到 \"master\" 分支再尝试合并分支：\n\n     $git checkout master\n     Swtiched to branch \'master\' \n     $git merge learn-branch\n     Auto-merging learn-branch.txt\n     CONFLICT (content): Merge conflict in learn-branch.txt\n     Automatic merge failed; fix conflicts and then commit the result.\n\n通常来说，当工作分支所指向的提交对象并不是需合并分支的直接祖先，Git 不得不进行一些额外处理。Git 会根据分支的内容自动创建了一个包含了合并结果的提交对象，这个新的提交对象会包涵两次提交的内容。但是我们在两个分支中操作了同一个文件的同一个部分，这就需要我们手动来解决冲突了。\n\n现在运行 `git status` 命令，我们会看到在哪里出现了冲突：\n\n     $ git status\n     On branch master\n     You have unmerged paths.\n       (fix conflicts and run \"git commit\")\n\n     Unmerged paths:\n       (use \"git add <file>...\" to mark resolution)\n\n             both modified:      learn-branch.txt\n\n     no changes added to commit (use \"git add\" and/or \"git commit -a\")\n\n现在我们打开 learn-branch.txt，会发现 Git 加入了冲突解决标记：\n\n     <<<<<<< HEAD\n     I am on master branch \n     =======\n     I am on learn-branch branch \n     >>>>>>> learn-branch\n     \n可以看到 ======= 隔开的上半部分，是 HEAD（即 master 分支，在运行 merge 命令时的工作分支）中的内容，下半部分是在 learn-branch 分支中的内容。解决冲突的办法无非是二者选其一或者人工亲自整合到一起。把上述内容修改为这样：\n\n     I am on master branch \n\n接下来运行 `git add` 来告诉 Git 冲突已经解决，并运行 `git commit` 来完成合并：\n\n     $git add learn-branch.txt\n     $git commit -m \"conflict resolved\"\n     [master cadd265] conflict resloved\n\n这样的合并冲突在快进合并中不可能发生。\n\n\n#### 4.5.3 分支推送到仓库\n\n当你想和其他人分享某个本地分支时，你需要把它推送到一个你拥有写权限的远程仓库。你创建的本地分支不会因为你的写入操作而被自动同步到你引入的远程服务器上，你需要明确地执行推送分支的操作。换句话说，对于无意分享的分支，你尽管保留为私人分支好了，而只推送那些协同工作要用到的特性分支。\n\n我们可以使用 `git push [仓库名] [分支名]` 将之前在本地创建的 \"learn-branch\" 分支推送到 部署在 Coding.net 的 \"learn-git\" 项目中：\n\n\n     $ git push origin serverfix\n     Counting objects: 7, done.\n     Delta compression using up to 2 threads.\n     Compressing objects: 100% (2/2), done.\n     Writing objects: 100% (3/3), 333 bytes | 0 bytes/s, done.\n     Total 3 (delta 0), reused 0 (delta 0)\n     To https:git.coding.net/Kyle_lyk/learn-git.git\n      * [new branch]      learn-branch -> learn-branch\n\n现在查看 \"learn-git\" 仓库，你就会发现除了 \"master\" 分支外，还增加了一个 \"learn-branch\" 分支。\n\n#### 4.5.4 合并请求\n\nCoding 推荐使用合并请求，在线将2个分支合并。合并请求分为\n    \n    -  MergeRequest  针对私有项目 \n    -  PullRequest  针对公开项目\n\n**私有项目**\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/85a46436-5ca7-4f9e-8ee0-ba1e23513828.png) \n\n当你将分支推送到远端仓库后，通过新建&提交“合并请求”\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/56f812ec-c423-44b7-832c-dd08805fa6ee.png) \n\n在创建新的合并请求时，可以填写代码评审，并引用项目内任务进行关联。 合并请求(MR) 发起人可以在该MR被合并前，随时对代码评审和引用任务进行编辑。点击提交，即可以创建一个合并请求( MR ) ，系统会自动判断出该 MR 的是否可以合并状态。\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/980fded0-b1aa-47a7-b4ed-30085c98b9ba.png) \n\n在 MR 页面里面，MR 的提交者可以取消 MR ，MR 目标分支的管理者（对该分支有写权限的项目成员），可以选择合并或者拒绝。MR 支持 Markdown 语法评论。\n\n\n**公开项目** \n\n ![图片](https://dn-coding-net-production-pp.qbox.me/4703cf86-9268-4de5-a2de-c6072b446e3a.png) \n\n通过 Fork - Pull Request 的方式，提交合并请求。\n\n首先，你需要将共有项目 fork 到你自己的仓库，如图。\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/37acd26e-868f-4935-b479-d21fd1f1b1da.png) \n\nfork 后会在你的项目空间生成一个对应的项目，然后修改 fork 后项目的代码。\n\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/2cf2205c-f22b-41a3-9938-d075fe1e3b2c.png) \n\n\n当准备同源项目合并时，创建合并请求( Pull Request )\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/de9a67f9-bd8a-4f1e-b95c-a46a279358f7.png) \n\n点击提交，即可以创建一个合并请求( PR ) ，系统会自动判断出该 PR 的是否可以合并状态。 \n\n#### 4.5.5 代码行级比对\n\n代码行级比对( Line Notes ) 是 Coding 开发的可以针对代码的 diff 进行行级别的评论功能，支持 Markdown 语法，可以方便的用来进行 Code Review。\n你可以在代码 commit 页面，和合并请求( MR /PR ) 页面使用该功能。如下图：\n\n\n> 此处放上之前 Line Notes 上线推广时录制的 Gif。\n\n\n### 4.6  保护分支\n\n保护分支是 Coding 针对 Git 中有关代码权限开发的一个功能，阅读之前，我假设您已经知道分支的基本概念和用法。简而言之，保护分支就是将特定的分支保护起来，以防止被破坏。\n\n在项目代码分支页面，我们可以设置保护分支，如下图所示：\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/25bb5b4e-ebcd-40ac-bdc1-4ed15ab63b3a.png) \n\n分支名称左边有一个 lock 标志，表示改分支是保护分支。我们可以点击右侧的绿色盾牌标志来设置开关保护分支和设置保护分支成员。如下图：\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/f9f8b62d-ee87-4333-aec2-733c6699e53f.png) \n勾选某个项目成员，即代表改成员对该分支有 write 权限（可以push 至该分支，可以接受该分支的 MR）。\n\n其他成员，则没有权限 push 至该分支，当push 至该分支的时候，会得到如下错误提示：\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/bf94efb5-a604-4bf5-9e8a-fd9837fbef64.png) \n所以，当你看到这个错误提示的时候，就知道是因为没有该保护分支权限而导致 push 失败了。\n\n## 5. 代码阅读\n\n代码阅读( CodeInsight )是 Coding 开发的用来在线阅读代码的一种功能，在 Coding 你不止可以在代码托管页面阅读代码，我们将提供 代码阅读（CodeInsight）功能，该功能提供了一系列语法分析，交叉引用分析等，最终可以实现在线精准的代码高亮显示，交叉引用查询，声明，定义，调用查询等等高级功能。\n\n如果是付费项目，可以在代码页面的右上角，点击代码阅读，进行阅读，如下图：\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/9b35714c-bfd2-422e-8896-32be3d5d4d11.png) \n\n\n6. SSH公钥\n-----\n\n\n有关什么是 SSH，可参考中文维基百科（http://zh.wikipedia.org/zh/Secure_Shell）。\n这里要说明的是，Coding.net 支持使用 SSH 协议来访问 Git仓库，提供账户 SSH 公钥和项目部署 SSH 公钥设置。\n用户可以在认证身份时选择在账户里面设置 SSH公钥，并获所有仓库的读写权限（注意！您的公钥对应的私钥必须要妥善保存，如果您的私钥被第三方获取，那么他将可以以您的身份来操作 Git 仓库，这跟密码被盗一样严重）]， 也可以在项目设置里面设置项目部署公钥，获取仓库的只读权限。\n\n添加公钥后，您就可以在项目的代码页面点击 SSH 切换到 SSH 协议的 clone 地址，类似这样：（git@coding.net:wzw/leave-a-message.git），这样就可以使用 SSH 协议来访问 Git 仓库了，每次链接都不需要再输入账号和密码了。\n\n> 注意：一个公钥只能认证一个用户，而一个用户却可以拥有多个公钥。\n\n\n### 6.1 账户SSH公钥\n\n账户 SSH 公钥是跟用户账户关联的公钥，一旦设置，就拥有账户下所有项目仓库的读写权限。\n\n#### 6.1.1 生成公钥 \n\nMac/Linux 打开命令行终端, Windows 打开 Git Bash 。\n输入ssh-keygen -t rsa -C \"username@example.com\",( 注册的邮箱)，接下来点击enter键即可（也可以输入密码）。\n\n    ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\n    # Creates a new ssh key, using the provided email as a label\n    # Generating public/private rsa key pair.\n    Enter file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter]  // 推荐使用默认地址\n\n成功之后\n\n    Your identification has been saved in /Users/you/.ssh/id_rsa.\n    # Your public key has been saved in /Users/you/.ssh/id_rsa.pub.\n    # The key fingerprint is:\n    # 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com\n\n#### 6.1.2 添加公钥\n\n1. 本地打开 id_rsa.pub 文件，复制其中全部内容，填写到SSH_RSA公钥key下的一栏，公钥名称可以随意起名字。\n2. 完成后点击“添加”，然后输入密码或动态码即可添加完成。\n ![图片](https://dn-coding-net-production-pp.qbox.me/49eab64b-8d8a-4787-a0ed-ce347f753a69.png) \n3. 完成后在命令行测试，首次建立链接会要求信任主机。\n\n          $ ssh -T git@git.coding.net\n          The authenticity of host \'git.coding.net (61.146.73.68)\' can not be established.\n          RSA key fingerprint is 98:ab:2b:30:60:00:82:86:bb:85:db:87:22:c4:4f:b1.\n          Are you sure you want to continue connecting (yes/no)? yes\n          Warning: Permanently added \'git.coding.net,61.146.73.68\' (RSA) to the list of kn\n          own hosts.\n\n          Enter passphrase for key \'/c/Users/Yuankai/.ssh/id_rsa\':\n          Coding.net Tips : [ Hello Kyle_lyk! You have connected to Coding.net by SSH successfully! ]\n\n\n### 6.2 部署SSH公钥\n\n项目部署 SSH 公钥是跟项目关联的公钥，设置后有该项目的仓库的只读权限。\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/862d0517-5b77-49c7-bfb2-398674e476dd.png) \n \n添加方式同 SSH 公钥一致。\n\n### 6.3 关于HostKey\n\nCoding.net 为了更好的通用性，以后计划默认使用 RSA Host Key 来提供 SSH 通信的加密服务，此 RSA key 的公钥内容如下：\n\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDHOWdwLpkos2CLli6DFvQ36yQE6Pe/PtFp3XwyirfZCIoGWnedaWI8zkJWVCs0wgOB9/urFepTDfV2wN49KGy1sl2/CCDEH2K/zeoEAZlTcBrhU17bwg1yMHCyJ7IM+zdLzItDEKYjgoWqVdUGK1dXQQlwt7GP4W7HqffelQQoVxOMoZ5N50MzD+nvV4y8iq0KwDQNy62iU4hui9ajCSVUDLu/06ucd5IojSI9keRIYAXvQf52TJ5EbvoBggp9RhjuWNEG8IhnPP6rzPS11Ocmwg/HsP8xOKL28AeDBAh6B6MEBDtlyp5Yfu9cwZJ9CFtU/x5fHFPtANmgIphAfwN1\n\nfingerprint 是：\n`98:ab:2b:30:60:00:82:86:bb:85:db:87:22:c4:4f:b1`\n\n如果您之前有信任过 Coding.net 的 ECDSA 格式的 Host key，那么之后的 Push 和 Pull 可能会遇到如下错误：\n`\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nIT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!\nSomeone could be eavesdropping on you right now (man-in-the-middle attack)!\nIt is also possible that a host key has just been changed.\nThe fingerprint for the RSA key sent by the remote host is\n98:ab:2b:30:60:00:82:86:bb:85:db:87:22:c4:4f:b1.\nPlease contact your system administrator.\n`\n如果您确认，输出的公钥指纹是上文描述的内容。那么可以信任这是 Coding.net 的服务器，不是第三方劫持。 您需要做如下操作\n1.删除 ~/.ssh/known_hosts 中 coding.net 相关的行\n\n2.重试 push 或者 pull 或者 ssh -T git@git.coding.net\n\n3.遇到询问是否信任服务器公钥，输入 yes 即可\n\n7. WebHook \n----\n\nWebhook 允许第三方应用监听 Coding.net 上的特定事件，在这些事件发生时通过 HTTP POST 方式通知( 超时5秒) 到第三方应用指定的 Web URL。 例如项目有新的内容 Push，或是Merge Request 有更新等。 WebHook 可方便用户实现自动部署，自动测试，自动打包，监控项目变化等。 \n\n### 7.1 设置触发事件\n\nCoding.net 用户可以在自己的项目 －> 设置 －> Webhook 中创建、设置 Webhook 所需监听的事件，并配置第三方应用的 Web URL 。\n\n目前我们支持如下的事件：\n\n| Event |	说明 |\n| :--- | :--- |\n| Push |	任何时间项目内的 Push 操作 |\n| MR/PR | 任何时间项目内的 Merge Request 和 Pull Request 操作|\n| Topic |	任何时间项目内的讨论创建，评论 |\n| Task |	任何时间项目内的任务操作 |\n| Document |  任何时间项目内的文档操作 |\n| Watch |	任何时间第三方用户关注你的项目(限公开项目) |\n| Star | 任何时间对项目的收藏(限公开项目) |\n\n> 注：为防止您填写的 URL 被第三方恶意调用，我们 WebHook 提供了一个预先填写的 Token ，这个 Token 将会随 Post 请求信息一起发送给您，您可验证此 Token 来确认此请求确实是 Coding.net 发出的。\n\n### 7.2 Webhook请求说明\n\nWebhook 的每个 POST 请求都有包含特殊的 Header, 默认超时时间为 2s \n\n**POST 请求 Header 说明**\n\n| Header |	说明 |\n| :--- | --- |\n| X-Coding-Event	 | 事件名（例如: push, Merge Request, Task） |\n\n首次绑定，系统会向您所填写的 url 地址，发送一个简单的请求，以验证该 WebHook 是有效的，请求如下：\n\n    {\n        \"token\": \"123\", \n        \"zen\": \"Coding！ 让开发更简单\"\n    }\n\n关于WebHook 更多例子，请参看 [Coding.net 开放平台] http://open.coding.io\n\n\n\n\n  [1]: http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\n  [2]: https://git-scm.com/book/zh/v2\n  [3]: coding.net/upgrade', '1.GIT代码托管使用手册\n\n本手册主要描述\nCoding.net\n旗下\nGit代码托管产品的相关功能说明。\n\n\n相关参考资料：\n\ngit教程中文版v2\n[https://git-scm.com/book/zh/v2]\n\n廖雪峰的Git教程\n[http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000]\n\n\nCopyRight\nby\nCoding.net\n更新时间\n2015-09-01\n\n\n2.关于GIT代码托管\n\n2.1\nGIT代码托管\n\nGit代码托管是\nCoding.net\n基于\nJava\n自主研发的一款\nGit\n在线代码托管平台。\n\n开发者可以将源代码通过\nGit\n命令托管到\nCoding.net,\n并且享受\nCoding.net\n提供的各种延伸工具，如\n合并请求(\nMerge\nRequest/Pull\nRequest)，Line\nNotes，保护分支，代码阅读，Webhook\n等。\n\n\n2.2\nGIT代码托管的优势\n\n传统的代码都是管理到本机或者内网。\n一旦本机或者内网机器出问题，代码可能会丢失，使用远端代码仓库将永远存在一个备份。同时也免去了搭建本地代码版本控制服务的繁琐。\n\n云计算时代\nGit\n以其强大的分支和克隆功能，更加方便了开发者远程协作。\n\n\n2.3\nGIT代码托管主要功能\n * \n   分支合并\n   (\n   MergeRequest/Pull\n   Request\n   )\n * \n   保护分支\n * \n   代码阅读\n   CodeInsight\n * \n   Line\n   Notes\n * \n   WebHook\n\n\n3.功能介绍\n\n3.1\nGIT管理代码\n\n3.1.1\n安装GIT\n\n3.1.1.1\nWindows\n下安装 1. \n    先从 \n    git\n    官网\n    [http://git-scm.com/downloads] \n    上下载\n    git\n    并安装到\n    C\n    盘。\n 2. \n    将\n    git\n    目录下的\n    bin（如\n    C:\\Program\n    Files\n    (x86)\\Git\\bin\n    ）添加到\n    PATH\n    环境变量。\n 3. \n    增加路径，打开 \n    环境变量 \n    设置：\n\n\nThisPC\n>\nproperties\n>\nAdavanced\nsystem\nsettings\n>\nEnvironment\nVariables\n\n&#39;&#39; [https://dn-coding-net-production-pp.qbox.me/f117c387-5655-47d0-9d57-6205a3adf54b.jpg]\n\n\n选择\nPATH,\n点击\nEdit（如红框所示）。将\nbin\n的路径（\nC:\\Program\nFiles\n(x86)\\Git\\bin\n）添加到变量值后面\n\n&#39;&#39; [https://dn-coding-net-production-pp.qbox.me/7f1b2ce6-2fa0-4995-850a-7a15bf31c584.jpg]\n\n\n大功告成，以后你就可以在\ncmd\n和\nGit\nBash\n中使用\ngit\n命令了，\n习惯\nbash\n的推荐使用\nGit\nBash\n\n\n3.1.1.2\nLinux\n下安装\n如果要在\nLinux\n上安装预编译好的\nGit\n二进制安装包，可以直接用系统提供的包管理工具。\n\n * \n   在\n   Fedora\n   上用\n   yum\n   安装：\n   \n                  $ yum install git-core\n   \n   \n   \n * \n   在\n   Ubuntu\n   这类\n   Debian\n   体系的系统上，可以用\n   apt-get\n   安装：\n   \n                  $ apt-get install git\n   \n   \n   \n\n\n3.1.1.3\nMac\n下安装\n在\nMac\n上安装\nGit\n有两种方式。最容易的当属使用图形化的\nGit\n安装工具，界面如图所示，\n\nMac [https://dn-coding-net-production-pp.qbox.me/66fc93ff-4e42-4b19-a4a0-89caa21e6722.png]\n\n\n下载地址： \nhttp://sourceforge.net/projects/git-osx-installer/\n[http://sourceforge.net/projects/git-osx-installer/]\n\n\n另一种是通过 \nMacPorts\n[http://www.macports.org] \n安装。如果已经装好了 \nMacPorts\n[http://www.macports.org] \n，用下面的命令安装\nGit：\n\n     $ sudo port install git-core +svn +doc +bash_completion +gitweb\n\n\n\n这种方式就不需要再自己安装依赖库了，Macports\n会帮你搞定这些麻烦事。一般上面列出的安装选项已经够用，要是你想用\nGit\n连接\nSubversion\n的代码仓库，还可以加上\n+svn\n选项。\n\n\n3.1.1\n前提条件\n * \n   已经是某个项目的成员\n * \n   对项目代码有写权限\n * \n   项目仓库大小低于项目配额 \n   项目版本说明\n   [coding.net/upgrade]\n * \n   安装\n   Git\n   客户端，推荐高于\n   1.9\n   的版本\n\n\n3.1.2\n创建代码仓库\n\n代码仓库可以理解为在\nCoding.net\n服务器上创建的一个专供放置代码等文件的一个文件目录。\n每当创建一个项目的时候便会默认创建一个\nGit\n代码仓库与之相关联。\n\n\n3.1.2.1\n创建私有项目\n私有项目的代码仓库如图所示：\n\n图片 [https://dn-coding-net-production-pp.qbox.me/c261f410-09bd-4bb4-bb27-eef4bcf6965d.png]\n\n\n3.1.2.2\n创建公开项目\n公开项目的代码仓库如图所示：\n\n图片 [https://dn-coding-net-production-pp.qbox.me/bfbd0905-bf7f-4ce7-98c4-bcb13451a938.png]\n\n\n3.1.2.3\n导入代码仓库图片 [https://dn-coding-net-production-pp.qbox.me/4035d6c0-83a6-43eb-b274-1ac0d601a6f0.png]\n\n\n在新建项目页面，填写你要导入的项目的名称和描述后，选择导入仓库选项卡，根据你要导入的仓库类型选择版本控制类型，填写导入公开项目的\nClone\n地址，\n\n如： \nhttps://github.com/twbs/bootstrap.git\n[https://github.com/twbs/bootstrap.git] \n（svn\n仓库导入格式如 \nhttp://code.taobao.org/svn/dev_codes/trunk）\n[http://code.taobao.org/svn/dev_codes/trunk）]\n\n\nCoding\n暂不支持导入外站的私有项目，另外受制于网络条件，Coding不能一定保证导入成功。结果会通过站内通知和邮件告知您。\n\n\n3.2\nGIT\n仓库\n\n有两种取得\nGit\n项目仓库的方法。第一种是在现存的目录下，通过导入所有文件来创建新的\nGit\n仓库。第二种是从已有的\nGit\n仓库克隆出一个新的镜像仓库来。\n\n\n3.2.1\n初始化新仓库\n\n要对现有的某个文件夹开始用\nGit\n管理，只需到所在的目录，执行：\n\n      $ git init\n\n\n\n命令行中会出现以下提示\n\n      Initialized empty Git repository in X:/XXX/.git/\n\n\n\n在当前文件夹中会出现一个\n.git\n文件夹。所有\nGit\n需要的数据和资源都存放在这个目录中。\n\n\n3.2.2\n添加远程仓库\n\n目前\nCoding\n支持以下三种协议对\ngit\n仓库进行访问：\n\n\n1)\nHTTPS：读写仓库加密通道，有单次上传限制。\n\n2)\nSSH：读写仓库加密通道，无单次上传限制，需先在个人设置页面上传\nSSH-RSA\n公钥，完成配对验证。\n\n3)\nGit：只读，并且只对公开项目有效。\n\n\n注意：Git\n用户名为\nCoding\n的账户邮箱或者个性后缀，密码为\nCoding\n的账户密码。\n\n\n私有项目地址\n\n图片 [https://dn-coding-net-production-pp.qbox.me/c0ad92a5-9bf5-4d35-b2f6-7bc4feabd5c7.png]\n\n\n公开项目地址\n\n图片 [https://dn-coding-net-production-pp.qbox.me/e7babea4-4dff-4152-a2c4-ba684a97401a.png]\n\n\n要添加一个新的远程仓库，可以使用\ngit\nremote\n命令，给远程仓库一个别名，以HTTPS\n地址为例运行：\n\n\ngit\nremote\nadd\n[shortname]\n[url]\n命令：\n\n  $ git remote add codingios https://git.coding.net/Kyle_lyk/learn-git.git\n\n\n\n此处以\ncoding.net\n上的一个开源项目\nlearn-git\n为例，添加其为远程仓库，并取别名为\"learn-git\"，接下来用\ngit\nremote\n命令来查看当前添加的远程仓库：\n\n  $ git remote -v \n\n\n\n得到以下结果：\n\n learn-git  https://git.coding.net/Kyle_lyk/learn-git.git<fetch>\n learn-git  https://git.coding.net/Kyle_lyk/learn-git.git<push>\n\n\n\n现在可以用字符串\nlearn-git\n指代对应的仓库地址了。比如说，要抓取所有\nlearn-git\n有的，但本地仓库没有的信息，可以运行\n\n $ git fetch learn-git\n\n\n\n现在，learn-git\n的主干（master）已经完全可以在本地访问了，对应的名字是\nlearn-git/master，你可以将它合并到自己的某个分支，或者切换到这个分支，看看有些什么有趣的更新。\n\n\n3.2.3\n克隆远程仓库\n\n除了\n3.2.2\n所述的方法，也可以直接通过\ngit\nclone\n命令来直接复制远程仓库到本地目录：\n\nhttps://git.coding.net/Kyle_lyk/learn-git.git\n\n\n\n运行该命令之后，你会发现在当前目录下出现了一个名为\nlearn-git\n的文件夹，其中包含一个\n.git\n文件夹，用于保存下载下来的所有版本记录，然后从中取出最新版本的文件拷贝。打开\nlearn-git\n文件夹，你会看到项目中的所有文件已经在里边了，准备好后续的开发和使用。如果希望在克隆的时候，自己定义新建文件夹的名称，可以在上面的命令末尾指定新的名字：\n\n$ git clone https://git.coding.net/Kyle_lyk/learn-git.git study-git\n\n\n\n上述命令将在当前位置新建一个名为\n\"study-git\"\n的文件夹，内容和之前的\nlearn-git\n文件夹一样。\n\n\n3.3\n提交更新到远程仓库\n\n接下来我们会介绍如何记录更新，并提交更新到远程仓库。\n\n\n3.3.1\n文件的状态\n\n工作目录下面的所有文件都不外乎这两种状态：已跟踪或未跟踪。\n\n\n已跟踪的文件\n————\ntracked\n\n\n指本来就被纳入版本控制管理的文件，在上次快照中有它们的记录，工作一段时间后，它们的状态可能是未修改，已修改或者已放入暂存区。\n\n\n未跟踪文件\n————\nuntracked\n\n\n它们既没有上次更新时的快照，也不在当前的暂存区域。\n\n\n初次克隆某个仓库时，工作目录中的所有文件都属于已跟踪文件，且状态为未修改。\n\n在编辑过某些文件之后，Git\n将这些文件标为已修改。我们逐步把这些修改过的文件放到暂存区域，直到最后一次性提交所有这些暂存起来的文件，如此重复。所以使用\nGit\n时的文件状态变化周期如图所示。\n\nxx [https://dn-coding-net-production-pp.qbox.me/cfe7389a-6d56-4c01-95e2-87ec1fa4da7a.jpg]\n\n\n3.3.2\n新建跟踪文件\n\n回到我们在\n3.2\n中创建的本地目录\nstudy-git(详见\n3.2.3)。我们可以使用\n^git\nstatus^\n命令来查看当前工作目录下的文件状态。因为我们在将远程仓库克隆到本地后并未进行任何操作，所以我们会得到以下输出：\n\n$ git status\nOn branch master\nYour branch is up-to-date with \'origin/master\'\nnothing to commit, working directory clean\n\n\n\n这说明你现在的工作目录相当干净。换句话说，所有已跟踪文件在上次提交后都未被更改过。此外，上面的信息还表明，当前目录下没有出现任何处于未跟踪的新文件，否则\nGit\n会在这里列出来。最后，该命令还显示了当前所在的分支是\nmaster，这是默认的分支名称。\n\n接下来我们新建一个文本文件,运行\ngit\nstatus\n会看到该文件出现在未跟踪文件列表中：\n\n$ touch test.txt\n$ echo something > test.txt\n$ git status \nOn branch master\nYour branch is up-to-date with \'origin/master\'\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n    test.txt\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n\n\n\n在状态报告中可以看到新建的\ntest.txt\n文件出现在“Untracked\nfiles”下面。未跟踪的文件意味着\nGit\n在之前的快照（提交）中没有这些文件；Git\n不会自动将之纳入跟踪范围，除非你明明白白地告诉它“我需要跟踪该文件”，因而不用担心把临时文件什么的也归入版本管理。\n\n\n跟踪新文件\n\n\n使用命令\ngit\nadd\n我们就可以跟踪一个文件。所以，要跟踪\ntest.txt\n文件，只需运行：\n\n$ git add test.txt \n\n\n\n接下来我们再次用\ngit\nstatus\n查看文件状态：\n\n$ git status \nOn branch master\nYour branch is up-to-date with \'origin/master\'\n\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n      new file:  test.txt\n\n\n\n只要在\n“Changes\nto\nbe\ncommitted”\n这行下面的，就说明是已暂存状态。如果此时提交，那么该文件此时此刻的版本将被留存在历史记录中。在\ngit\nadd\n后面可以指明要跟踪的文件或目录路径。如果是目录的话，就说明要递归跟踪该目录下的所有文件。\n\n\n3.3.3\n暂存修改的已跟踪文件\n\n接下来我们把已跟踪的文件 \nREADME.md \n做一些修改。打开 \nREADME.md \n，并在第二行加上了一句\n\"I\nam\nlearning\nto\nuse\ngit\"，现在 \nREADME.md \n中有以下内容：\n\n #learn-git\n I am learning to use git\n\n\n\n这时我们再次使用 \ngit\nstatus \n命令查看文件状态：\n\n$ git status \nOn branch master\nYour branch is up-to-date with \'origin/master\'\n\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n        new file:  test.txt\n\nChanges not staged for commit:\n   (use \"git add <file>...\" to update what will be committed)\n   (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n         modified:   README.md\n\n\n\n文件\nREADME.md\n出现在\n\"Changes\nnot\nstaged\nfor\ncommit\"\n这行下面，说明已跟踪文件的内容发生了变化，但还没有放到暂存区。要暂存这次更新，需要运行\ngit\nadd\n命令。\n\n实际上 \ngit\nadd \n命令是多功能命令，对不同状态的文件，它起到的作用也会不同：\n\n 1. \n    操作对象是未跟踪文件时，将其加入到跟踪文件中\n 2. \n    操作对象是已跟踪文件时，将其放入暂存区\n 3. \n    合并时把有冲突的文件标记为已解决状态（将在下一章详细描述）\n\n\n现在让我们运行\ngit\nadd\n将\nREADME.md\n放到暂存区，然后再看看\ngit\nstatus\n的输出：\n\n $ git add README.md\n $ git status\n On branch master\n Your branch is up-to-date with \'origin/master\'\n\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n        modified:   README.md\n        new file:   test.txt\n\n\n\n3.3.4\n查看更改的内容\n\n在工作中，我们经常会需要查看修改后的文件相比之前的文件有哪些不同，那么这时候 \ngit\nstatus \n命令就不够了，我们需要使用 \ngit\ndiff \n命令来查看更改的内容。我们再对 \nREADME.md \n做一些修改，先不要使用 \ngit\nadd \n命令将其暂存，此时运行 \ngit\ndiff \n命令：\n\n $ git diff\n diff --git a/README.md b/README.md\n index a21c979..cf2f0cc 100644\n --- a/README.md\n +++ b/README.md\n @@ -1,2 +1,3 @@ \n  #learn-git\n  I am learning to use git\n +new line\n \\ No newline at end of file\n\n\n\n此命令比较的是工作目录中当前文件和暂存区域快照之间的差异，也就是修改之后还没有暂存起来的变化内容。\n\n\n若要看已经暂存起来的文件和上次提交时的快照之间的差异，可以用 \ngit\ndiff\n--cached \n命令。（Git\n1.6.1\n及更高版本还允许使用\ngit\ndiff\n--staged，效果是相同的，但更好记些。）\n\n\n3.3.5\n提交更新到本地仓库\n\n现在的暂存区域已经准备妥当可以提交了。在此之前，请一定要确认还有什么修改过的或新建的文件还没有 \ngit\nadd \n过，否则提交的时候不会记录这些还没暂存起来的变化。所以，每次准备提交前，最好先用\ngit\nstatus\n看下，是不是都已暂存起来了，然后再运行提交命令 \ngit\ncommit \n来完成提交。\n\n\n你可以直接输入 \ngit\ncommit \n命令进行提交，这种方式会启动文本编辑器以便输入本次提交的说明:\n\n # Please enter the commit message for your changes. Lines starting\n # with \'#\' will be ignored, and an empty message aborts the commit.\n # On branch master\n # Your branch is up-to-date with \'origin/master\'\n #\n # Changes to be committed:\n #       modified:   README.md\n #       new file:   test.txt\n #\n\n\n\n默认会启用\nshell\n的环境变量\n$EDITOR\n所指定的编辑器，一般都是\nvim\n或\nemacs，也可以通过\ngit\nconfig\n命令来修改默认的编辑器。\n\n以\n\'#\'\n开头的行都被视为注释，在提交时将被丢弃。如果没有输入提交信息就推出编辑器，将放弃这次提交。\n\n\n同时，你也可以直接使用\n\n `git commit -m [提交说明]` \n\n\n\n的方式来进行提交:\n\n $ git commit -m \"My first commit\"\n [master ca62ea0] My first commit\n  2 files changed, 3 insertions(+)\n  create mode 100644 test.txt\n\n\n\n好，现在已经创建了第一个提交！可以看到，提交后它会告诉你，当前是在哪个分支（master）提交的，本次提交的完整\nSHA-1\n校验和是什么（ca62ea0），以及在本次提交中，有多少文件修订过，多少行添改和删改过。\n\n\n记住，提交时记录的是放在暂存区域的快照，任何还未暂存的仍然保持已修改状态，可以在下次提交时纳入版本管理。每一次运行提交操作，都是对你项目作一次快照，以后可以回到这个状态，或者进行比较。\n\n\n3.3.6\n推送到远程仓库\n\n当你想要同别人分享目前的成果时，可以将本地仓库中的数据推送到远程仓库。实现这个任务的命令很简单：\n\n git push [远程仓库名] [分支名]\n\n\n\n如果要把本地的\nmaster\n分支推送到\norigin\n服务器上，可以运行下面的命令：\n\n $ git push origin master\n Username for \'https://git.coding.net\': [输入 ID/注册邮箱]\n Password for \'https://[ID/注册邮箱]@git.coding.net\':\n Counting objects: 6,done\n Delta compression using up to 2 threads.\n Compressing objects: 100% (2/2),done.\n Writing objects: 100% (4/4),336 bytes | 0 bytes/s, done.\n Total 4 (delta 0), reused 0 (delta 0)\n To https://git.coding.net/Kyle_lyk/learn-git.git\n    764ecea..ca62ea0 master -> master\n\n\n\n现在已经第一次完成推送数据到远程仓库！但是要注意，只有在所克隆的服务器上有写权限，且同一时刻没有其他人在推数据，这条命令才会如期完成任务。如果在你推数据前，已经有其他人推送了若干更新，那你的推送操作就会被驳回。你必须先把他们的更新抓取到本地，合并到自己的项目中，然后才可以再次推送，相关详情请看下一章分支的描述。\n\n\n4\n分支管理\n\n本章我们会介绍使\nGit\n与其它版本控制系统区别开来的最关键特点\n————\nGit\n的分支。它被称为\nGit\n的“必杀技”。\n\n\n4.1\n什么是分支\n\n分支一方面类似科幻电影里面经常出现的平行宇宙，每个分支的代码版本都是独立演进的，分支之间的代码版本完全不会干扰另外一个代码版本的开发。但是，与平行宇宙不同的一点是，分支之间还能合并。\n\n\nGit\n的分支相比\nSVN\n要轻量很多，这是因为\nGit\n分支并不是复制一个新仓库，而是为一个分支存储一个指针，这个指针将指向某个提交对象。没错，这就和数据结构中常见的指针链表一样。所以\nGit\n的分支只是指针，并没有将仓库进行复制，每次提交都会让当前的分支向后移动，指向最后一次提交的对象。当你在切换分支时，Git\n也只是改变指向当前所在分支的特殊指针\nHEAD，所以可以快速地在各个分支之间进行切换。\n\n\n4.2\n分支的功能\n\n分支在实际中可以方便的隔离开发。\n\n假设你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。\n\n\n4.3\n创建一个分支\n\n在\nCoding.net\n上创建分支\n\n\n在\nCoding.net\n界面上可以进入到项目中，依次点击\n[代码]\n->\n[分支]\n->\n[新建分支]：\n\n图片 [https://dn-coding-net-production-pp.qbox.me/fbb3e1d4-bdbd-4fce-b60c-19b68ce5c9e1.png]\n\n图片 [https://dn-coding-net-production-pp.qbox.me/86b673e4-3576-47cc-9fcc-d1aafb46b3fe.png]\n\n\n在命令行创建本地分支\n\n\n也可以在命令行用 \ngit\nbranch \n新建一个分支，回到上一章中提到的\nlearn-git\n项目，我们在本地运行以下命令：\n\n $ git branch learn-branch\n\n\n\n这条命令将会在本地仓库创建一个名为\n\"learn-branch\"\n的分支，这条分支指向最近一次提交的数据。要注意的是，运行该命令后，当前工作分支仍然是在\n\"master\"\n分支上，需要使用 \ngit\ncheckout \n命令来进行分支之间的切换。\n\n\n4.4\n切换分支\n\n本地分支切换\n\n\n之前我们已经在本地创建好了分支，接下来切换到\n\"learn-branch\"\n分支：\n\n$ git checkout learn-branch\nSwitched to branch \'learn-branch\'\n\n\n\ngit\ncheckout \n下面这句话告诉我们，我们已经成功地将工作分支切换到了\n\"learn-branch\"\n分支。\n\n\n远端分支切换\n\n\nCoding.net\n提供在线的分支切换，在项目代码页，master\n标签下拉菜单处可以选择其他分支。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/a3a8bb62-4157-4857-acfe-b02c4f29a334.png]\n\n\n也可以在分支页进行选择：\n\n图片 [https://dn-coding-net-production-pp.qbox.me/0402da8a-22f4-40d4-87b2-ead3db740f97.png]\n\n\n4.5\n合并分支\n\n接下来我们将描述本地两种常见情形下的合并分支操作。本地的分支合并都是在命令行解决的。\n\n\n4.5.1\n快进式合并\n\n快进式合并分支，也叫Fast\nForeword。\n我们在\n\"learn-branch\"\n分支上进行一些操作，创建一个新的\ntxt\n文件\n\"learn-branch.txt\"，接着在其中输入一行\n\"I\nam\nstudying\ngit\nbranch\":\n\n $touch learn-branch.txt\n $echo I am studying git branch > learn-branch.txt\n\n\n\n接下来我们将\n\"learn-branch.txt\"\n加入到跟踪文件，并提交到本地仓库：\n\n $git add learn-branch.txt\n $git commit -m \"add learn-branch.txt\"\n [learn-branch fce6c4e] add learn-branch.txt\n  1 files changed, 1 insertions(+)\n  create mode 100644 learn-branch.txt   \n\n\n\n接下来我们回到\n\"master\"\n分支，并将\n\"learn-branch\"\n分支合并进来：\n\n $ git checkout master\n Switched to branch \'master\'\n Your branch is up-to-date with \'origin/master\'.\n\n $ git merge learn-branch\n Updating ca62ea0..fce6c4e\n Fast-forward\n  learn-branch.txt | 1 +\n  1 file changed, 1 insertion(+)  \n  create mode 100644 learn-branch.txt\n\n\n\ngit\nmerge\n[分支名] \n命令将指定分支合并到当前工作分支中。请注意，合并时出现了\n\"Fast\nforward\"\n的提示。由于当前\n\"master\"\n分支所在的提交对象是要并入的\nlearn-branch\n分支的直接上游，Git\n只需把\nmaster\n分支指针直接右移。换句话说，如果顺着一个分支走下去可以到达另一个分支的话，那么\nGit\n在合并两者时，只会简单地把指针右移，因为这种单线的历史分支不存在任何需要解决的分歧，所以这种合并过程可以称为快进（Fast\nforward）。\n\n\n合并之后，\"master\"\n分支和\n\"learn-branch\"\n分支实际上是指向同一个位置。此时你可以通过\n\n $git branch -d [分支名]\n\n\n\n来删除某个分支。\n\n\n4.5.2\n普通分支合并\n\n分支合并之前，最好使用\ngit\npull\n将\n\"master\"\n分支的代码更新到最新：\n\n\n如果我们在合并之前对\n\"master\"\n分支和\n\"learn-branch\"\n分支都做了一些修改，那合并时就不会像快进合并那么简单了。\n\n\n我们首先在\n\"master\"\n分支中做一些修改，比如将\n\"lear-branch.txt\"\n的内容进行修改：\n\n $echo I am on master branch > lear-branch.txt\n $git commit -m \"alpha\"\n [master a72cad8] alpha\n  1 files changed, 1 insertions(+), 1 deletion(-)\n\n\n\n接下来，我们进入到\n\"learn-branch\"\n分支，也对\n\"learn-branch.txt\"\n进行一些修改：\n\n $git checkout learn-branch\n Swtiched to branch \'learn-branch\'\n $echo I am on learn-branch branch > lear-branch.txt\n $git commit -m \"beta\"\n [learn-branch 27a4a6e] beta\n  1 files changed, 1 insertions(+), 1 deletion(-)\n\n\n\n我们回到\n\"master\"\n分支再尝试合并分支：\n\n $git checkout master\n Swtiched to branch \'master\' \n $git merge learn-branch\n Auto-merging learn-branch.txt\n CONFLICT (content): Merge conflict in learn-branch.txt\n Automatic merge failed; fix conflicts and then commit the result.\n\n\n\n通常来说，当工作分支所指向的提交对象并不是需合并分支的直接祖先，Git\n不得不进行一些额外处理。Git\n会根据分支的内容自动创建了一个包含了合并结果的提交对象，这个新的提交对象会包涵两次提交的内容。但是我们在两个分支中操作了同一个文件的同一个部分，这就需要我们手动来解决冲突了。\n\n\n现在运行 \ngit\nstatus \n命令，我们会看到在哪里出现了冲突：\n\n $ git status\n On branch master\n You have unmerged paths.\n   (fix conflicts and run \"git commit\")\n\n Unmerged paths:\n   (use \"git add <file>...\" to mark resolution)\n\n         both modified:      learn-branch.txt\n\n no changes added to commit (use \"git add\" and/or \"git commit -a\")\n\n\n\n现在我们打开\nlearn-branch.txt，会发现\nGit\n加入了冲突解决标记：\n\n <<<<<<< HEAD\n I am on master branch \n =======\n I am on learn-branch branch \n >>>>>>> learn-branch\n\n\n\n可以看到\n=======\n隔开的上半部分，是\nHEAD（即\nmaster\n分支，在运行\nmerge\n命令时的工作分支）中的内容，下半部分是在\nlearn-branch\n分支中的内容。解决冲突的办法无非是二者选其一或者人工亲自整合到一起。把上述内容修改为这样：\n\n I am on master branch \n\n\n\n接下来运行 \ngit\nadd \n来告诉\nGit\n冲突已经解决，并运行 \ngit\ncommit \n来完成合并：\n\n $git add learn-branch.txt\n $git commit -m \"conflict resolved\"\n [master cadd265] conflict resloved\n\n\n\n这样的合并冲突在快进合并中不可能发生。\n\n\n4.5.3\n分支推送到仓库\n\n当你想和其他人分享某个本地分支时，你需要把它推送到一个你拥有写权限的远程仓库。你创建的本地分支不会因为你的写入操作而被自动同步到你引入的远程服务器上，你需要明确地执行推送分支的操作。换句话说，对于无意分享的分支，你尽管保留为私人分支好了，而只推送那些协同工作要用到的特性分支。\n\n\n我们可以使用 \ngit\npush\n[仓库名]\n[分支名] \n将之前在本地创建的\n\"learn-branch\"\n分支推送到\n部署在\nCoding.net\n的\n\"learn-git\"\n项目中：\n\n $ git push origin serverfix\n Counting objects: 7, done.\n Delta compression using up to 2 threads.\n Compressing objects: 100% (2/2), done.\n Writing objects: 100% (3/3), 333 bytes | 0 bytes/s, done.\n Total 3 (delta 0), reused 0 (delta 0)\n To https:git.coding.net/Kyle_lyk/learn-git.git\n  * [new branch]      learn-branch -> learn-branch\n\n\n\n现在查看\n\"learn-git\"\n仓库，你就会发现除了\n\"master\"\n分支外，还增加了一个\n\"learn-branch\"\n分支。\n\n\n4.5.4\n合并请求\n\nCoding\n推荐使用合并请求，在线将2个分支合并。合并请求分为\n\n-  MergeRequest  针对私有项目 \n-  PullRequest  针对公开项目\n\n\n\n私有项目\n\n图片 [https://dn-coding-net-production-pp.qbox.me/85a46436-5ca7-4f9e-8ee0-ba1e23513828.png]\n\n\n当你将分支推送到远端仓库后，通过新建&提交“合并请求”\n\n图片 [https://dn-coding-net-production-pp.qbox.me/56f812ec-c423-44b7-832c-dd08805fa6ee.png]\n\n\n在创建新的合并请求时，可以填写代码评审，并引用项目内任务进行关联。\n合并请求(MR)\n发起人可以在该MR被合并前，随时对代码评审和引用任务进行编辑。点击提交，即可以创建一个合并请求(\nMR\n)\n，系统会自动判断出该\nMR\n的是否可以合并状态。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/980fded0-b1aa-47a7-b4ed-30085c98b9ba.png]\n\n\n在\nMR\n页面里面，MR\n的提交者可以取消\nMR\n，MR\n目标分支的管理者（对该分支有写权限的项目成员），可以选择合并或者拒绝。MR\n支持\nMarkdown\n语法评论。\n\n\n公开项目\n\n图片 [https://dn-coding-net-production-pp.qbox.me/4703cf86-9268-4de5-a2de-c6072b446e3a.png]\n\n\n通过\nFork\n-\nPull\nRequest\n的方式，提交合并请求。\n\n\n首先，你需要将共有项目\nfork\n到你自己的仓库，如图。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/37acd26e-868f-4935-b479-d21fd1f1b1da.png]\n\n\nfork\n后会在你的项目空间生成一个对应的项目，然后修改\nfork\n后项目的代码。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/2cf2205c-f22b-41a3-9938-d075fe1e3b2c.png]\n\n\n当准备同源项目合并时，创建合并请求(\nPull\nRequest\n)\n\n图片 [https://dn-coding-net-production-pp.qbox.me/de9a67f9-bd8a-4f1e-b95c-a46a279358f7.png]\n\n\n点击提交，即可以创建一个合并请求(\nPR\n)\n，系统会自动判断出该\nPR\n的是否可以合并状态。\n\n\n4.5.5\n代码行级比对\n\n代码行级比对(\nLine\nNotes\n)\n是\nCoding\n开发的可以针对代码的\ndiff\n进行行级别的评论功能，支持\nMarkdown\n语法，可以方便的用来进行\nCode\nReview。\n\n你可以在代码\ncommit\n页面，和合并请求(\nMR\n/PR\n)\n页面使用该功能。如下图：\n\n\n此处放上之前\nLine\nNotes\n上线推广时录制的\nGif。\n\n\n4.6\n保护分支\n\n保护分支是\nCoding\n针对\nGit\n中有关代码权限开发的一个功能，阅读之前，我假设您已经知道分支的基本概念和用法。简而言之，保护分支就是将特定的分支保护起来，以防止被破坏。\n\n\n在项目代码分支页面，我们可以设置保护分支，如下图所示：\n\n图片 [https://dn-coding-net-production-pp.qbox.me/25bb5b4e-ebcd-40ac-bdc1-4ed15ab63b3a.png]\n\n\n分支名称左边有一个\nlock\n标志，表示改分支是保护分支。我们可以点击右侧的绿色盾牌标志来设置开关保护分支和设置保护分支成员。如下图：\n\n图片 [https://dn-coding-net-production-pp.qbox.me/f9f8b62d-ee87-4333-aec2-733c6699e53f.png]\n\n勾选某个项目成员，即代表改成员对该分支有\nwrite\n权限（可以push\n至该分支，可以接受该分支的\nMR）。\n\n\n其他成员，则没有权限\npush\n至该分支，当push\n至该分支的时候，会得到如下错误提示：\n\n图片 [https://dn-coding-net-production-pp.qbox.me/bf94efb5-a604-4bf5-9e8a-fd9837fbef64.png]\n\n所以，当你看到这个错误提示的时候，就知道是因为没有该保护分支权限而导致\npush\n失败了。\n\n\n5.\n代码阅读\n\n代码阅读(\nCodeInsight\n)是\nCoding\n开发的用来在线阅读代码的一种功能，在\nCoding\n你不止可以在代码托管页面阅读代码，我们将提供\n代码阅读（CodeInsight）功能，该功能提供了一系列语法分析，交叉引用分析等，最终可以实现在线精准的代码高亮显示，交叉引用查询，声明，定义，调用查询等等高级功能。\n\n\n如果是付费项目，可以在代码页面的右上角，点击代码阅读，进行阅读，如下图：\n\n图片 [https://dn-coding-net-production-pp.qbox.me/9b35714c-bfd2-422e-8896-32be3d5d4d11.png]\n\n\n6.\nSSH公钥\n\n有关什么是\nSSH，可参考中文维基百科（ \nhttp://zh.wikipedia.org/zh/Secure_Shell）。\n[http://zh.wikipedia.org/zh/Secure_Shell）。]\n\n这里要说明的是，Coding.net\n支持使用\nSSH\n协议来访问\nGit仓库，提供账户\nSSH\n公钥和项目部署\nSSH\n公钥设置。\n\n用户可以在认证身份时选择在账户里面设置\nSSH公钥，并获所有仓库的读写权限（注意！您的公钥对应的私钥必须要妥善保存，如果您的私钥被第三方获取，那么他将可以以您的身份来操作\nGit\n仓库，这跟密码被盗一样严重）]，\n也可以在项目设置里面设置项目部署公钥，获取仓库的只读权限。\n\n\n添加公钥后，您就可以在项目的代码页面点击\nSSH\n切换到\nSSH\n协议的\nclone\n地址，类似这样：（git@coding.net:wzw/leave-a-message.git），这样就可以使用\nSSH\n协议来访问\nGit\n仓库了，每次链接都不需要再输入账号和密码了。\n\n\n注意：一个公钥只能认证一个用户，而一个用户却可以拥有多个公钥。\n\n\n6.1\n账户SSH公钥\n\n账户\nSSH\n公钥是跟用户账户关联的公钥，一旦设置，就拥有账户下所有项目仓库的读写权限。\n\n\n6.1.1\n生成公钥\n\nMac/Linux\n打开命令行终端,\nWindows\n打开\nGit\nBash\n。\n\n输入ssh-keygen\n-t\nrsa\n-C\n\"username@example.com\",(\n注册的邮箱)，接下来点击enter键即可（也可以输入密码）。\n\nssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\n# Creates a new ssh key, using the provided email as a label\n# Generating public/private rsa key pair.\nEnter file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter]  // 推荐使用默认地址\n\n\n\n成功之后\n\nYour identification has been saved in /Users/you/.ssh/id_rsa.\n# Your public key has been saved in /Users/you/.ssh/id_rsa.pub.\n# The key fingerprint is:\n# 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com\n\n\n\n6.1.2\n添加公钥\n 1. \n    本地打开\n    id_rsa.pub\n    文件，复制其中全部内容，填写到SSH_RSA公钥key下的一栏，公钥名称可以随意起名字。\n 2. \n    完成后点击“添加”，然后输入密码或动态码即可添加完成。\n    图片 [https://dn-coding-net-production-pp.qbox.me/49eab64b-8d8a-4787-a0ed-ce347f753a69.png]\n 3. \n    完成后在命令行测试，首次建立链接会要求信任主机。\n    \n       $ ssh -T git@git.coding.net\n       The authenticity of host \'git.coding.net (61.146.73.68)\' can not be established.\n       RSA key fingerprint is 98:ab:2b:30:60:00:82:86:bb:85:db:87:22:c4:4f:b1.\n       Are you sure you want to continue connecting (yes/no)? yes\n       Warning: Permanently added \'git.coding.net,61.146.73.68\' (RSA) to the list of kn\n       own hosts.\n    \n       Enter passphrase for key \'/c/Users/Yuankai/.ssh/id_rsa\':\n       Coding.net Tips : [ Hello Kyle_lyk! You have connected to Coding.net by SSH successfully! ]\n    \n    \n    \n\n\n6.2\n部署SSH公钥\n\n项目部署\nSSH\n公钥是跟项目关联的公钥，设置后有该项目的仓库的只读权限。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/862d0517-5b77-49c7-bfb2-398674e476dd.png]\n\n\n添加方式同\nSSH\n公钥一致。\n\n\n6.3\n关于HOSTKEY\n\nCoding.net\n为了更好的通用性，以后计划默认使用\nRSA\nHost\nKey\n来提供\nSSH\n通信的加密服务，此\nRSA\nkey\n的公钥内容如下：\n\n\nssh-rsa\nAAAAB3NzaC1yc2EAAAADAQABAAABAQDHOWdwLpkos2CLli6DFvQ36yQE6Pe/PtFp3XwyirfZCIoGWnedaWI8zkJWVCs0wgOB9/urFepTDfV2wN49KGy1sl2/CCDEH2K/zeoEAZlTcBrhU17bwg1yMHCyJ7IM+zdLzItDEKYjgoWqVdUGK1dXQQlwt7GP4W7HqffelQQoVxOMoZ5N50MzD+nvV4y8iq0KwDQNy62iU4hui9ajCSVUDLu/06ucd5IojSI9keRIYAXvQf52TJ5EbvoBggp9RhjuWNEG8IhnPP6rzPS11Ocmwg/HsP8xOKL28AeDBAh6B6MEBDtlyp5Yfu9cwZJ9CFtU/x5fHFPtANmgIphAfwN1\n\n\nfingerprint\n是：\n\n98:ab:2b:30:60:00:82:86:bb:85:db:87:22:c4:4f:b1\n\n\n如果您之前有信任过\nCoding.net\n的\nECDSA\n格式的\nHost\nkey，那么之后的\nPush\n和\nPull\n可能会遇到如下错误：\n\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@\nWARNING:\nREMOTE\nHOST\nIDENTIFICATION\nHAS\nCHANGED!\n@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nIT\nIS\nPOSSIBLE\nTHAT\nSOMEONE\nIS\nDOING\nSOMETHING\nNASTY!\nSomeone\ncould\nbe\neavesdropping\non\nyou\nright\nnow\n(man-in-the-middle\nattack)!\nIt\nis\nalso\npossible\nthat\na\nhost\nkey\nhas\njust\nbeen\nchanged.\nThe\nfingerprint\nfor\nthe\nRSA\nkey\nsent\nby\nthe\nremote\nhost\nis\n98:ab:2b:30:60:00:82:86:bb:85:db:87:22:c4:4f:b1.\nPlease\ncontact\nyour\nsystem\nadministrator.\n\n如果您确认，输出的公钥指纹是上文描述的内容。那么可以信任这是\nCoding.net\n的服务器，不是第三方劫持。\n您需要做如下操作\n\n1.删除\n~/.ssh/known_hosts\n中\ncoding.net\n相关的行\n\n\n2.重试\npush\n或者\npull\n或者\nssh\n-T\ngit@git.coding.net\n\n\n3.遇到询问是否信任服务器公钥，输入\nyes\n即可\n\n\n7.\nWEBHOOK\n\nWebhook\n允许第三方应用监听\nCoding.net\n上的特定事件，在这些事件发生时通过\nHTTP\nPOST\n方式通知(\n超时5秒)\n到第三方应用指定的\nWeb\nURL。\n例如项目有新的内容\nPush，或是Merge\nRequest\n有更新等。\nWebHook\n可方便用户实现自动部署，自动测试，自动打包，监控项目变化等。\n\n\n7.1\n设置触发事件\n\nCoding.net\n用户可以在自己的项目\n－>\n设置\n－>\nWebhook\n中创建、设置\nWebhook\n所需监听的事件，并配置第三方应用的\nWeb\nURL\n。\n\n\n目前我们支持如下的事件：\n\n\nEvent \n说明 \nPush \n任何时间项目内的\nPush\n操作 \nMR/PR \n任何时间项目内的\nMerge\nRequest\n和\nPull\nRequest\n操作 \nTopic \n任何时间项目内的讨论创建，评论 \nTask \n任何时间项目内的任务操作 \nDocument \n任何时间项目内的文档操作 \nWatch \n任何时间第三方用户关注你的项目(限公开项目) \nStar \n任何时间对项目的收藏(限公开项目)\n注：为防止您填写的\nURL\n被第三方恶意调用，我们\nWebHook\n提供了一个预先填写的\nToken\n，这个\nToken\n将会随\nPost\n请求信息一起发送给您，您可验证此\nToken\n来确认此请求确实是\nCoding.net\n发出的。\n\n\n7.2\nWEBHOOK请求说明\n\nWebhook\n的每个\nPOST\n请求都有包含特殊的\nHeader,\n默认超时时间为\n2s\n\n\nPOST\n请求\nHeader\n说明\n\n\nHeader \n说明 \nX-Coding-Event \n事件名（例如:\npush,\nMerge\nRequest,\nTask）\n首次绑定，系统会向您所填写的\nurl\n地址，发送一个简单的请求，以验证该\nWebHook\n是有效的，请求如下：\n\n{\n    \"token\": \"123\", \n    \"zen\": \"Coding！ 让开发更简单\"\n}\n\n\n\n关于WebHook\n更多例子，请参看\n[Coding.net\n开放平台] \nhttp://open.coding.io\n[http://open.coding.io]', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00'), ('16', '0', '配置SSH公钥', 'https://coding.net/help/doc/git/ssh-key.html', '---\nlayout: post\n\ntitle: 配置SSH公钥\n---\n\n本章节介绍如何通配置SSH公钥\n\n## 配置SSH公钥\n\n有关什么是 SSH，可参考中文维基百科（http://zh.wikipedia.org/zh/Secure_Shell）。\n这里要说明的是，Coding.net 支持使用 SSH 协议来访问 Git仓库，提供账户 SSH 公钥和项目部署 SSH 公钥设置。\n用户可以在认证身份时选择在账户里面设置 SSH公钥，并获所有仓库的读写权限（注意！您的公钥对应的私钥必须要妥善保存，如果您的私钥被第三方获取，那么他将可以以您的身份来操作 Git 仓库，这跟密码被盗一样严重）]， 也可以在项目设置里面设置项目部署公钥，获取仓库的只读权限。\n\n添加公钥后，您就可以在项目的代码页面点击 SSH 切换到 SSH 协议的 clone 地址，类似这样：（git@coding.net:wzw/leave-a-message.git），这样就可以使用 SSH 协议来访问 Git 仓库了，每次链接都不需要再输入账号和密码了。\n\n> 注意：一个公钥只能认证一个用户，而一个用户却可以拥有多个公钥。\n\n\n### 账户SSH公钥\n\n账户 SSH 公钥是跟用户账户关联的公钥，一旦设置，就拥有账户下所有项目仓库的读写权限。\n\n#### 生成公钥 \n\nMac/Linux 打开命令行终端, Windows 打开 Git Bash 。\n输入ssh-keygen -t rsa -C \"username@example.com\",( 注册的邮箱)，接下来点击enter键即可（也可以输入密码）。\n    \n    $ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\n    # Creates a new ssh key, using the provided email as a label\n    # Generating public/private rsa key pair.\n    Enter file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter]  // 推荐使用默认地址\n\n成功之后\n\n    Your identification has been saved in /Users/you/.ssh/id_rsa.\n    # Your public key has been saved in /Users/you/.ssh/id_rsa.pub.\n    # The key fingerprint is:\n    # 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com\n\n#### 添加公钥\n\n1. 本地打开 id_rsa.pub 文件，复制其中全部内容，填写到SSH_RSA公钥key下的一栏，公钥名称可以随意起名字。\n2. 完成后点击“添加”，然后输入密码或动态码即可添加完成。\n ![图片](https://dn-coding-net-production-pp.qbox.me/49eab64b-8d8a-4787-a0ed-ce347f753a69.png) \n3. 完成后在命令行测试，首次建立链接会要求信任主机。\n\n`$ ssh -T git@git.coding.net\n The authenticity of host \'git.coding.net (61.146.73.68)\' can not be established.\n RSA key fingerprint is 98:ab:2b:30:60:00:82:86:bb:85:db:87:22:c4:4f:b1.\n Are you sure you want to continue connecting (yes/no)? yes\n Warning: Permanently added \'git.coding.net,61.146.73.68\' (RSA) to the list of kn\n own hosts.\n\n Enter passphrase for key \'/c/Users/Yuankai/.ssh/id_rsa\':\n Coding.net Tips : [ Hello Kyle_lyk! You have connected to Coding.net by SSH successfully! ]\n`\n\n### 部署SSH公钥\n\n项目部署 SSH 公钥是跟项目关联的公钥，设置后有该项目的仓库的只读权限。\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/862d0517-5b77-49c7-bfb2-398674e476dd.png) \n \n添加方式同 SSH 公钥一致。\n\n### 关于HostKey\n\nCoding.net 为了更好的通用性，以后计划默认使用 RSA Host Key 来提供 SSH 通信的加密服务，此 RSA key 的公钥内容如下：\n\n ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDHOWdwLpkos2CLli6DFvQ36yQE6Pe/PtFp3XwyirfZCIoGWnedaWI8zkJWVCs0wgOB9/urFepTDfV2wN49KGy1sl2/CCDEH2K/zeoEAZlTcBrhU17bwg1yMHCyJ7IM+zdLzItDEKYjgoWqVdUGK1dXQQlwt7GP4W7HqffelQQoVxOMoZ5N50MzD+nvV4y8iq0KwDQNy62iU4hui9ajCSVUDLu/06ucd5IojSI9keRIYAXvQf52TJ5EbvoBggp9RhjuWNEG8IhnPP6rzPS11Ocmwg/HsP8xOKL28AeDBAh6B6MEBDtlyp5Yfu9cwZJ9CFtU/x5fHFPtANmgIphAfwN1\n\nfingerprint 是：\n`98:ab:2b:30:60:00:82:86:bb:85:db:87:22:c4:4f:b1`\n\n如果您之前有信任过 Coding.net 的 ECDSA 格式的 Host key，那么之后的 Push 和 Pull 可能会遇到如下错误：\n`\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nIT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!\nSomeone could be eavesdropping on you right now (man-in-the-middle attack)!\nIt is also possible that a host key has just been changed.\nThe fingerprint for the RSA key sent by the remote host is\n98:ab:2b:30:60:00:82:86:bb:85:db:87:22:c4:4f:b1.\nPlease contact your system administrator.\n`\n如果您确认，输出的公钥指纹是上文描述的内容。那么可以信任这是 Coding.net 的服务器，不是第三方劫持。 您需要做如下操作\n1.删除 ~/.ssh/known_hosts 中 coding.net 相关的行\n\n2.重试 push 或者 pull 或者 ssh -T git@git.coding.net\n\n3.遇到询问是否信任服务器公钥，输入 yes 即可\n\n---\n\n\n\n  <div class=\"footer-nav\">\n  <div class=\"left-nav\"><i class=\"fa fa-angle-left\"></i><a href=\"/help/doc/git/code-insight.html\">上一篇：代码阅读 Git</a></div>\n  <div class=\"right-nav\"><a href=\"/help/doc/git/webhook.html\">下一篇：Webhook</a><i class=\"fa fa-angle-right\"></i></div>\n  </div>\n\n', '本章节介绍如何通配置SSH公钥\n\n\n配置SSH公钥\n\n有关什么是\nSSH，可参考中文维基百科（ \nhttp://zh.wikipedia.org/zh/Secure_Shell）。\n[http://zh.wikipedia.org/zh/Secure_Shell）。]\n\n这里要说明的是，Coding.net\n支持使用\nSSH\n协议来访问\nGit仓库，提供账户\nSSH\n公钥和项目部署\nSSH\n公钥设置。\n\n用户可以在认证身份时选择在账户里面设置\nSSH公钥，并获所有仓库的读写权限（注意！您的公钥对应的私钥必须要妥善保存，如果您的私钥被第三方获取，那么他将可以以您的身份来操作\nGit\n仓库，这跟密码被盗一样严重）]，\n也可以在项目设置里面设置项目部署公钥，获取仓库的只读权限。\n\n\n添加公钥后，您就可以在项目的代码页面点击\nSSH\n切换到\nSSH\n协议的\nclone\n地址，类似这样：（git@coding.net:wzw/leave-a-message.git），这样就可以使用\nSSH\n协议来访问\nGit\n仓库了，每次链接都不需要再输入账号和密码了。\n\n\n注意：一个公钥只能认证一个用户，而一个用户却可以拥有多个公钥。\n\n\n账户SSH公钥\n\n账户\nSSH\n公钥是跟用户账户关联的公钥，一旦设置，就拥有账户下所有项目仓库的读写权限。\n\n\n生成公钥\n\nMac/Linux\n打开命令行终端,\nWindows\n打开\nGit\nBash\n。\n\n输入ssh-keygen\n-t\nrsa\n-C\n\"username@example.com\",(\n注册的邮箱)，接下来点击enter键即可（也可以输入密码）。\n\n$ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\n# Creates a new ssh key, using the provided email as a label\n# Generating public/private rsa key pair.\nEnter file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter]  // 推荐使用默认地址\n\n\n\n成功之后\n\nYour identification has been saved in /Users/you/.ssh/id_rsa.\n# Your public key has been saved in /Users/you/.ssh/id_rsa.pub.\n# The key fingerprint is:\n# 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com\n\n\n\n添加公钥\n 1. \n    本地打开\n    id_rsa.pub\n    文件，复制其中全部内容，填写到SSH_RSA公钥key下的一栏，公钥名称可以随意起名字。\n 2. \n    完成后点击“添加”，然后输入密码或动态码即可添加完成。\n    图片 [https://dn-coding-net-production-pp.qbox.me/49eab64b-8d8a-4787-a0ed-ce347f753a69.png]\n 3. \n    完成后在命令行测试，首次建立链接会要求信任主机。\n\n\n`$\nssh\n-T\ngit@git.coding.net\n\nThe\nauthenticity\nof\nhost\n\'git.coding.net\n(61.146.73.68)\'\ncan\nnot\nbe\nestablished.\n\nRSA\nkey\nfingerprint\nis\n98:ab:2b:30:60:00:82:86:bb:85:db:87:22:c4:4f:b1.\n\nAre\nyou\nsure\nyou\nwant\nto\ncontinue\nconnecting\n(yes/no)?\nyes\n\nWarning:\nPermanently\nadded\n\'git.coding.net,61.146.73.68\'\n(RSA)\nto\nthe\nlist\nof\nkn\n\nown\nhosts.\n\n\nEnter\npassphrase\nfor\nkey\n\'/c/Users/Yuankai/.ssh/id_rsa\':\n\nCoding.net\nTips\n:\n[\nHello\nKyle_lyk!\nYou\nhave\nconnected\nto\nCoding.net\nby\nSSH\nsuccessfully!\n]\n\n`\n\n\n部署SSH公钥\n\n项目部署\nSSH\n公钥是跟项目关联的公钥，设置后有该项目的仓库的只读权限。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/862d0517-5b77-49c7-bfb2-398674e476dd.png]\n\n\n添加方式同\nSSH\n公钥一致。\n\n\n关于HOSTKEY\n\nCoding.net\n为了更好的通用性，以后计划默认使用\nRSA\nHost\nKey\n来提供\nSSH\n通信的加密服务，此\nRSA\nkey\n的公钥内容如下：\n\n\nssh-rsa\nAAAAB3NzaC1yc2EAAAADAQABAAABAQDHOWdwLpkos2CLli6DFvQ36yQE6Pe/PtFp3XwyirfZCIoGWnedaWI8zkJWVCs0wgOB9/urFepTDfV2wN49KGy1sl2/CCDEH2K/zeoEAZlTcBrhU17bwg1yMHCyJ7IM+zdLzItDEKYjgoWqVdUGK1dXQQlwt7GP4W7HqffelQQoVxOMoZ5N50MzD+nvV4y8iq0KwDQNy62iU4hui9ajCSVUDLu/06ucd5IojSI9keRIYAXvQf52TJ5EbvoBggp9RhjuWNEG8IhnPP6rzPS11Ocmwg/HsP8xOKL28AeDBAh6B6MEBDtlyp5Yfu9cwZJ9CFtU/x5fHFPtANmgIphAfwN1\n\n\nfingerprint\n是：\n\n98:ab:2b:30:60:00:82:86:bb:85:db:87:22:c4:4f:b1\n\n\n如果您之前有信任过\nCoding.net\n的\nECDSA\n格式的\nHost\nkey，那么之后的\nPush\n和\nPull\n可能会遇到如下错误：\n\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@\nWARNING:\nREMOTE\nHOST\nIDENTIFICATION\nHAS\nCHANGED!\n@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nIT\nIS\nPOSSIBLE\nTHAT\nSOMEONE\nIS\nDOING\nSOMETHING\nNASTY!\nSomeone\ncould\nbe\neavesdropping\non\nyou\nright\nnow\n(man-in-the-middle\nattack)!\nIt\nis\nalso\npossible\nthat\na\nhost\nkey\nhas\njust\nbeen\nchanged.\nThe\nfingerprint\nfor\nthe\nRSA\nkey\nsent\nby\nthe\nremote\nhost\nis\n98:ab:2b:30:60:00:82:86:bb:85:db:87:22:c4:4f:b1.\nPlease\ncontact\nyour\nsystem\nadministrator.\n\n如果您确认，输出的公钥指纹是上文描述的内容。那么可以信任这是\nCoding.net\n的服务器，不是第三方劫持。\n您需要做如下操作\n\n1.删除\n~/.ssh/known_hosts\n中\ncoding.net\n相关的行\n\n\n2.重试\npush\n或者\npull\n或者\nssh\n-T\ngit@git.coding.net\n\n\n3.遇到询问是否信任服务器公钥，输入\nyes\n即可\n\n\n\n\n\n<div\nclass=\"footer-nav\">\n\n<div\nclass=\"left-nav\"><i\nclass=\"fa\nfa-angle-left\"></i><a\nhref=\"/help/doc/git/code-insight.html\">上一篇：代码阅读\nGit</a></div>\n\n<div\nclass=\"right-nav\"><a\nhref=\"/help/doc/git/webhook.html\">下一篇：Webhook</a><i\nclass=\"fa\nfa-angle-right\"></i></div>\n\n</div>', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00'), ('17', '0', 'Webhook', 'https://coding.net/help/doc/git/webhook.html', '---\nlayout: post\n\ntitle: Webhook\n---\n\n本章节介绍如何通配置Webhook \n\n## WebHook \n\nWebhook 允许第三方应用监听 Coding.net 上的特定事件，在这些事件发生时通过 HTTP POST 方式通知( 超时5秒) 到第三方应用指定的 Web URL。 例如项目有新的内容 Push，或是 Merge Request 有更新等。 WebHook 可方便用户实现自动部署，自动测试，自动打包，监控项目变化等。 \n\n### 设置触发事件\n\nCoding.net 用户可以在自己的项目 －> 设置 －> Webhook 中创建、设置 Webhook 所需监听的事件，并配置第三方应用的 Web URL 。\n\n目前我们支持如下的事件：\n\n| Event |	说明 |\n| :---: | :--- |\n| Push |	任何时间项目内的 Push 操作 |\n| MR/PR | 任何时间项目内的 Merge Request 和 Pull Request 操作|\n| Topic |	任何时间项目内的讨论创建，评论 |\n| Task |	任何时间项目内的任务操作 |\n| Document |  任何时间项目内的文档操作 |\n| Watch |	任何时间第三方用户关注你的项目(限公开项目) |\n| Star | 任何时间对项目的收藏(限公开项目) |\n\n> 注：为防止您填写的 URL 被第三方恶意调用，我们 WebHook 提供了一个预先填写的 Token ，这个 Token 将会随 Post 请求信息一起发送给您，您可验证此 Token 来确认此请求确实是 Coding.net 发出的。\n\n### Webhook请求说明\n\nWebhook 的每个 POST 请求都有包含特殊的 Header, 默认超时时间为 2s \n\n**POST 请求 Header 说明**\n\n| Header |	说明 |\n| :--- | --- |\n| X-Coding-Event | 事件名（例如: push, Merge Request, Task） |\n\n首次绑定，系统会向您所填写的 url 地址，发送一个简单的请求，以验证该 WebHook 是有效的，请求如下：\n\n    {\n        \"token\": \"123\", \n        \"zen\": \"Coding！ 让开发更简单\"\n    }\n\n关于WebHook 更多例子，请参看 [Coding 开放平台]( http://open.coding.net)\n\n---\n\n## 上一篇 >> [配置ssh公钥](/help/doc/git/ssh-key.html)\n\n\n\n  <div class=\"footer-nav\">\n  <div class=\"left-nav\"><i class=\"fa fa-angle-left\"></i><a href=\"/help/doc/git/ssh-key.html\">上一篇：配置 ssh 公钥 Git</a></div>\n  </div>\n\n', '本章节介绍如何通配置Webhook\n\n\nWEBHOOK\n\nWebhook\n允许第三方应用监听\nCoding.net\n上的特定事件，在这些事件发生时通过\nHTTP\nPOST\n方式通知(\n超时5秒)\n到第三方应用指定的\nWeb\nURL。\n例如项目有新的内容\nPush，或是\nMerge\nRequest\n有更新等。\nWebHook\n可方便用户实现自动部署，自动测试，自动打包，监控项目变化等。\n\n\n设置触发事件\n\nCoding.net\n用户可以在自己的项目\n－>\n设置\n－>\nWebhook\n中创建、设置\nWebhook\n所需监听的事件，并配置第三方应用的\nWeb\nURL\n。\n\n\n目前我们支持如下的事件：\n\n\nEvent \n说明 \nPush \n任何时间项目内的\nPush\n操作 \nMR/PR \n任何时间项目内的\nMerge\nRequest\n和\nPull\nRequest\n操作 \nTopic \n任何时间项目内的讨论创建，评论 \nTask \n任何时间项目内的任务操作 \nDocument \n任何时间项目内的文档操作 \nWatch \n任何时间第三方用户关注你的项目(限公开项目) \nStar \n任何时间对项目的收藏(限公开项目)\n注：为防止您填写的\nURL\n被第三方恶意调用，我们\nWebHook\n提供了一个预先填写的\nToken\n，这个\nToken\n将会随\nPost\n请求信息一起发送给您，您可验证此\nToken\n来确认此请求确实是\nCoding.net\n发出的。\n\n\nWEBHOOK请求说明\n\nWebhook\n的每个\nPOST\n请求都有包含特殊的\nHeader,\n默认超时时间为\n2s\n\n\nPOST\n请求\nHeader\n说明\n\n\nHeader \n说明 \nX-Coding-Event \n事件名（例如:\npush,\nMerge\nRequest,\nTask）\n首次绑定，系统会向您所填写的\nurl\n地址，发送一个简单的请求，以验证该\nWebHook\n是有效的，请求如下：\n\n{\n    \"token\": \"123\", \n    \"zen\": \"Coding！ 让开发更简单\"\n}\n\n\n\n关于WebHook\n更多例子，请参看 \nCoding\n开放平台\n[http://open.coding.net]\n\n\n\n\n\n上一篇\n>> \n配置SSH公钥\n[/HELP/DOC/GIT/SSH-KEY.HTML]\n\n<div\nclass=\"footer-nav\">\n\n<div\nclass=\"left-nav\"><i\nclass=\"fa\nfa-angle-left\"></i><a\nhref=\"/help/doc/git/ssh-key.html\">上一篇：配置\nssh\n公钥\nGit</a></div>\n\n</div>', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00'), ('18', '0', 'Git代码托管', 'https://coding.net/help/doc/git/index.html', '---\nlayout: post\n\ntitle: Git代码托管\n---\n\n本手册主要描述 Coding.net 旗下 Git代码托管产品的相关功能说明。\nCopyRight by Coding.net  更新时间 2015-09-01\n\n关于Git代码托管\n--------\n\n### Git代码托管 ###\n\nGit代码托管是 Coding.net 基于 Java 自主研发的一款 Git 在线代码托管平台。\n开发者可以将源代码通过 Git 命令托管到 Coding.net, 并且享受 Coding.net 提供的各种延伸工具，如 合并请求( Merge Request/Pull Request)，Line Notes，保护分支，代码阅读，Webhook 等。\n\n### Git代码托管的优势 ###\n\n传统的代码都是管理到本机或者内网。 一旦本机或者内网机器出问题，代码可能会丢失，使用远端代码仓库将永远存在一个备份。同时也免去了搭建本地代码版本控制服务的繁琐。\n云计算时代 Git 以其强大的分支和克隆功能，更加方便了开发者远程协作。\n\n### Git代码托管主要功能 ###\n\n - 分支合并 ( MergeRequest/Pull Request )\n - 保护分支\n - 代码阅读 CodeInsight\n - Line Notes\n - WebHook\n\n  [1]: http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\n  [2]: https://git-scm.com/book/zh/v2\n  [3]: coding.net/upgrade\n  \n\n### Git相关参考资料\n\n[git教程中文版v2][2]\n[廖雪峰的Git教程][1]\n\n---\n\n\n  <div class=\"footer-nav\">\n  <div class=\"right-nav\"><a href=\"/help/doc/git/getting-started.html\">下一篇：开始用 Git 管理代码</a><i class=\"fa fa-angle-right\"></i></div>\n  </div>\n\n', '本手册主要描述\nCoding.net\n旗下\nGit代码托管产品的相关功能说明。\n\nCopyRight\nby\nCoding.net\n更新时间\n2015-09-01\n\n\n关于GIT代码托管\n\nGIT代码托管\n\nGit代码托管是\nCoding.net\n基于\nJava\n自主研发的一款\nGit\n在线代码托管平台。\n\n开发者可以将源代码通过\nGit\n命令托管到\nCoding.net,\n并且享受\nCoding.net\n提供的各种延伸工具，如\n合并请求(\nMerge\nRequest/Pull\nRequest)，Line\nNotes，保护分支，代码阅读，Webhook\n等。\n\n\nGIT代码托管的优势\n\n传统的代码都是管理到本机或者内网。\n一旦本机或者内网机器出问题，代码可能会丢失，使用远端代码仓库将永远存在一个备份。同时也免去了搭建本地代码版本控制服务的繁琐。\n\n云计算时代\nGit\n以其强大的分支和克隆功能，更加方便了开发者远程协作。\n\n\nGIT代码托管主要功能\n * \n   分支合并\n   (\n   MergeRequest/Pull\n   Request\n   )\n * \n   保护分支\n * \n   代码阅读\n   CodeInsight\n * \n   Line\n   Notes\n * \n   WebHook\n\n\nGIT相关参考资料\n\ngit教程中文版v2\n[https://git-scm.com/book/zh/v2]\n\n廖雪峰的Git教程\n[http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000]\n\n\n\n\n\n<div\nclass=\"footer-nav\">\n\n<div\nclass=\"right-nav\"><a\nhref=\"/help/doc/git/getting-started.html\">下一篇：开始用\nGit\n管理代码</a><i\nclass=\"fa\nfa-angle-right\"></i></div>\n\n</div>', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00'), ('19', '0', '两步认证', 'https://coding.net/help/doc/mobile/2fa.html', '---\nlayout: post\n\ntitle: 两步认证\n---\n\n本章节主要描述如何在手机App使用两步认证。\n\n## 什么是两步验证\n\n> 用户开启两步验证后，在登录 coding.net 或进行危险操作（如删除项目、转让项目、升级项目、关闭两步验证功能等） 的时候，输入电子邮箱或个性后缀和登录密码之后，必须再输入用户手机 Coding 客户端（或 Google 身份验证器）生成的动态验证码进行两步验证，以保护账户安全。\n\n### 开启两步验证\n\n> 1. 登录 coding.net 进入个人账户，需要先在个人设置里面验证手机号码后，才能开启两步验证，验证完成后，选择两步验证，在两步验证界面点击「开启两步验证」；\n> 2. 根据 web 端两步验证流程，打开 Coding 客户端点击项目列表右上方的「+」，点击下拉菜单中的「两步验证」，进入身份验证器界面点击「开始验证」扫描 web 端二维码；\n> 3. 扫描成功后，将身份验证器的动态密码输入至 web 端并点击「验证并开启」，并输入登录密码，点击「确认」两步验证成功开启。\n\n> 注意：开启两步验证后，需要重新登录。Coding 客户端身份验证器生成的动态验证码会自动填充，登录成功即完成开启两步验证。\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/d4459546-10b6-4d63-a5ef-de4963bd14ad.png)\n\n### 关闭两步验证\n  \n>登录 coding.net 进入个人账户页面，选择两步验证，点击「关闭两步验证」，输入 Coding 客户端身份验证器生成的动态验证码，即可关闭两步验证。\n\n  -   丢失了两步验证的身份验证器，该怎么办？\n>可以用您的注册邮箱发送一封邮件到 support@coding.net，并附上您的电话联系方式，客服会在24小时以内联系您，帮助关闭两步验证。\n\n---\n\n\n  <div class=\"footer-nav\">\n  <div class=\"left-nav\"><i class=\"fa fa-angle-left\"></i><a href=\"/help/doc/mobile/account.html\">上一篇：个人中心</a></div>\n  </div>\n\n', '本章节主要描述如何在手机App使用两步认证。\n\n\n什么是两步验证\n\n用户开启两步验证后，在登录\ncoding.net\n或进行危险操作（如删除项目、转让项目、升级项目、关闭两步验证功能等）\n的时候，输入电子邮箱或个性后缀和登录密码之后，必须再输入用户手机\nCoding\n客户端（或\nGoogle\n身份验证器）生成的动态验证码进行两步验证，以保护账户安全。\n\n\n开启两步验证\n 1. \n    登录\n    coding.net\n    进入个人账户，需要先在个人设置里面验证手机号码后，才能开启两步验证，验证完成后，选择两步验证，在两步验证界面点击「开启两步验证」；\n 2. \n    根据\n    web\n    端两步验证流程，打开\n    Coding\n    客户端点击项目列表右上方的「+」，点击下拉菜单中的「两步验证」，进入身份验证器界面点击「开始验证」扫描\n    web\n    端二维码；\n 3. \n    扫描成功后，将身份验证器的动态密码输入至\n    web\n    端并点击「验证并开启」，并输入登录密码，点击「确认」两步验证成功开启。\n\n\n注意：开启两步验证后，需要重新登录。Coding\n客户端身份验证器生成的动态验证码会自动填充，登录成功即完成开启两步验证。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/d4459546-10b6-4d63-a5ef-de4963bd14ad.png]\n\n\n关闭两步验证\n\n登录\ncoding.net\n进入个人账户页面，选择两步验证，点击「关闭两步验证」，输入\nCoding\n客户端身份验证器生成的动态验证码，即可关闭两步验证。\n\n * \n   丢失了两步验证的身份验证器，该怎么办？\n   可以用您的注册邮箱发送一封邮件到\n   support@coding.net，并附上您的电话联系方式，客服会在24小时以内联系您，帮助关闭两步验证。\n   \n   \n\n\n\n\n\n<div\nclass=\"footer-nav\">\n\n<div\nclass=\"left-nav\"><i\nclass=\"fa\nfa-angle-left\"></i><a\nhref=\"/help/doc/mobile/account.html\">上一篇：个人中心</a></div>\n\n</div>', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00'), ('20', '0', '个人中心', 'https://coding.net/help/doc/mobile/account.html', '---\nlayout: post\n\ntitle: 个人中心\n---\n\n本章节主要描述如何在手机App查看个人中心的相关信息。\n\n## 个人信息修改\n\n> 去往「我」点击「详细信息」，即可进入个人信息编辑界面修改头像、昵称、性别、所在地、座右铭、公司、职位以及个性标签。\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/814368ec-ccd8-4efc-ac11-458edadc3187.png) \n\n## 添加好友\n\n>**方法一：**去往「我」点击左上角添加好友按钮，进入添加好友界面，输入昵称或个性后缀，点击关注即可。\n>**方法二：**去往「消息」点击右上角按钮，进入我的好友列表页，点击添加好友按钮，进入添加好友界面，输入昵称或个性后缀，点击关注即可。\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/a43c8991-50b7-4e28-ad36-ffb2a81f9835.png) \n\n## 修改登录密码\n\n> 去往「我」点击右上角设置图标，进入设置页面点击「账号设置」在账号信息界面点击「修改密码」即可。\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/ecf965cb-487d-45e5-a2ef-6765a6ff78b3.png)\n\n\n---\n\n\n\n  <div class=\"footer-nav\">\n  <div class=\"left-nav\"><i class=\"fa fa-angle-left\"></i><a href=\"/help/doc/mobile/bubble.html\">上一篇：手机冒泡</a></div>\n  <div class=\"right-nav\"><a href=\"/help/doc/mobile/2fa.html\">下一篇：两步认证</a><i class=\"fa fa-angle-right\"></i></div>\n  </div>\n\n', '本章节主要描述如何在手机App查看个人中心的相关信息。\n\n\n个人信息修改\n\n去往「我」点击「详细信息」，即可进入个人信息编辑界面修改头像、昵称、性别、所在地、座右铭、公司、职位以及个性标签。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/814368ec-ccd8-4efc-ac11-458edadc3187.png]\n\n\n添加好友\n\n方法一： \n去往「我」点击左上角添加好友按钮，进入添加好友界面，输入昵称或个性后缀，点击关注即可。\n\n方法二： \n去往「消息」点击右上角按钮，进入我的好友列表页，点击添加好友按钮，进入添加好友界面，输入昵称或个性后缀，点击关注即可。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/a43c8991-50b7-4e28-ad36-ffb2a81f9835.png]\n\n\n修改登录密码\n\n去往「我」点击右上角设置图标，进入设置页面点击「账号设置」在账号信息界面点击「修改密码」即可。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/ecf965cb-487d-45e5-a2ef-6765a6ff78b3.png]\n\n\n\n\n\n<div\nclass=\"footer-nav\">\n\n<div\nclass=\"left-nav\"><i\nclass=\"fa\nfa-angle-left\"></i><a\nhref=\"/help/doc/mobile/bubble.html\">上一篇：手机冒泡</a></div>\n\n<div\nclass=\"right-nav\"><a\nhref=\"/help/doc/mobile/2fa.html\">下一篇：两步认证</a><i\nclass=\"fa\nfa-angle-right\"></i></div>\n\n</div>', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00'), ('21', '0', '项目代码', 'https://coding.net/help/doc/mobile/code.html', '---\nlayout: post\n\ntitle: 项目代码\n---\n\n本章节主要描述如何在手机App查看和操作项目代码。\n\n## 项目代码\n\n### 项目广场和公开项目\n\n>客户端暂时还没有提供项目广场的入口，您可以去往好友的个人中心找到「Ta 的项目」，即可查看好友的公开项目。\n\n>进入公开项目首页，点击「Fork」按钮，会提示 ：Fork 后此项目会复制到你的个人空间，确定要 Fork 吗” 点击「Fork」即可，Fork 成功后将跳往复制后的新项目首页。\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/c0da44f8-407e-4433-8b29-c64177da6d3a.png) \n\n### 查看代码分支和标签\n\n>点击项目首页菜单列表「代码」，进入代码子目录列表点击底部 button 弹出列表框，即可手动切换分支和标签。\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/9a83bdd6-c53d-4e42-800c-0290b7773928.png) \n\n### 查看提交历史\n\n>点击项目首页菜单列表「代码」，进入代码子目录列表点击右上角时钟 icon 即可进入「提交历史」列表。\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/71912382-6142-44bc-a07d-bf6faa3aff33.png) \n\n### 合并 Pull Request / Merge Request \n\n> 有权限操作分支的项目成员可进行 “合并”、“拒绝” 操作\n> 有权限操作分支的项目成员和 PR/MR 发起人若是同一人（ “合并”、“拒绝”、 “取消”皆可操作） \n> 非项目成员的 PR/MR 发起人只可进行 “取消” 操作\n\n### 代码改动及前后代码比对\n\n> 进入某个  PR/MR 详情，点击查看「文件改动」，进入文件改动列表，点击某一个文件即可查看修改详情，绿色代表增加了一行代码，红色代表删减了某行代码。\n> 在文件改动详情界面，点击右上角「查看文件」即可查看某个提交的文件代码前后对比。\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/3a68c32d-cbb2-4f7a-ab0b-ef15317b44b8.png) \n\n### Line Notes 代码行内评论\n\n> 在项目中新增或删减的代码行（带颜色的代码行）可以点击进行评论\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/dfa0e4a6-578b-420d-b79b-15f2c235d266.png) \n\n---\n\n\n\n\n  <div class=\"footer-nav\">\n  <div class=\"left-nav\"><i class=\"fa fa-angle-left\"></i><a href=\"/help/doc/mobile/discuss.html\">上一篇：项目讨论</a></div>\n  <div class=\"right-nav\"><a href=\"/help/doc/mobile/bubble.html\">下一篇：手机冒泡</a><i class=\"fa fa-angle-right\"></i></div>\n  </div>\n\n', '本章节主要描述如何在手机App查看和操作项目代码。\n\n\n项目代码\n\n项目广场和公开项目\n\n客户端暂时还没有提供项目广场的入口，您可以去往好友的个人中心找到「Ta\n的项目」，即可查看好友的公开项目。\n\n\n进入公开项目首页，点击「Fork」按钮，会提示\n：Fork\n后此项目会复制到你的个人空间，确定要\nFork\n吗”\n点击「Fork」即可，Fork\n成功后将跳往复制后的新项目首页。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/c0da44f8-407e-4433-8b29-c64177da6d3a.png]\n\n\n查看代码分支和标签\n\n点击项目首页菜单列表「代码」，进入代码子目录列表点击底部\nbutton\n弹出列表框，即可手动切换分支和标签。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/9a83bdd6-c53d-4e42-800c-0290b7773928.png]\n\n\n查看提交历史\n\n点击项目首页菜单列表「代码」，进入代码子目录列表点击右上角时钟\nicon\n即可进入「提交历史」列表。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/71912382-6142-44bc-a07d-bf6faa3aff33.png]\n\n\n合并\nPULL\nREQUEST\n/\nMERGE\nREQUEST\n\n有权限操作分支的项目成员可进行\n“合并”、“拒绝”\n操作\n\n有权限操作分支的项目成员和\nPR/MR\n发起人若是同一人（\n“合并”、“拒绝”、\n“取消”皆可操作）\n\n非项目成员的\nPR/MR\n发起人只可进行\n“取消”\n操作\n\n\n代码改动及前后代码比对\n\n进入某个\nPR/MR\n详情，点击查看「文件改动」，进入文件改动列表，点击某一个文件即可查看修改详情，绿色代表增加了一行代码，红色代表删减了某行代码。\n\n在文件改动详情界面，点击右上角「查看文件」即可查看某个提交的文件代码前后对比。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/3a68c32d-cbb2-4f7a-ab0b-ef15317b44b8.png]\n\n\nLINE\nNOTES\n代码行内评论\n\n在项目中新增或删减的代码行（带颜色的代码行）可以点击进行评论\n\n图片 [https://dn-coding-net-production-pp.qbox.me/dfa0e4a6-578b-420d-b79b-15f2c235d266.png]\n\n\n\n\n\n<div\nclass=\"footer-nav\">\n\n<div\nclass=\"left-nav\"><i\nclass=\"fa\nfa-angle-left\"></i><a\nhref=\"/help/doc/mobile/discuss.html\">上一篇：项目讨论</a></div>\n\n<div\nclass=\"right-nav\"><a\nhref=\"/help/doc/mobile/bubble.html\">下一篇：手机冒泡</a><i\nclass=\"fa\nfa-angle-right\"></i></div>\n\n</div>', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00');
INSERT INTO `help_documents` VALUES ('22', '0', '手机冒泡', 'https://coding.net/help/doc/mobile/bubble.html', '---\nlayout: post\n\ntitle: 手机冒泡\n---\n\n本章节主要描述如何在手机App使用冒泡。\n\n## 手机冒泡 \n\n### 自定义地理位置\n\n> 进入发冒泡界面点击「所在位置」，进入位置列表界面点击搜索框输入你的位置名称，搜索\n\n### 话题发布\n\n> 在发表冒泡界面点击「#」，进入话题推荐列表选择你想要发表的话题即可\n> 同事支持手动输入话题\n\n### 关注话题\n\n> 进入冒泡列表界面点击「搜索」，进入搜索界面，点击「热门话题」去往话题列表，点击任一话题，进入话题详情，点击右上角「关注」即可\n\n### 搜索冒泡内容\n\n> 进入冒泡广场，点击左上角搜索按钮，输入自己想搜索的内容\n\n### 发送私信语音消息\n\n> 选择好友进入对话框，点击输入框左面语音消息按钮，按住说话\n\n---\n\n\n  <div class=\"footer-nav\">\n  <div class=\"left-nav\"><i class=\"fa fa-angle-left\"></i><a href=\"/help/doc/mobile/code.html\">上一篇：项目代码</a></div>\n  <div class=\"right-nav\"><a href=\"/help/doc/mobile/account.html\">下一篇：个人中心</a><i class=\"fa fa-angle-right\"></i></div>\n  </div>\n\n\n', '本章节主要描述如何在手机App使用冒泡。\n\n\n手机冒泡\n\n自定义地理位置\n\n进入发冒泡界面点击「所在位置」，进入位置列表界面点击搜索框输入你的位置名称，搜索\n\n\n话题发布\n\n在发表冒泡界面点击「#」，进入话题推荐列表选择你想要发表的话题即可\n\n同事支持手动输入话题\n\n\n关注话题\n\n进入冒泡列表界面点击「搜索」，进入搜索界面，点击「热门话题」去往话题列表，点击任一话题，进入话题详情，点击右上角「关注」即可\n\n\n搜索冒泡内容\n\n进入冒泡广场，点击左上角搜索按钮，输入自己想搜索的内容\n\n\n发送私信语音消息\n\n选择好友进入对话框，点击输入框左面语音消息按钮，按住说话\n\n\n\n\n\n<div\nclass=\"footer-nav\">\n\n<div\nclass=\"left-nav\"><i\nclass=\"fa\nfa-angle-left\"></i><a\nhref=\"/help/doc/mobile/code.html\">上一篇：项目代码</a></div>\n\n<div\nclass=\"right-nav\"><a\nhref=\"/help/doc/mobile/account.html\">下一篇：个人中心</a><i\nclass=\"fa\nfa-angle-right\"></i></div>\n\n</div>', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00'), ('23', '0', '项目讨论', 'https://coding.net/help/doc/mobile/discuss.html', '---\nlayout: post\n\ntitle: 项目讨论\n---\n\n本章节主要描述如何在手机App上使用项目讨论。\n\n## 项目讨论 \n\n### 创建讨论\n\n>点击项目首页菜单列表「讨论」，进入讨论列表点击导航栏右上角「+」，进入讨论编辑界面\n>讨论的文本输入支持 Markdown 语法以及预览功能。\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/6273828a-b5cf-43fb-ac20-6f4fe87ed72f.png) \n\n### 编辑或者删除讨论\n\n>只有项目创建者和该讨论发起者可以编辑或删除已存在的讨论。\n>在已创建的讨论页面的导航栏右上角，点击「编辑」进入讨论编辑界面\n>在已创建的讨论页面评论处点击「删除」按钮即可删除该讨论 \n\n ![图片](https://dn-coding-net-production-pp.qbox.me/a4550be7-3fe0-420b-841a-fcfa1ab988ee.png)\n\n### 添加讨论标签\n\n>在讨论编辑界面或者讨论详情界面点击便签右侧「+」，进入标签管理界面，选择对应的标签点击完成即可。\n\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/9ddae0ea-bda7-46fb-8eab-35a3b5da50c1.png) \n\n### 查看或回复讨论权限\n\n>只有项目成员可以查看或回复已存在的讨论。\n>Tips：项目讨论中评论框只可以@项目成员。\n\n---\n\n\n\n  <div class=\"footer-nav\">\n  <div class=\"left-nav\"><i class=\"fa fa-angle-left\"></i><a href=\"/help/doc/mobile/task.html\">上一篇：任务管理</a></div>\n  <div class=\"right-nav\"><a href=\"/help/doc/mobile/code.html\">下一篇：项目代码</a><i class=\"fa fa-angle-right\"></i></div>\n  </div>\n\n', '本章节主要描述如何在手机App上使用项目讨论。\n\n\n项目讨论\n\n创建讨论\n\n点击项目首页菜单列表「讨论」，进入讨论列表点击导航栏右上角「+」，进入讨论编辑界面\n\n讨论的文本输入支持\nMarkdown\n语法以及预览功能。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/6273828a-b5cf-43fb-ac20-6f4fe87ed72f.png]\n\n\n编辑或者删除讨论\n\n只有项目创建者和该讨论发起者可以编辑或删除已存在的讨论。\n\n在已创建的讨论页面的导航栏右上角，点击「编辑」进入讨论编辑界面\n\n在已创建的讨论页面评论处点击「删除」按钮即可删除该讨论\n\n图片 [https://dn-coding-net-production-pp.qbox.me/a4550be7-3fe0-420b-841a-fcfa1ab988ee.png]\n\n\n添加讨论标签\n\n在讨论编辑界面或者讨论详情界面点击便签右侧「+」，进入标签管理界面，选择对应的标签点击完成即可。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/9ddae0ea-bda7-46fb-8eab-35a3b5da50c1.png]\n\n\n查看或回复讨论权限\n\n只有项目成员可以查看或回复已存在的讨论。\n\nTips：项目讨论中评论框只可以@项目成员。\n\n\n\n\n\n<div\nclass=\"footer-nav\">\n\n<div\nclass=\"left-nav\"><i\nclass=\"fa\nfa-angle-left\"></i><a\nhref=\"/help/doc/mobile/task.html\">上一篇：任务管理</a></div>\n\n<div\nclass=\"right-nav\"><a\nhref=\"/help/doc/mobile/code.html\">下一篇：项目代码</a><i\nclass=\"fa\nfa-angle-right\"></i></div>\n\n</div>', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00'), ('24', '0', 'Coding App 介绍', 'https://coding.net/help/doc/mobile/index.html', '---\nlayout: post\n\ntitle: Coding App 介绍\n---\n\n\n本手册主要描述 Coding.net 旗下 coding App 产品的相关功能说明。\n\nCopyRight by Coding.net  更新时间 2015-09-1\n\n\n## 移动端 App \n\nCoding app 是基于 coding.net 网站设计的一款便捷的软件开发协作工具。可以用它来随时随地的查看 https://Coding.net 上的精彩项目、任务动态、项目文档、项目代码、冒泡社交。\n\n## 主要功能 \n\n- 任务管理\n- 项目文档\n- 项目讨论\n- 代码托管\n- 冒泡社交\n\n---\n\n\n  <div class=\"footer-nav\">\n  <div class=\"right-nav\"><a href=\"/help/doc/mobile/project.html\">下一篇：项目管理</a><i class=\"fa fa-angle-right\"></i></div>\n  </div>\n\n', '本手册主要描述\nCoding.net\n旗下\ncoding\nApp\n产品的相关功能说明。\n\n\nCopyRight\nby\nCoding.net\n更新时间\n2015-09-1\n\n\n移动端\nAPP\n\nCoding\napp\n是基于\ncoding.net\n网站设计的一款便捷的软件开发协作工具。可以用它来随时随地的查看 \nhttps://Coding.net\n[https://Coding.net] \n上的精彩项目、任务动态、项目文档、项目代码、冒泡社交。\n\n\n主要功能\n * \n   任务管理\n * \n   项目文档\n * \n   项目讨论\n * \n   代码托管\n * \n   冒泡社交\n\n\n\n\n\n<div\nclass=\"footer-nav\">\n\n<div\nclass=\"right-nav\"><a\nhref=\"/help/doc/mobile/project.html\">下一篇：项目管理</a><i\nclass=\"fa\nfa-angle-right\"></i></div>\n\n</div>', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00'), ('25', '0', '项目管理', 'https://coding.net/help/doc/mobile/project.html', '---\nlayout: post\n\ntitle: 项目管理\n---\n\n\n本章节主要描述如何在手机App上管理项目。\n\n## 项目\n Coding 首先需要创建一个项目，创建项目后可以托管代码，管理项目成员，给项目成员发任务，发起项目内讨论等。\n \n### 创建项目\n\n> 登陆之后，点击项目列表右上方的「+」，点击下拉菜单中的「项目」，即可进入新建项目操作流程。\n注意：项目一旦创建，项目属性（私有或者公开）便无法修改。\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/e9f5af0f-df33-44f6-aa38-bf3611694cb8.png) \n\n### 修改项目信息\n\n> 只有项目创建者有权修改项目信息。\n在项目首页的项目信息点击右侧「>」进入项目设置界面，只可以修改项目图标和描述。\n项目名称目前不支持更改。\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/902451fe-f550-4e59-ab35-caf85d2169d9.png) \n\n### 删除项目\n\n>只有项目创建者有权删除项目。\n在项目首页的项目信息点击右侧「>」进入项目设置界面，点击「高级设置」即可删除项目。\n删除项目将会连同其相关的所有数据（包括 issues，pull requests，动态等在内）一起删除。\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/22f3b1af-863e-4f87-bbaf-63a53da2aa17.png) \n\n### 设置常用项目\n\n>项目列表页找到某个项目左滑其列表，点击图钉即可\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/535bfbe2-635b-4e42-8291-b375c0236907.png) \n\n\n### 添加项目成员\n\n>只有项目创建者才有权限添加项目成员。\n>点击项目首页菜单列表「成员」，进入成员列表，点击导航栏右上方的「+」，即可进入添加项目成员页面，目前支持 email，用户名和唯一标识添加。\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/5fc5ef41-090f-4935-a27c-da93a062b13a.png) \n\n### 删除项目成员\n\n>只有项目创建者才有权限删除项目成员。\n>右滑某一列进行删除操作\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/3871549e-397d-44c0-9682-493f86a030ba.png) \n\n### 退出项目\n\n>进入项目成员列表，点击右侧「退出」按钮，即可退出项目\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/f46ee179-1c7b-45c3-8224-0387044c3e1c.png) \n\n---\n\n\n\n  <div class=\"footer-nav\">\n  <div class=\"left-nav\"><i class=\"fa fa-angle-left\"></i><a href=\"/help/doc/mobile/index.html\">上一篇：移动端介绍</a></div>\n  <div class=\"right-nav\"><a href=\"/help/doc/mobile/files.html\">下一篇：文件管理</a><i class=\"fa fa-angle-right\"></i></div>\n  </div>\n\n', '本章节主要描述如何在手机App上管理项目。\n\n\n项目\n\nCoding\n首先需要创建一个项目，创建项目后可以托管代码，管理项目成员，给项目成员发任务，发起项目内讨论等。\n\n\n创建项目\n\n登陆之后，点击项目列表右上方的「+」，点击下拉菜单中的「项目」，即可进入新建项目操作流程。\n\n注意：项目一旦创建，项目属性（私有或者公开）便无法修改。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/e9f5af0f-df33-44f6-aa38-bf3611694cb8.png]\n\n\n修改项目信息\n\n只有项目创建者有权修改项目信息。\n\n在项目首页的项目信息点击右侧「>」进入项目设置界面，只可以修改项目图标和描述。\n\n项目名称目前不支持更改。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/902451fe-f550-4e59-ab35-caf85d2169d9.png]\n\n\n删除项目\n\n只有项目创建者有权删除项目。\n\n在项目首页的项目信息点击右侧「>」进入项目设置界面，点击「高级设置」即可删除项目。\n\n删除项目将会连同其相关的所有数据（包括\nissues，pull\nrequests，动态等在内）一起删除。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/22f3b1af-863e-4f87-bbaf-63a53da2aa17.png]\n\n\n设置常用项目\n\n项目列表页找到某个项目左滑其列表，点击图钉即可\n\n图片 [https://dn-coding-net-production-pp.qbox.me/535bfbe2-635b-4e42-8291-b375c0236907.png]\n\n\n添加项目成员\n\n只有项目创建者才有权限添加项目成员。\n\n点击项目首页菜单列表「成员」，进入成员列表，点击导航栏右上方的「+」，即可进入添加项目成员页面，目前支持\nemail，用户名和唯一标识添加。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/5fc5ef41-090f-4935-a27c-da93a062b13a.png]\n\n\n删除项目成员\n\n只有项目创建者才有权限删除项目成员。\n\n右滑某一列进行删除操作\n\n图片 [https://dn-coding-net-production-pp.qbox.me/3871549e-397d-44c0-9682-493f86a030ba.png]\n\n\n退出项目\n\n进入项目成员列表，点击右侧「退出」按钮，即可退出项目\n\n图片 [https://dn-coding-net-production-pp.qbox.me/f46ee179-1c7b-45c3-8224-0387044c3e1c.png]\n\n\n\n\n\n<div\nclass=\"footer-nav\">\n\n<div\nclass=\"left-nav\"><i\nclass=\"fa\nfa-angle-left\"></i><a\nhref=\"/help/doc/mobile/index.html\">上一篇：移动端介绍</a></div>\n\n<div\nclass=\"right-nav\"><a\nhref=\"/help/doc/mobile/files.html\">下一篇：文件管理</a><i\nclass=\"fa\nfa-angle-right\"></i></div>\n\n</div>', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00'), ('26', '0', '文件管理', 'https://coding.net/help/doc/mobile/files.html', '---\nlayout: post\n\ntitle: 文件管理\n---\n\n本章节主要描述如何在手机App上管理项目文件。\n\n## 项目文件\n\nCoding 为每个项目提供了一个项目文件空间，可供创建和存放项目内文件。\n\n### 上传文档\n\n>点击项目首页菜单列表「文档」，进入文档列表点击某列文档进入文档详情，点击底部工具栏 「上传文档」，进入本地相册，选择你要上传的文件点击完成即可上传。\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/a3ed5e54-b33b-4c4f-80ff-0b68c05e64b9.png) \n\n### 创建文件夹\n\n>**方法一：** 在文档列表点击导航栏右上方的「+」，进入新建文件夹界面，输入文件名点击右上方「完成」创建完毕。\n>**方法二：** 在文档详情界面点击底部工具栏 「新建文件夹」，进入新建文件夹界面，输入文件名点击右上方「完成」创建完毕。\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/7527e2b3-7ad8-48e4-8c43-42771f930dea.png) \n\n### 上传文件的类型\n\n> iOS 设备只支持上传图片，单个文档不超过50M。 \n> 安卓设备支持所有格式文件的上传，单个文档不超过50M。  \n\n### 预览文件的类型\n\n>文档：Txt，md 等\n>图片：jpg，jpeg，png，gif 等\n>视频/音频：avi， mp3等\n\n### 删除项目文件夹\n\n>创建项目文档文件夹之后，要删除这个文件夹需要先删除文件夹中的所有文件直到文件夹为空，该文件夹可以被删除。\n\n### 查看文件动态和历史版本\n\n> 文件中点击你想要查看的文档（图片、md等等），文档下方即可看到文件动态和历史版本\n\n  ![图片](https://dn-coding-net-production-pp.qbox.me/0e95b877-c1c5-409c-badf-85abd29c6538.png) \n\n---\n\n\n\n\n  <div class=\"footer-nav\">\n  <div class=\"left-nav\"><i class=\"fa fa-angle-left\"></i><a href=\"/help/doc/mobile/project.html\">上一篇：项目管理</a></div>\n  <div class=\"right-nav\"><a href=\"/help/doc/mobile/task.html\">下一篇：任务管理</a><i class=\"fa fa-angle-right\"></i></div>\n  </div>\n\n', '本章节主要描述如何在手机App上管理项目文件。\n\n\n项目文件\n\nCoding\n为每个项目提供了一个项目文件空间，可供创建和存放项目内文件。\n\n\n上传文档\n\n点击项目首页菜单列表「文档」，进入文档列表点击某列文档进入文档详情，点击底部工具栏\n「上传文档」，进入本地相册，选择你要上传的文件点击完成即可上传。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/a3ed5e54-b33b-4c4f-80ff-0b68c05e64b9.png]\n\n\n创建文件夹\n\n方法一： \n在文档列表点击导航栏右上方的「+」，进入新建文件夹界面，输入文件名点击右上方「完成」创建完毕。\n\n方法二： \n在文档详情界面点击底部工具栏\n「新建文件夹」，进入新建文件夹界面，输入文件名点击右上方「完成」创建完毕。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/7527e2b3-7ad8-48e4-8c43-42771f930dea.png]\n\n\n上传文件的类型\n\niOS\n设备只支持上传图片，单个文档不超过50M。\n\n安卓设备支持所有格式文件的上传，单个文档不超过50M。\n\n\n预览文件的类型\n\n文档：Txt，md\n等\n\n图片：jpg，jpeg，png，gif\n等\n\n视频/音频：avi，\nmp3等\n\n\n删除项目文件夹\n\n创建项目文档文件夹之后，要删除这个文件夹需要先删除文件夹中的所有文件直到文件夹为空，该文件夹可以被删除。\n\n\n查看文件动态和历史版本\n\n文件中点击你想要查看的文档（图片、md等等），文档下方即可看到文件动态和历史版本\n\n图片 [https://dn-coding-net-production-pp.qbox.me/0e95b877-c1c5-409c-badf-85abd29c6538.png]\n\n\n\n\n\n<div\nclass=\"footer-nav\">\n\n<div\nclass=\"left-nav\"><i\nclass=\"fa\nfa-angle-left\"></i><a\nhref=\"/help/doc/mobile/project.html\">上一篇：项目管理</a></div>\n\n<div\nclass=\"right-nav\"><a\nhref=\"/help/doc/mobile/task.html\">下一篇：任务管理</a><i\nclass=\"fa\nfa-angle-right\"></i></div>\n\n</div>', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00'), ('27', '0', '账号的注册&激活', 'https://coding.net/help/doc/account/register.html', '---\nlayout: post\n\ntitle: 账号的注册&激活\n---\n\n本章节主要介绍如何注册 Coding 账户及相关的激活步骤。\n\n## 账户注册步骤\n\n1）访问首页 Coding.net，点击屏幕右上角的「注册」，输入您的电子邮箱和个性域名后缀，点击「直接体验」。\n\n2） 收取激活邮件，并点击其中的激活链接，按照提示完成密码设置即可顺利加入 Coding.net。\n如果长时间收不到激活邮件，请检查一下你的垃圾邮件夹，或者重新尝试一下。如果连续尝试都无法收到激活邮件，则很可能您的邮件服务器拒收了来自 Coding.net 的邮件，您需要将 Coding.net 加入域白名单以确保收到来自 Coding.net 的邮件。申请重发激活邮件链接：\n\n3）如果您点击了激活的链接确无法激活，您可以尝试复制邮件里的激活链接到您的浏览器的地址栏里去尝试，如果您依然无法激活您的账号，您可以发邮件至support@coding.net告知我们你注册的邮箱和使用的浏览器版本以及无法激活的URL我们帮您处理。\n\n### 账户登录\n\n1）注册账户后即可输入账号进行登录\n2）可以通过Coding.net 目前支持通过第三方账号 Github 账号登陆，在登录页面右下角点击 Github 小图标即可登陆。\n3）未登录时可以实现的功能\n1.首页：观看网站介绍视频，进行全站搜索等。\n2.广场: 查看最近更新的公开项目，最新的冒泡，最热门的公开项目等。\n3.项目：查看特别策划项目，主题项目等。\n\n### 重发激活邮件\n\n1）如果注册后5分钟内未收到账号激活邮件，请回到登录界面重新发送激活邮件。\n![在这里输入图片描述][1]\n\n2）依照提示，输入电子邮箱和验证码，点击「确认」\n\n![在这里输入图片描述][2]\n\n3）如果长时间收不到激活邮件，请检查一下你的垃圾邮件夹，或者重新尝试一下。如果连续尝试都无法收到激活邮件，则很可能您的邮件服务器拒收了来自 Coding.net 的邮件，您需要将 Coding.net 加入域白名单以确保收到来自 Coding.net 的邮件。\n\n4）如果您点击了激活的链接确无法激活，您可以尝试复制邮件里的激活链接到您的浏览器的地址栏里去尝试，如果您依然无法激活您的账号，您可以发邮件至support@coding.net告知我们你注册的邮箱和使用的浏览器版本我们帮您处理。\n\n### 未登录可进行的操作\n\n1）首页：观看网站介绍视频，进行全站搜索等。\n2）广场: 查看最近更新的公开项目，最新的冒泡，最热门的公开项目等。\n3）项目：查看特别策划项目，主题项目等。\n\n### 第三方账户登录\n\nCoding.net 目前支持 Github 账号登陆。\n在登录页面右下角点击 Github 小图标即可登陆。\n\n\n### 邀请好友\n\n- 定向邀请好友\n\n1.点击页面右上方的+，点击 好友\n ![图片](https://dn-coding-net-production-pp.qbox.me/ec4aa210-13fd-4e87-bbd0-3ffcd65070f6.png) \n\n2.点击马上邀请好友，输入您要邀请的好友的email\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/2de72cd6-0465-43cc-9a08-738be3dab40a.png) \n\n- 不定向邀请好友\n \n ![图片](https://dn-coding-net-production-pp.qbox.me/a9cc3f10-e8bf-49ff-ad20-23e570ed7f15.png) \n您可以复制此网址给您的好友，无需知道对方email,将您的专属邀请链接发给对方就可以啦\n\n### 私信功能\n\n全站Coding 用户可互相发私信，非互相关注的好友关系需要输入验证码才可发送，互相关注的好友则可直接发私信，无需输入验证码。\n\n### 动态\n\n荟萃各类动态，在这里您可以纵览一切活动动向。\n ![图片](https://dn-coding-net-production-pp.qbox.me/97ad25b6-8a39-4172-9d57-b236ef568a54.png) \n\n\n---\n\n\n [1]: https://coding.net/api/project/130548/files/261942/imagePreview\n  [2]: https://coding.net/api/project/130548/files/261943/imagePreview\n  [3]: https://coding.net/api/project/130548/files/261945/imagePreview\n  [4]: https://coding.net/api/project/130548/files/261946/imagePreview\n  [5]: https://coding.net/api/project/130548/files/261947/imagePreview\n  [6]: https://coding.net/api/project/130548/files/261949/imagePreview\n  [7]: https://coding.net/api/project/130548/files/261953/imagePreview\n  [8]: https://coding.net/api/project/130548/files/261954/imagePreview\n  [9]: https://coding.net/api/project/130548/files/261955/imagePreview\n  [10]: https://coding.net/api/project/130548/files/261956/imagePreview\n  [11]: https://coding.net/api/project/130548/files/261958/imagePreview\n  [12]: https://coding.net/api/project/130548/files/261959/imagePreview\n  [13]: https://coding.net/api/project/130548/files/261960/imagePreview\n  [14]: https://coding.net/api/project/130548/files/261961/imagePreview\n  [15]: https://coding.net/api/project/130548/files/261962/imagePreview\n  [16]: https://coding.net/api/project/130548/files/262582/imagePreview\n  \n  \n  <div class=\"footer-nav\">\n  <div class=\"left-nav\"><i class=\"fa fa-angle-left\"></i><a href=\"/help/doc/account/index.html\">上一篇：用户账户介绍</a></div>\n  <div class=\"right-nav\"><a href=\"/help/doc/account/setting.html\">下一篇：账户设置</a><i class=\"fa fa-angle-right\"></i></div>\n  </div>\n', '本章节主要介绍如何注册\nCoding\n账户及相关的激活步骤。\n\n\n账户注册步骤\n\n1）访问首页\nCoding.net，点击屏幕右上角的「注册」，输入您的电子邮箱和个性域名后缀，点击「直接体验」。\n\n\n2）\n收取激活邮件，并点击其中的激活链接，按照提示完成密码设置即可顺利加入\nCoding.net。\n\n如果长时间收不到激活邮件，请检查一下你的垃圾邮件夹，或者重新尝试一下。如果连续尝试都无法收到激活邮件，则很可能您的邮件服务器拒收了来自\nCoding.net\n的邮件，您需要将\nCoding.net\n加入域白名单以确保收到来自\nCoding.net\n的邮件。申请重发激活邮件链接：\n\n\n3）如果您点击了激活的链接确无法激活，您可以尝试复制邮件里的激活链接到您的浏览器的地址栏里去尝试，如果您依然无法激活您的账号，您可以发邮件至support@coding.net告知我们你注册的邮箱和使用的浏览器版本以及无法激活的URL我们帮您处理。\n\n\n账户登录\n\n1）注册账户后即可输入账号进行登录\n\n2）可以通过Coding.net\n目前支持通过第三方账号\nGithub\n账号登陆，在登录页面右下角点击\nGithub\n小图标即可登陆。\n\n3）未登录时可以实现的功能\n\n1.首页：观看网站介绍视频，进行全站搜索等。\n\n2.广场:\n查看最近更新的公开项目，最新的冒泡，最热门的公开项目等。\n\n3.项目：查看特别策划项目，主题项目等。\n\n\n重发激活邮件\n\n1）如果注册后5分钟内未收到账号激活邮件，请回到登录界面重新发送激活邮件。\n在这里输入图片描述 [https://coding.net/api/project/130548/files/261942/imagePreview]\n\n\n2）依照提示，输入电子邮箱和验证码，点击「确认」\n\n在这里输入图片描述 [https://coding.net/api/project/130548/files/261943/imagePreview]\n\n\n3）如果长时间收不到激活邮件，请检查一下你的垃圾邮件夹，或者重新尝试一下。如果连续尝试都无法收到激活邮件，则很可能您的邮件服务器拒收了来自\nCoding.net\n的邮件，您需要将\nCoding.net\n加入域白名单以确保收到来自\nCoding.net\n的邮件。\n\n\n4）如果您点击了激活的链接确无法激活，您可以尝试复制邮件里的激活链接到您的浏览器的地址栏里去尝试，如果您依然无法激活您的账号，您可以发邮件至support@coding.net告知我们你注册的邮箱和使用的浏览器版本我们帮您处理。\n\n\n未登录可进行的操作\n\n1）首页：观看网站介绍视频，进行全站搜索等。\n\n2）广场:\n查看最近更新的公开项目，最新的冒泡，最热门的公开项目等。\n\n3）项目：查看特别策划项目，主题项目等。\n\n\n第三方账户登录\n\nCoding.net\n目前支持\nGithub\n账号登陆。\n\n在登录页面右下角点击\nGithub\n小图标即可登陆。\n\n\n邀请好友\n * \n   定向邀请好友\n\n\n1.点击页面右上方的+，点击\n好友\n图片 [https://dn-coding-net-production-pp.qbox.me/ec4aa210-13fd-4e87-bbd0-3ffcd65070f6.png]\n\n\n2.点击马上邀请好友，输入您要邀请的好友的email\n\n图片 [https://dn-coding-net-production-pp.qbox.me/2de72cd6-0465-43cc-9a08-738be3dab40a.png]\n\n * \n   不定向邀请好友\n   \n   图片 [https://dn-coding-net-production-pp.qbox.me/a9cc3f10-e8bf-49ff-ad20-23e570ed7f15.png]\n   \n   您可以复制此网址给您的好友，无需知道对方email,将您的专属邀请链接发给对方就可以啦\n   \n   \n\n\n私信功能\n\n全站Coding\n用户可互相发私信，非互相关注的好友关系需要输入验证码才可发送，互相关注的好友则可直接发私信，无需输入验证码。\n\n\n动态\n\n荟萃各类动态，在这里您可以纵览一切活动动向。\n图片 [https://dn-coding-net-production-pp.qbox.me/97ad25b6-8a39-4172-9d57-b236ef568a54.png]\n\n\n\n\n\n<div\nclass=\"footer-nav\">\n\n<div\nclass=\"left-nav\"><i\nclass=\"fa\nfa-angle-left\"></i><a\nhref=\"/help/doc/account/index.html\">上一篇：用户账户介绍</a></div>\n\n<div\nclass=\"right-nav\"><a\nhref=\"/help/doc/account/setting.html\">下一篇：账户设置</a><i\nclass=\"fa\nfa-angle-right\"></i></div>\n\n</div>', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00'), ('28', '0', 'Coding App 帮助手册', 'https://coding.net/help/doc/mobile/mobile.html', '---\nlayout: post\n\ntitle: Coding App 帮助手册\n---\n\n1.Coding App 帮助手册 \n-----\n\n本手册主要描述 Coding.net 旗下 coding App 产品的相关功能说明。\n\nCopyRight by Coding.net  更新时间 2015-07-28\n\n2.关于 Coding App \n-----\n\n### 2.1 移动端 App ###\n\nCoding app 是基于 coding.net 网站设计的一款便捷的软件开发协作工具。可以用它来随时随地的查看 https://Coding.net 上的精彩项目、任务动态、项目文档、项目代码、冒泡社交。\n\n### 2.2 主要功能 ###\n\n- 任务管理\n- 项目文档\n- 项目讨论\n- 代码托管\n- 冒泡社交\n\n3.功能介绍\n--------\n\n### 3.1 项目\n Coding 首先需要创建一个项目，创建项目后可以托管代码，管理项目成员，给项目成员发任务，发起项目内讨论等。\n \n - 3.1.1 创建项目\n\n> 登陆之后，点击项目列表右上方的「+」，点击下拉菜单中的「项目」，即可进入新建项目操作流程。\n注意：项目一旦创建，项目属性（私有或者公开）便无法修改。\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/e9f5af0f-df33-44f6-aa38-bf3611694cb8.png) \n\n - 3.1.2 修改项目信息\n\n> 只有项目创建者有权修改项目信息。\n在项目首页的项目信息点击右侧「>」进入项目设置界面，只可以修改项目图标和描述。\n项目名称目前不支持更改。\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/902451fe-f550-4e59-ab35-caf85d2169d9.png) \n\n - 3.1.3 删除项目\n\n>只有项目创建者有权删除项目。\n在项目首页的项目信息点击右侧「>」进入项目设置界面，点击「高级设置」即可删除项目。\n删除项目将会连同其相关的所有数据（包括 issues，pull requests，动态等在内）一起删除。\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/22f3b1af-863e-4f87-bbaf-63a53da2aa17.png) \n\n - 3.1.4 设置常用项目\n\n>项目列表页找到某个项目左滑其列表，点击图钉即可\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/535bfbe2-635b-4e42-8291-b375c0236907.png) \n\n\n### 3.2 项目文件\n\nCoding 为每个项目提供了一个项目文件空间，可供创建和存放项目内文件。\n\n#### 3.2.1 上传文档\n\n>点击项目首页菜单列表「文档」，进入文档列表点击某列文档进入文档详情，点击底部工具栏 「上传文档」，进入本地相册，选择你要上传的文件点击完成即可上传。\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/a3ed5e54-b33b-4c4f-80ff-0b68c05e64b9.png) \n\n#### 3.2.2 创建文件夹\n\n>**方法一：** 在文档列表点击导航栏右上方的「+」，进入新建文件夹界面，输入文件名点击右上方「完成」创建完毕。\n>**方法二：** 在文档详情界面点击底部工具栏 「新建文件夹」，进入新建文件夹界面，输入文件名点击右上方「完成」创建完毕。\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/7527e2b3-7ad8-48e4-8c43-42771f930dea.png) \n\n#### 3.2.3 上传文件的类型\n\n> iOS 设备只支持上传图片，单个文档不超过50M。 \n> 安卓设备支持所有格式文件的上传，单个文档不超过50M。  \n\n#### 3.2.4 预览文件的类型\n\n>文档：Txt，md 等\n>图片：jpg，jpeg，png，gif 等\n>视频/音频：avi， mp3等\n\n#### 3.2.5 删除项目文件夹\n\n>创建项目文档文件夹之后，要删除这个文件夹需要先删除文件夹中的所有文件直到文件夹为空，该文件夹可以被删除。\n\n### 3.3 项目成员 \n\n#### 3.3.1 添加项目成员\n\n>只有项目创建者才有权限添加项目成员。\n>点击项目首页菜单列表「成员」，进入成员列表，点击导航栏右上方的「+」，即可进入添加项目成员页面，目前支持 email，用户名和唯一标识添加。\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/5fc5ef41-090f-4935-a27c-da93a062b13a.png) \n\n#### 3.3.2 删除项目成员\n\n>只有项目创建者才有权限删除项目成员。\n>右滑某一列进行删除操作\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/3871549e-397d-44c0-9682-493f86a030ba.png) \n\n#### 3.3.3 退出项目\n\n>进入项目成员列表，点击右侧「退出」按钮，即可退出项目\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/f46ee179-1c7b-45c3-8224-0387044c3e1c.png) \n\n### 3.4 项目任务 \n\n#### 3.4.1 创建和指派任务\n\n>**方法一：**项目列表点击导航栏右上角「+」，进入快捷功能界面，点击「任务」进入创建任务界面，输入任务内容，选择所属项目以及执行者并点击右上角「完成」即可创建任务。\n\n>**方法二：**点击项目首页菜单列表「任务」，进入任务列表点击导航栏右上角「+」进入创建任务界面，输入任务内容，选择执行者并点击右上角「完成」即可创建任务。\n\n>**方法三：**去往「我的任务」，进入任务列表点击导航栏右上角「+」进入创建任务界面，输入任务内容，选择执行者并点击右上角「完成」即可创建任务。\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/cea5247f-6cb2-4702-b563-9bdb4e70c384.png) \n ![图片](https://dn-coding-net-production-pp.qbox.me/cd3ef1b3-acb2-4f4e-9772-0738fed99f92.png) \n\n\n#### 3.4.4 添加任务描述\n\n>可进入任务详情在任务内容下方点击「补充描述」，进入描述编辑界面\n>>描述的文本输入支持 Markdown 语法以及预览功能。\n\n#### 3.4.5  删除任务\n\n>能，进入任务详情，点击任务内容右侧「删除」按钮进行删除\n>注意，项目内成员不能删除他人创建的任务（项目创建者除外）\n\n### 3.5 项目讨论 \n\n#### 3.5.1 创建讨论\n\n>点击项目首页菜单列表「讨论」，进入讨论列表点击导航栏右上角「+」，进入讨论编辑界面\n>讨论的文本输入支持 Markdown 语法以及预览功能。\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/6273828a-b5cf-43fb-ac20-6f4fe87ed72f.png) \n\n#### 3.5.2 编辑或者删除讨论\n\n>只有项目创建者和该讨论发起者可以编辑或删除已存在的讨论。\n>在已创建的讨论页面的导航栏右上角，点击「编辑」进入讨论编辑界面\n>在已创建的讨论页面评论处点击「删除」按钮即可删除该讨论 \n\n ![图片](https://dn-coding-net-production-pp.qbox.me/a4550be7-3fe0-420b-841a-fcfa1ab988ee.png)\n\n#### 3.5.3 添加讨论标签\n\n>在讨论编辑界面或者讨论详情界面点击便签右侧「+」，进入标签管理界面，选择对应的标签点击完成即可。\n\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/9ddae0ea-bda7-46fb-8eab-35a3b5da50c1.png) \n\n#### 3.5.4 查看或回复讨论权限\n\n>只有项目成员可以查看或回复已存在的讨论。\n>Tips：项目讨论中评论框只可以@项目成员。\n\n\n### 3.6 个人中心 \n\n#### 3.6.1 个人信息修改\n\n> 去往「我」点击「详细信息」，即可进入个人信息编辑界面修改头像、昵称、性别、所在地、座右铭、公司、职位以及个性标签。\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/814368ec-ccd8-4efc-ac11-458edadc3187.png) \n\n#### 3.6.2 添加好友\n\n>**方法一：**去往「我」点击左上角添加好友按钮，进入添加好友界面，输入昵称或个性后缀，点击关注即可。\n>**方法二：**去往「消息」点击右上角按钮，进入我的好友列表页，点击添加好友按钮，进入添加好友界面，输入昵称或个性后缀，点击关注即可。\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/a43c8991-50b7-4e28-ad36-ffb2a81f9835.png) \n\n#### 3.6.2 修改登录密码\n\n> 去往「我」点击右上角设置图标，进入设置页面点击「账号设置」在账号信息界面点击「修改密码」即可。\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/ecf965cb-487d-45e5-a2ef-6765a6ff78b3.png)\n\n\n### 3.7 代码托管 \n\n#### 项目广场和公开项目\n\n>客户端暂时还没有提供项目广场的入口，您可以去往好友的个人中心找到「Ta 的项目」，即可查看好友的公开项目。\n\n>进入公开项目首页，点击「Fork」按钮，会提示 ：Fork 后此项目会复制到你的个人空间，确定要 Fork 吗” 点击「Fork」即可，Fork 成功后将跳往复制后的新项目首页。\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/c0da44f8-407e-4433-8b29-c64177da6d3a.png) \n\n#### 3.7.1 查看代码分支和标签\n\n>点击项目首页菜单列表「代码」，进入代码子目录列表点击底部 button 弹出列表框，即可手动切换分支和标签。\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/9a83bdd6-c53d-4e42-800c-0290b7773928.png) \n\n#### 3.7.2 查看提交历史\n\n>点击项目首页菜单列表「代码」，进入代码子目录列表点击右上角时钟 icon 即可进入「提交历史」列表。\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/71912382-6142-44bc-a07d-bf6faa3aff33.png) \n\n#### 3.7.3 合并 Pull Request / Merge Request \n\n> 有权限操作分支的项目成员可进行 “合并”、“拒绝” 操作\n> 有权限操作分支的项目成员和 PR/MR 发起人若是同一人（ “合并”、“拒绝”、 “取消”皆可操作） \n> 非项目成员的 PR/MR 发起人只可进行 “取消” 操作\n\n#### 3.7.4 代码改动及前后代码比对\n\n> 进入某个  PR/MR 详情，点击查看「文件改动」，进入文件改动列表，点击某一个文件即可查看修改详情，绿色代表增加了一行代码，红色代表删减了某行代码。\n> 在文件改动详情界面，点击右上角「查看文件」即可查看某个提交的文件代码前后对比。\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/3a68c32d-cbb2-4f7a-ab0b-ef15317b44b8.png) \n\n\n### 3.8 冒泡 \n\n#### 3.8.1 自定义地理位置\n\n> 进入发冒泡界面点击「所在位置」，进入位置列表界面点击搜索框输入你的位置名称，搜索\n\n#### 3.8.1 话题发布\n\n> 在发表冒泡界面点击「#」，进入话题推荐列表选择你想要发表的话题即可\n> 同事支持手动输入话题\n\n#### 3.8.1 关注话题\n\n> 进入冒泡列表界面点击「搜索」，进入搜索界面，点击「热门话题」去往话题列表，点击任一话题，进入话题详情，点击右上角「关注」即可\n\n### 3.9 两步验证 \n\n#### 3.9.1 什么是两步验证\n\n> 用户开启两步验证后，在登录 coding.net 或进行危险操作（如删除项目、转让项目、升级项目、关闭两步验证功能等） 的时候，输入电子邮箱或个性后缀和登录密码之后，必须再输入用户手机 Coding 客户端（或 Google 身份验证器）生成的动态验证码进行两步验证，以保护账户安全。\n\n#### 3.9.2 开启两步验证\n\n> 1. 登录 coding.net 进入个人账户，需要先在个人设置里面验证手机号码后，才能开启两步验证，验证完成后，选择两步验证，在两步验证界面点击「开启两步验证」；\n> 2. 根据 web 端两步验证流程，打开 Coding 客户端点击项目列表右上方的「+」，点击下拉菜单中的「两步验证」，进入身份验证器界面点击「开始验证」扫描 web 端二维码；\n> 3. 扫描成功后，将身份验证器的动态密码输入至 web 端并点击「验证并开启」，并输入登录密码，点击「确认」两步验证成功开启。\n\n> 注意：开启两步验证后，需要重新登录。Coding 客户端身份验证器生成的动态验证码会自动填充，登录成功即完成开启两步验证。\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/d4459546-10b6-4d63-a5ef-de4963bd14ad.png)\n\n#### 3.9.3 关闭两步验证\n  \n>登录 coding.net 进入个人账户页面，选择两步验证，点击「关闭两步验证」，输入 Coding 客户端身份验证器生成的动态验证码，即可关闭两步验证。\n\n  -   丢失了两步验证的身份验证器，该怎么办？\n>可以用您的注册邮箱发送一封邮件到 support@coding.net，并附上您的电话联系方式，客服会在24小时以内联系您，帮助关闭两步验证。', '1.CODING\nAPP\n帮助手册\n\n本手册主要描述\nCoding.net\n旗下\ncoding\nApp\n产品的相关功能说明。\n\n\nCopyRight\nby\nCoding.net\n更新时间\n2015-07-28\n\n\n2.关于\nCODING\nAPP\n\n2.1\n移动端\nAPP\n\nCoding\napp\n是基于\ncoding.net\n网站设计的一款便捷的软件开发协作工具。可以用它来随时随地的查看 \nhttps://Coding.net\n[https://Coding.net] \n上的精彩项目、任务动态、项目文档、项目代码、冒泡社交。\n\n\n2.2\n主要功能\n * \n   任务管理\n * \n   项目文档\n * \n   项目讨论\n * \n   代码托管\n * \n   冒泡社交\n\n\n3.功能介绍\n\n3.1\n项目\n\nCoding\n首先需要创建一个项目，创建项目后可以托管代码，管理项目成员，给项目成员发任务，发起项目内讨论等。\n\n * \n   3.1.1\n   创建项目\n\n\n登陆之后，点击项目列表右上方的「+」，点击下拉菜单中的「项目」，即可进入新建项目操作流程。\n\n注意：项目一旦创建，项目属性（私有或者公开）便无法修改。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/e9f5af0f-df33-44f6-aa38-bf3611694cb8.png]\n\n * \n   3.1.2\n   修改项目信息\n\n\n只有项目创建者有权修改项目信息。\n\n在项目首页的项目信息点击右侧「>」进入项目设置界面，只可以修改项目图标和描述。\n\n项目名称目前不支持更改。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/902451fe-f550-4e59-ab35-caf85d2169d9.png]\n\n * \n   3.1.3\n   删除项目\n\n\n只有项目创建者有权删除项目。\n\n在项目首页的项目信息点击右侧「>」进入项目设置界面，点击「高级设置」即可删除项目。\n\n删除项目将会连同其相关的所有数据（包括\nissues，pull\nrequests，动态等在内）一起删除。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/22f3b1af-863e-4f87-bbaf-63a53da2aa17.png]\n\n * \n   3.1.4\n   设置常用项目\n\n\n项目列表页找到某个项目左滑其列表，点击图钉即可\n\n图片 [https://dn-coding-net-production-pp.qbox.me/535bfbe2-635b-4e42-8291-b375c0236907.png]\n\n\n3.2\n项目文件\n\nCoding\n为每个项目提供了一个项目文件空间，可供创建和存放项目内文件。\n\n\n3.2.1\n上传文档\n\n点击项目首页菜单列表「文档」，进入文档列表点击某列文档进入文档详情，点击底部工具栏\n「上传文档」，进入本地相册，选择你要上传的文件点击完成即可上传。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/a3ed5e54-b33b-4c4f-80ff-0b68c05e64b9.png]\n\n\n3.2.2\n创建文件夹\n\n方法一： \n在文档列表点击导航栏右上方的「+」，进入新建文件夹界面，输入文件名点击右上方「完成」创建完毕。\n\n方法二： \n在文档详情界面点击底部工具栏\n「新建文件夹」，进入新建文件夹界面，输入文件名点击右上方「完成」创建完毕。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/7527e2b3-7ad8-48e4-8c43-42771f930dea.png]\n\n\n3.2.3\n上传文件的类型\n\niOS\n设备只支持上传图片，单个文档不超过50M。\n\n安卓设备支持所有格式文件的上传，单个文档不超过50M。\n\n\n3.2.4\n预览文件的类型\n\n文档：Txt，md\n等\n\n图片：jpg，jpeg，png，gif\n等\n\n视频/音频：avi，\nmp3等\n\n\n3.2.5\n删除项目文件夹\n\n创建项目文档文件夹之后，要删除这个文件夹需要先删除文件夹中的所有文件直到文件夹为空，该文件夹可以被删除。\n\n\n3.3\n项目成员\n\n3.3.1\n添加项目成员\n\n只有项目创建者才有权限添加项目成员。\n\n点击项目首页菜单列表「成员」，进入成员列表，点击导航栏右上方的「+」，即可进入添加项目成员页面，目前支持\nemail，用户名和唯一标识添加。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/5fc5ef41-090f-4935-a27c-da93a062b13a.png]\n\n\n3.3.2\n删除项目成员\n\n只有项目创建者才有权限删除项目成员。\n\n右滑某一列进行删除操作\n\n图片 [https://dn-coding-net-production-pp.qbox.me/3871549e-397d-44c0-9682-493f86a030ba.png]\n\n\n3.3.3\n退出项目\n\n进入项目成员列表，点击右侧「退出」按钮，即可退出项目\n\n图片 [https://dn-coding-net-production-pp.qbox.me/f46ee179-1c7b-45c3-8224-0387044c3e1c.png]\n\n\n3.4\n项目任务\n\n3.4.1\n创建和指派任务\n\n方法一： \n项目列表点击导航栏右上角「+」，进入快捷功能界面，点击「任务」进入创建任务界面，输入任务内容，选择所属项目以及执行者并点击右上角「完成」即可创建任务。\n\n\n方法二： \n点击项目首页菜单列表「任务」，进入任务列表点击导航栏右上角「+」进入创建任务界面，输入任务内容，选择执行者并点击右上角「完成」即可创建任务。\n\n\n方法三： \n去往「我的任务」，进入任务列表点击导航栏右上角「+」进入创建任务界面，输入任务内容，选择执行者并点击右上角「完成」即可创建任务。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/cea5247f-6cb2-4702-b563-9bdb4e70c384.png]\n图片 [https://dn-coding-net-production-pp.qbox.me/cd3ef1b3-acb2-4f4e-9772-0738fed99f92.png]\n\n\n3.4.4\n添加任务描述\n\n可进入任务详情在任务内容下方点击「补充描述」，进入描述编辑界面\n\n\n描述的文本输入支持\nMarkdown\n语法以及预览功能。\n\n\n3.4.5\n删除任务\n\n能，进入任务详情，点击任务内容右侧「删除」按钮进行删除\n\n注意，项目内成员不能删除他人创建的任务（项目创建者除外）\n\n\n3.5\n项目讨论\n\n3.5.1\n创建讨论\n\n点击项目首页菜单列表「讨论」，进入讨论列表点击导航栏右上角「+」，进入讨论编辑界面\n\n讨论的文本输入支持\nMarkdown\n语法以及预览功能。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/6273828a-b5cf-43fb-ac20-6f4fe87ed72f.png]\n\n\n3.5.2\n编辑或者删除讨论\n\n只有项目创建者和该讨论发起者可以编辑或删除已存在的讨论。\n\n在已创建的讨论页面的导航栏右上角，点击「编辑」进入讨论编辑界面\n\n在已创建的讨论页面评论处点击「删除」按钮即可删除该讨论\n\n图片 [https://dn-coding-net-production-pp.qbox.me/a4550be7-3fe0-420b-841a-fcfa1ab988ee.png]\n\n\n3.5.3\n添加讨论标签\n\n在讨论编辑界面或者讨论详情界面点击便签右侧「+」，进入标签管理界面，选择对应的标签点击完成即可。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/9ddae0ea-bda7-46fb-8eab-35a3b5da50c1.png]\n\n\n3.5.4\n查看或回复讨论权限\n\n只有项目成员可以查看或回复已存在的讨论。\n\nTips：项目讨论中评论框只可以@项目成员。\n\n\n3.6\n个人中心\n\n3.6.1\n个人信息修改\n\n去往「我」点击「详细信息」，即可进入个人信息编辑界面修改头像、昵称、性别、所在地、座右铭、公司、职位以及个性标签。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/814368ec-ccd8-4efc-ac11-458edadc3187.png]\n\n\n3.6.2\n添加好友\n\n方法一： \n去往「我」点击左上角添加好友按钮，进入添加好友界面，输入昵称或个性后缀，点击关注即可。\n\n方法二： \n去往「消息」点击右上角按钮，进入我的好友列表页，点击添加好友按钮，进入添加好友界面，输入昵称或个性后缀，点击关注即可。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/a43c8991-50b7-4e28-ad36-ffb2a81f9835.png]\n\n\n3.6.2\n修改登录密码\n\n去往「我」点击右上角设置图标，进入设置页面点击「账号设置」在账号信息界面点击「修改密码」即可。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/ecf965cb-487d-45e5-a2ef-6765a6ff78b3.png]\n\n\n3.7\n代码托管\n\n项目广场和公开项目\n\n客户端暂时还没有提供项目广场的入口，您可以去往好友的个人中心找到「Ta\n的项目」，即可查看好友的公开项目。\n\n\n进入公开项目首页，点击「Fork」按钮，会提示\n：Fork\n后此项目会复制到你的个人空间，确定要\nFork\n吗”\n点击「Fork」即可，Fork\n成功后将跳往复制后的新项目首页。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/c0da44f8-407e-4433-8b29-c64177da6d3a.png]\n\n\n3.7.1\n查看代码分支和标签\n\n点击项目首页菜单列表「代码」，进入代码子目录列表点击底部\nbutton\n弹出列表框，即可手动切换分支和标签。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/9a83bdd6-c53d-4e42-800c-0290b7773928.png]\n\n\n3.7.2\n查看提交历史\n\n点击项目首页菜单列表「代码」，进入代码子目录列表点击右上角时钟\nicon\n即可进入「提交历史」列表。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/71912382-6142-44bc-a07d-bf6faa3aff33.png]\n\n\n3.7.3\n合并\nPULL\nREQUEST\n/\nMERGE\nREQUEST\n\n有权限操作分支的项目成员可进行\n“合并”、“拒绝”\n操作\n\n有权限操作分支的项目成员和\nPR/MR\n发起人若是同一人（\n“合并”、“拒绝”、\n“取消”皆可操作）\n\n非项目成员的\nPR/MR\n发起人只可进行\n“取消”\n操作\n\n\n3.7.4\n代码改动及前后代码比对\n\n进入某个\nPR/MR\n详情，点击查看「文件改动」，进入文件改动列表，点击某一个文件即可查看修改详情，绿色代表增加了一行代码，红色代表删减了某行代码。\n\n在文件改动详情界面，点击右上角「查看文件」即可查看某个提交的文件代码前后对比。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/3a68c32d-cbb2-4f7a-ab0b-ef15317b44b8.png]\n\n\n3.8\n冒泡\n\n3.8.1\n自定义地理位置\n\n进入发冒泡界面点击「所在位置」，进入位置列表界面点击搜索框输入你的位置名称，搜索\n\n\n3.8.1\n话题发布\n\n在发表冒泡界面点击「#」，进入话题推荐列表选择你想要发表的话题即可\n\n同事支持手动输入话题\n\n\n3.8.1\n关注话题\n\n进入冒泡列表界面点击「搜索」，进入搜索界面，点击「热门话题」去往话题列表，点击任一话题，进入话题详情，点击右上角「关注」即可\n\n\n3.9\n两步验证\n\n3.9.1\n什么是两步验证\n\n用户开启两步验证后，在登录\ncoding.net\n或进行危险操作（如删除项目、转让项目、升级项目、关闭两步验证功能等）\n的时候，输入电子邮箱或个性后缀和登录密码之后，必须再输入用户手机\nCoding\n客户端（或\nGoogle\n身份验证器）生成的动态验证码进行两步验证，以保护账户安全。\n\n\n3.9.2\n开启两步验证\n 1. \n    登录\n    coding.net\n    进入个人账户，需要先在个人设置里面验证手机号码后，才能开启两步验证，验证完成后，选择两步验证，在两步验证界面点击「开启两步验证」；\n 2. \n    根据\n    web\n    端两步验证流程，打开\n    Coding\n    客户端点击项目列表右上方的「+」，点击下拉菜单中的「两步验证」，进入身份验证器界面点击「开始验证」扫描\n    web\n    端二维码；\n 3. \n    扫描成功后，将身份验证器的动态密码输入至\n    web\n    端并点击「验证并开启」，并输入登录密码，点击「确认」两步验证成功开启。\n\n\n注意：开启两步验证后，需要重新登录。Coding\n客户端身份验证器生成的动态验证码会自动填充，登录成功即完成开启两步验证。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/d4459546-10b6-4d63-a5ef-de4963bd14ad.png]\n\n\n3.9.3\n关闭两步验证\n\n登录\ncoding.net\n进入个人账户页面，选择两步验证，点击「关闭两步验证」，输入\nCoding\n客户端身份验证器生成的动态验证码，即可关闭两步验证。\n\n * \n   丢失了两步验证的身份验证器，该怎么办？\n   可以用您的注册邮箱发送一封邮件到\n   support@coding.net，并附上您的电话联系方式，客服会在24小时以内联系您，帮助关闭两步验证。', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00'), ('29', '0', '演示平台介绍', 'https://coding.net/help/doc/paas/index.html', '---\nlayout: post\n\ntitle: 演示平台介绍\n---\n\n本手册主要描述 Coding.net 旗下演示平台的相关功能说明。\nCopyRight by Coding.net  更新时间 2015-09-01\n\n### 演示平台 ###\n\n演示平台是 Coding.net 基于 Cloud Foundry 研发的一款应用部署 PaaS 平台，可以将程序部署运行在上面。\n支持主流的语言和框架，具体语言和框架支持请查询：http://docs.coding.io/\n\n\n### 演示平台用处 ###\n\n演示平台可以将托管在 Coding 的项目代码进行部署运行，方便程序在公网测试和在线演示展示。\n\nCoding 演示平台提供在线的公网运行环境和相关基础服务，如数据库服务，缓存服务，文件系统服务等。\n\n用户可以在演示平台方便运行展示你的项目demo，包括 Web 网站，移动 H5 页面， 移动 App 后台等等。\n\n\n### 演示平台主要功能###\n\n - 一键部署\n - 在线运行演示，免费版本24小时无访问挂起\n - 支持 coding.io 二级域名访问和独立域名(需选择香港服务器)\n - 提供第三方基础服务( DB, Redis, FileSystem )\n \n\n附录\n---\n\n语言支持\n\n以下是演示平台目前支持的语言和示例项目，点击语言名称 可查看该语言文档，更多示例应用 »\n\n语言|	示例\n---| :----: \n[Java](http://docs.coding.io/languages/java/)	 | [Servlet](https://coding.net/u/demo/p/java-hello) [Spring](https://coding.net/u/demo/p/spring-hello)\n[Ruby](http://docs.coding.io/languages/ruby/) | [Sinatra](https://coding.net/u/demo/p/ruby-hello) [Rails](https://coding.net/u/demo/p/rails-hello)\n[Node.js](http://docs.coding.io/languages/nodejs/) | [Node](https://coding.net/u/demo/p/node-hello) [Express](https://coding.net/u/demo/p/express-hello) [2048 Static](https://coding.net/u/demo/p/node-2048)\n[Go](http://docs.coding.io/languages/go/) |	[Go](https://coding.net/u/demo/p/go-hello) [Revel](https://coding.net/u/demo/p/revel-chat) \n[PHP](http://docs.coding.io/languages/php/) |	[PHP](https://coding.net/u/demo/p/php-hello) [WordPress](https://coding.net/u/demo/p/php-wordpress)\n[Python](http://docs.coding.io/languages/python/) | [Flask](https://coding.net/u/demo/p/python-hello) [Tornado](https://coding.net/u/demo/p/python-tornado)\n[Scala](http://docs.coding.io/languages/scala/) | [Scalatra](https://coding.net/u/demo/p/scala-hello) [Play! 1.x](https://coding.net/u/demo/p/play-hello) [Play! 2.x](https://coding.net/u/demo/p/play2-hello)\n[HTML](http://docs.coding.io/languages/html/) | [Static](https://coding.net/u/demo/p/static-site) [Jekyll](https://coding.net/u/bluishoul/p/static-web)\n\n服务支持\n\n以下是演示平台目前提供的第三方服务，点击服务名称 可查看该服务文档：\n\n服务|  使用场景\n----|---|---\n[MySQL](http://docs.coding.io/services/mysql/) |	关系型数据库 (RDBMS)  \n[PostgreSQL](http://docs.coding.io/services/postgresql/)	| 关系型数据库 (RDBMS)   \n[Redis](http://docs.coding.io/services/redis/) | 键值对缓存和存储 (key-value cache and store)  \n[MongoDB](http://docs.coding.io/services/mongodb/) | 文档数据库 (document database)  \n[Filesystem](http://docs.coding.io/services/filesystem/) | 文件持久化 (persistent filesystem)  \n\n示例项目：[Demo](https://coding.net/u/demo/p/node-2048)\n\n相关参考资料： \n[演示平台部署文档](http://docs.coding.io)\n\n---\n\n\n  <div class=\"footer-nav\">\n  <div class=\"right-nav\"><a href=\"/help/doc/paas/getting-started.html\">下一篇：开始使用演示</a><i class=\"fa fa-angle-right\"></i></div>\n  </div>\n\n', '本手册主要描述\nCoding.net\n旗下演示平台的相关功能说明。\n\nCopyRight\nby\nCoding.net\n更新时间\n2015-09-01\n\n\n演示平台\n\n演示平台是\nCoding.net\n基于\nCloud\nFoundry\n研发的一款应用部署\nPaaS\n平台，可以将程序部署运行在上面。\n\n支持主流的语言和框架，具体语言和框架支持请查询： \nhttp://docs.coding.io/\n[http://docs.coding.io/]\n\n\n演示平台用处\n\n演示平台可以将托管在\nCoding\n的项目代码进行部署运行，方便程序在公网测试和在线演示展示。\n\n\nCoding\n演示平台提供在线的公网运行环境和相关基础服务，如数据库服务，缓存服务，文件系统服务等。\n\n\n用户可以在演示平台方便运行展示你的项目demo，包括\nWeb\n网站，移动\nH5\n页面，\n移动\nApp\n后台等等。\n\n\n演示平台主要功能\n * \n   一键部署\n * \n   在线运行演示，免费版本24小时无访问挂起\n * \n   支持\n   coding.io\n   二级域名访问和独立域名(需选择香港服务器)\n * \n   提供第三方基础服务(\n   DB,\n   Redis,\n   FileSystem\n   )\n\n\n附录\n\n语言支持\n\n\n以下是演示平台目前支持的语言和示例项目，点击语言名称\n可查看该语言文档，更多示例应用\n»\n\n\n语言 \n示例 \nJava\n[http://docs.coding.io/languages/java/] \nServlet\n[https://coding.net/u/demo/p/java-hello] \nSpring\n[https://coding.net/u/demo/p/spring-hello] \nRuby\n[http://docs.coding.io/languages/ruby/] \nSinatra\n[https://coding.net/u/demo/p/ruby-hello] \nRails\n[https://coding.net/u/demo/p/rails-hello] \nNode.js\n[http://docs.coding.io/languages/nodejs/] \nNode\n[https://coding.net/u/demo/p/node-hello] \nExpress\n[https://coding.net/u/demo/p/express-hello] \n2048\nStatic\n[https://coding.net/u/demo/p/node-2048] \nGo\n[http://docs.coding.io/languages/go/] \nGo\n[https://coding.net/u/demo/p/go-hello] \nRevel\n[https://coding.net/u/demo/p/revel-chat] \nPHP\n[http://docs.coding.io/languages/php/] \nPHP\n[https://coding.net/u/demo/p/php-hello] \nWordPress\n[https://coding.net/u/demo/p/php-wordpress] \nPython\n[http://docs.coding.io/languages/python/] \nFlask\n[https://coding.net/u/demo/p/python-hello] \nTornado\n[https://coding.net/u/demo/p/python-tornado] \nScala\n[http://docs.coding.io/languages/scala/] \nScalatra\n[https://coding.net/u/demo/p/scala-hello] \nPlay!\n1.x\n[https://coding.net/u/demo/p/play-hello] \nPlay!\n2.x\n[https://coding.net/u/demo/p/play2-hello] \nHTML\n[http://docs.coding.io/languages/html/] \nStatic\n[https://coding.net/u/demo/p/static-site] \nJekyll\n[https://coding.net/u/bluishoul/p/static-web]\n服务支持\n\n\n以下是演示平台目前提供的第三方服务，点击服务名称\n可查看该服务文档：\n\n\n服务 \n使用场景 \nMySQL\n[http://docs.coding.io/services/mysql/] \n关系型数据库\n(RDBMS) \nPostgreSQL\n[http://docs.coding.io/services/postgresql/] \n关系型数据库\n(RDBMS) \nRedis\n[http://docs.coding.io/services/redis/] \n键值对缓存和存储\n(key-value\ncache\nand\nstore) \nMongoDB\n[http://docs.coding.io/services/mongodb/] \n文档数据库\n(document\ndatabase) \nFilesystem\n[http://docs.coding.io/services/filesystem/] \n文件持久化\n(persistent\nfilesystem)\n示例项目： \nDemo\n[https://coding.net/u/demo/p/node-2048]\n\n\n相关参考资料：\n\n演示平台部署文档\n[http://docs.coding.io]\n\n\n\n\n\n<div\nclass=\"footer-nav\">\n\n<div\nclass=\"right-nav\"><a\nhref=\"/help/doc/paas/getting-started.html\">下一篇：开始使用演示</a><i\nclass=\"fa\nfa-angle-right\"></i></div>\n\n</div>', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00'), ('30', '0', '演示平台使用手册', 'https://coding.net/help/doc/paas/paas.html', '---\nlayout: post\n\ntitle: 演示平台使用手册\n---\n\n\n1. 演示平台手册 \n-----\n\n本手册主要描述 Coding.net 旗下 演示平台的相关功能说明。\n\n相关参考资料： \n[演示平台部署文档](http://docs.coding.io)\n\nCopyRight by Coding.net  更新时间 2015-09-01\n\n\n2. 关于演示平台\n--------\n\n### 2.1 演示平台 ###\n\n演示平台是 Coding.net 基于 Cloud Foundry 研发的一款应用部署 PaaS 平台，可以将程序部署运行在上面。\n支持主流的语言和框架，具体语言和框架支持请查询：http://docs.coding.io/\n\n\n\n\n### 2.2 演示平台用处 ###\n\n演示平台可以将托管在 Coding 的项目代码进行部署运行，方便程序在公网测试和在线演示展示。\n\nCoding 演示平台提供在线的公网运行环境和相关基础服务，如数据库服务，缓存服务，文件系统服务等。\n\n用户可以在演示平台方便运行展示你的项目demo，包括 Web 网站，移动 H5 页面， 移动 App 后台等等。\n\n\n### 2.3 演示平台主要功能###\n\n - 一键部署\n - 在线运行演示，免费版本24小时无访问挂起\n - 支持 coding.io 二级域名访问和独立域名(需选择香港服务器)\n - 提供第三方基础服务( DB, Redis, FileSystem )\n\n3. 功能介绍\n--------\n\n### 3.1 开启演示 ###\n\n#### 3.1.1 前提条件\n\n  - Git 仓库不为空\n  - 通过项目部署检测，代码仓库有相应的文件。\n  - 拥有开启演示的权限( 目前只有项目拥有者 )\n\n具体语言依赖以 Java 为例：\n\n要求项目为 Maven 的 webapp 项目， 且项目根目录下必须存在 pom.xml 文件。\n同时，项目还需要配置好 maven-war-plugin 插件， 以保证执行构建的时候可以生成 war 包。\n详情可以参见 Java 语言支持：http://docs.coding.io/languages/java/\n\n  - 项目演示功能仅作演示之用，不支持高并发访问。\n  - 不作任何 SLA 保证，请不要在演示平台存储重要数据。\n\n> **Demo**：\n\n>登录到 Coding，打开公开项目 https://coding.net/u/demo/p/java-hello/git，点击右上角的 Fork 按钮将此项目 Fork 到你的账户里。\n这样就 Fork 了一个 java-hello 的公开项目到你项目空间。\n\n也可以创建你自己的私有项目。\n\n### 3.1.2 开启演示\n\n打开 Fork 后项目的 **演示** Tab，点击页面最下面检测应用下的 **开始检测** 按钮，系统会自动检测出此项目的语言：\n\n![开启演示](https://dn-coding-net-production-pp.qbox.me/07d0da9f-0abe-408c-a16e-1d90a4526d22.png)\n\n> 公开项目只能选择北京服务器，私有项目可以选择北京和香港 (需付费) 服务器，\n\n然后勾选 “我已阅读并知道以上注意事项”，点击 **开启演示** 进入演示控制台。\n\n![演示控制台](https://dn-coding-net-production-pp.qbox.me/3400d458-96a0-48eb-aca9-491b4fcbd3b7.png) \n\n\n### 3.2 部署应用\n\n#### 3.2.1 一键部署\n\n\n在控制台可以自定义应用的各种参数，包括部署的版本、访问域名、内存等，这里我们全部使用默认配置，直接点击 **一键部署** 按钮来部署应用。\n部署过程中遇到了问题可以点击控制台页面上的 **常见问题解答** 链接查看一些常见问题的解决方法。控制台会后台自动更新应用当前的状态：\n\n![应用状态](https://dn-coding-net-production-pp.qbox.me/d3869a80-4c55-4433-9e3c-751bb6ed9f27.png)\n\n**查看日志**\n\n演示平台中的应用日志包括该项目的演示部署及访问日志等，支持实时查看，主要是为了程序排错之用。\n>注意：平台仅保留最近一千行应用日志。应用日志会进行不定期清理，如有重要日志，请及时保存\n\n\n在部署的过程中可以通过 **查看日志** 功能看到应用当前的部署日志，通过日志可以检查部署过程中出现的各种问题。\n\n\n这是此项目部署过程中的部分日志：\n\n![应用日志](https://dn-coding-net-production-pp.qbox.me/670aa6f9-0b36-44fe-becb-3ef1c569ac5d.png) \n\n\n稍等一会待应用部署完成，回到控制台页面可以看到应用状态变为 **正在运行**，并且应用运行时的 CPU、内存、磁盘等状态数据也会显示出来：\n\n![应用状态](https://dn-coding-net-production-pp.qbox.me/f2b9c351-e23c-4d87-a98b-106b294c2418.png) \n\n\n> 注意：演示平台不是开发平台，有新的代码提交和更新需要重新部署。\n\n\n#### 3.2.2 访问应用\n\n应用部署成功后，点击控制台页面上的 **马上访问** 按钮可以查看当前运行的应用：\n\n![查看应用](https://dn-coding-net-production-pp.qbox.me/1308389d-6376-4e50-9727-f239a57fa87e.png) \n\n\n至此，java-hello 示例应用已经部署完成，可以把它的访问地址分享给其它人查看。\n\n### 3.3 进阶使用\n\n演示功能包含以下几个子模块，所有演示相关操作都是在此完成，完全通过图形界面操作（我们不提供命令行工具）。\n\n- 控制台\n- 查看日志\n- 文件系统\n- 环境变量\n- 服务管理\n\n控制台和日志功能上面已经介绍，这里不再重复，只介绍下面几个功能：\n\n###  3.3.1 文件系统\n\nCoding 对每个演示应用都提供一个 WebUI 的方式可以查看到应用实时的文件系统，这对于调试时查找问题来说有时候会很有用（只读，不支持在线编辑）\n\n![文件系统](https://dn-coding-net-production-pp.qbox.me/70a0905c-e50f-4349-b477-0e8bf9e3ec67.png) \n\n同时文件系统的文件是无法在 WebUI 上传或下载的，但是文件系统服务的数据是可以导入导出的，进入文件系统服务的控制台，有备份和恢复按钮，可以导出和导入 zip 压缩文件。\n\n演示应用程序可以读写文件系统的文件，也可以通过 Web 导入导出。 使用方法是应用直接读写连接信息里 host_path 里的路径。\n\n文件系统部署详细说明参见 [文件系统](http://docs.coding.io/services/filesystem/)\n\n### 3.3.2 环境变量\n\n环境变量功能可以以图形界面的方式编辑应用运行时的环境变量（环境变量的改动，需要 **重启应用** 才能生效）。\n\n![环境变量](https://dn-coding-net-production-pp.qbox.me/0f04744d-cfa1-4927-b2d8-1934e07a770b.png) \n\n关于在应用中如何使用环境变量参加 [环境变量](http://docs.coding.io/references/env/)\n\n### 3.3.3 服务管理\n\n大部分应用都会依赖数据库、缓存之类组件，这些在演示平台上都是以服务的方式提供的，演示平台目前支持以下第三方服务：\n\n- [MySQL](http://docs.coding.io/services/mysql)\n- [PostgreSQL](http://docs.coding.io/services/postgresql)\n- [Redis](http://docs.coding.io/services/redis)\n- [MongoDB](http://docs.coding.io/services/mysql/mongodb)\n- [Filesystem](http://docs.coding.io/services/mysql/filesystem)\n\n下面以 MySQL 为例来介绍如何添加并使用第三方服务。\n\n#### 3.3.3.1 添加服务\n\n点击服务管理页面右上角的 **添加服务** 按钮，在弹出窗口里选择 MySQL，输入服务名称并勾选 \"绑定创建后的服务到此项目(可选)\"：\n\n![添加服务](https://dn-coding-net-production-pp.qbox.me/6bab0ff6-46ca-4931-8759-301829ae51d6.png) \n\n点击 **确定** 按钮创建服务，可以看到新创建的服务 mysql-test 已经出现在 “已绑定服务” 列表里了:\n\n![服务列表](https://dn-coding-net-production-pp.qbox.me/ca0e4e37-f2af-49d5-871c-f9e1b2b7db4e.png) \n\n\n#### 3.3.3.2 绑定服务\n\n服务必须绑定到应用上才可以使用，只有和服务绑定的应用才能使用该服务。在服务管理的 “可用服务” 的每个服务都有 **绑定** 按钮，\n点击此按钮就可以把选定的服务绑定到当前应用了。由于上一步在创建服务的同时勾选了绑定到当前应用，这一步不需要做了。\n\n> **提示：** 同一个服务可以绑定到多个应用，反过来一个应用也是可以绑定多个服务的。\n\n#### 3.3.3.3 连接信息\n\n在网页上可以查看已绑定服务的连接信息（连接信息也可以在应用运行时通过环境变量获取，[参考文档](http://docs.coding.io/services/)），应用通过此连接信息来使用服务：\n\n![连接信息](https://dn-coding-net-production-pp.qbox.me/d35a086d-d6f6-4f72-b6db-74ccad3139ca.png) \n\n\n#### 3.3.3.4 服务控制台\n\n服务控制台提供一个简单的网页界面来管理服务，可以在此执行服务数据的备份恢复，或者查询修改数据库数据等。\n\n![服务控制台](https://dn-coding-net-production-pp.qbox.me/fe27ca53-d7cd-445f-817c-2a3a56a61e87.png)\n\n4. 附录\n---\n\n语言支持\n\n以下是演示平台目前支持的语言和示例项目，点击语言名称 可查看该语言文档，更多示例应用 »\n\n语言|	示例\n---| :----: \n[Java](http://docs.coding.io/languages/java/)	 | [Servlet](https://coding.net/u/demo/p/java-hello) [Spring](https://coding.net/u/demo/p/spring-hello)\n[Ruby](http://docs.coding.io/languages/ruby/) | [Sinatra](https://coding.net/u/demo/p/ruby-hello) [Rails](https://coding.net/u/demo/p/rails-hello)\n[Node.js](http://docs.coding.io/languages/nodejs/) | [Node](https://coding.net/u/demo/p/node-hello) [Express](https://coding.net/u/demo/p/express-hello) [2048 Static](https://coding.net/u/demo/p/node-2048)\n[Go](http://docs.coding.io/languages/go/) |	[Go](https://coding.net/u/demo/p/go-hello) [Revel](https://coding.net/u/demo/p/revel-chat) \n[PHP](http://docs.coding.io/languages/php/) |	[PHP](https://coding.net/u/demo/p/php-hello) [WordPress](https://coding.net/u/demo/p/php-wordpress)\n[Python](http://docs.coding.io/languages/python/) | [Flask](https://coding.net/u/demo/p/python-hello) [Tornado](https://coding.net/u/demo/p/python-tornado)\n[Scala](http://docs.coding.io/languages/scala/) | [Scalatra](https://coding.net/u/demo/p/scala-hello) [Play! 1.x](https://coding.net/u/demo/p/play-hello) [Play! 2.x](https://coding.net/u/demo/p/play2-hello)\n[HTML](http://docs.coding.io/languages/html/) | [Static](https://coding.net/u/demo/p/static-site) [Jekyll](https://coding.net/u/bluishoul/p/static-web)\n\n服务支持\n\n以下是演示平台目前提供的第三方服务，点击服务名称 可查看该服务文档：\n\n服务|	使用场景\n----|---|---\n[MySQL](http://docs.coding.io/services/mysql/) |	关系型数据库 (RDBMS)  \n[PostgreSQL](http://docs.coding.io/services/postgresql/)	| 关系型数据库 (RDBMS)   \n[Redis](http://docs.coding.io/services/redis/) | 键值对缓存和存储 (key-value cache and store)  \n[MongoDB](http://docs.coding.io/services/mongodb/) | 文档数据库 (document database)  \n[Filesystem](http://docs.coding.io/services/filesystem/) | 文件持久化 (persistent filesystem)  \n\n示例： https://coding.net/u/demo/p/node-2048', '1.\n演示平台手册\n\n本手册主要描述\nCoding.net\n旗下\n演示平台的相关功能说明。\n\n\n相关参考资料：\n\n演示平台部署文档\n[http://docs.coding.io]\n\n\nCopyRight\nby\nCoding.net\n更新时间\n2015-09-01\n\n\n2.\n关于演示平台\n\n2.1\n演示平台\n\n演示平台是\nCoding.net\n基于\nCloud\nFoundry\n研发的一款应用部署\nPaaS\n平台，可以将程序部署运行在上面。\n\n支持主流的语言和框架，具体语言和框架支持请查询： \nhttp://docs.coding.io/\n[http://docs.coding.io/]\n\n\n2.2\n演示平台用处\n\n演示平台可以将托管在\nCoding\n的项目代码进行部署运行，方便程序在公网测试和在线演示展示。\n\n\nCoding\n演示平台提供在线的公网运行环境和相关基础服务，如数据库服务，缓存服务，文件系统服务等。\n\n\n用户可以在演示平台方便运行展示你的项目demo，包括\nWeb\n网站，移动\nH5\n页面，\n移动\nApp\n后台等等。\n\n\n2.3\n演示平台主要功能\n * \n   一键部署\n * \n   在线运行演示，免费版本24小时无访问挂起\n * \n   支持\n   coding.io\n   二级域名访问和独立域名(需选择香港服务器)\n * \n   提供第三方基础服务(\n   DB,\n   Redis,\n   FileSystem\n   )\n\n\n3.\n功能介绍\n\n3.1\n开启演示\n\n3.1.1\n前提条件\n * \n   Git\n   仓库不为空\n * \n   通过项目部署检测，代码仓库有相应的文件。\n * \n   拥有开启演示的权限(\n   目前只有项目拥有者\n   )\n\n\n具体语言依赖以\nJava\n为例：\n\n\n要求项目为\nMaven\n的\nwebapp\n项目，\n且项目根目录下必须存在\npom.xml\n文件。\n\n同时，项目还需要配置好\nmaven-war-plugin\n插件，\n以保证执行构建的时候可以生成\nwar\n包。\n\n详情可以参见\nJava\n语言支持： \nhttp://docs.coding.io/languages/java/\n[http://docs.coding.io/languages/java/]\n\n * \n   项目演示功能仅作演示之用，不支持高并发访问。\n * \n   不作任何\n   SLA\n   保证，请不要在演示平台存储重要数据。\n\n\nDemo \n：\n\n\n登录到\nCoding，打开公开项目 \nhttps://coding.net/u/demo/p/java-hello/git，点击右上角的\n[https://coding.net/u/demo/p/java-hello/git，点击右上角的] \nFork\n按钮将此项目\nFork\n到你的账户里。\n\n这样就\nFork\n了一个\njava-hello\n的公开项目到你项目空间。\n\n\n也可以创建你自己的私有项目。\n\n\n3.1.2\n开启演示\n\n打开\nFork\n后项目的 \n演示 \nTab，点击页面最下面检测应用下的 \n开始检测 \n按钮，系统会自动检测出此项目的语言：\n\n开启演示 [https://dn-coding-net-production-pp.qbox.me/07d0da9f-0abe-408c-a16e-1d90a4526d22.png]\n\n\n公开项目只能选择北京服务器，私有项目可以选择北京和香港\n(需付费)\n服务器，\n\n\n然后勾选\n“我已阅读并知道以上注意事项”，点击 \n开启演示 \n进入演示控制台。\n\n演示控制台 [https://dn-coding-net-production-pp.qbox.me/3400d458-96a0-48eb-aca9-491b4fcbd3b7.png]\n\n\n3.2\n部署应用\n\n3.2.1\n一键部署\n\n在控制台可以自定义应用的各种参数，包括部署的版本、访问域名、内存等，这里我们全部使用默认配置，直接点击 \n一键部署 \n按钮来部署应用。\n\n部署过程中遇到了问题可以点击控制台页面上的 \n常见问题解答 \n链接查看一些常见问题的解决方法。控制台会后台自动更新应用当前的状态：\n\n应用状态 [https://dn-coding-net-production-pp.qbox.me/d3869a80-4c55-4433-9e3c-751bb6ed9f27.png]\n\n\n查看日志\n\n\n演示平台中的应用日志包括该项目的演示部署及访问日志等，支持实时查看，主要是为了程序排错之用。\n\n\n注意：平台仅保留最近一千行应用日志。应用日志会进行不定期清理，如有重要日志，请及时保存\n\n\n在部署的过程中可以通过 \n查看日志 \n功能看到应用当前的部署日志，通过日志可以检查部署过程中出现的各种问题。\n\n\n这是此项目部署过程中的部分日志：\n\n应用日志 [https://dn-coding-net-production-pp.qbox.me/670aa6f9-0b36-44fe-becb-3ef1c569ac5d.png]\n\n\n稍等一会待应用部署完成，回到控制台页面可以看到应用状态变为 \n正在运行 \n，并且应用运行时的\nCPU、内存、磁盘等状态数据也会显示出来：\n\n应用状态 [https://dn-coding-net-production-pp.qbox.me/f2b9c351-e23c-4d87-a98b-106b294c2418.png]\n\n\n注意：演示平台不是开发平台，有新的代码提交和更新需要重新部署。\n\n\n3.2.2\n访问应用\n\n应用部署成功后，点击控制台页面上的 \n马上访问 \n按钮可以查看当前运行的应用：\n\n查看应用 [https://dn-coding-net-production-pp.qbox.me/1308389d-6376-4e50-9727-f239a57fa87e.png]\n\n\n至此，java-hello\n示例应用已经部署完成，可以把它的访问地址分享给其它人查看。\n\n\n3.3\n进阶使用\n\n演示功能包含以下几个子模块，所有演示相关操作都是在此完成，完全通过图形界面操作（我们不提供命令行工具）。\n\n * \n   控制台\n * \n   查看日志\n * \n   文件系统\n * \n   环境变量\n * \n   服务管理\n\n\n控制台和日志功能上面已经介绍，这里不再重复，只介绍下面几个功能：\n\n\n3.3.1\n文件系统\n\nCoding\n对每个演示应用都提供一个\nWebUI\n的方式可以查看到应用实时的文件系统，这对于调试时查找问题来说有时候会很有用（只读，不支持在线编辑）\n\n文件系统 [https://dn-coding-net-production-pp.qbox.me/70a0905c-e50f-4349-b477-0e8bf9e3ec67.png]\n\n\n同时文件系统的文件是无法在\nWebUI\n上传或下载的，但是文件系统服务的数据是可以导入导出的，进入文件系统服务的控制台，有备份和恢复按钮，可以导出和导入\nzip\n压缩文件。\n\n\n演示应用程序可以读写文件系统的文件，也可以通过\nWeb\n导入导出。\n使用方法是应用直接读写连接信息里\nhost_path\n里的路径。\n\n\n文件系统部署详细说明参见 \n文件系统\n[http://docs.coding.io/services/filesystem/]\n\n\n3.3.2\n环境变量\n\n环境变量功能可以以图形界面的方式编辑应用运行时的环境变量（环境变量的改动，需要 \n重启应用 \n才能生效）。\n\n环境变量 [https://dn-coding-net-production-pp.qbox.me/0f04744d-cfa1-4927-b2d8-1934e07a770b.png]\n\n\n关于在应用中如何使用环境变量参加 \n环境变量\n[http://docs.coding.io/references/env/]\n\n\n3.3.3\n服务管理\n\n大部分应用都会依赖数据库、缓存之类组件，这些在演示平台上都是以服务的方式提供的，演示平台目前支持以下第三方服务：\n\n * \n   MySQL\n   [http://docs.coding.io/services/mysql]\n * \n   PostgreSQL\n   [http://docs.coding.io/services/postgresql]\n * \n   Redis\n   [http://docs.coding.io/services/redis]\n * \n   MongoDB\n   [http://docs.coding.io/services/mysql/mongodb]\n * \n   Filesystem\n   [http://docs.coding.io/services/mysql/filesystem]\n\n\n下面以\nMySQL\n为例来介绍如何添加并使用第三方服务。\n\n\n3.3.3.1\n添加服务\n\n点击服务管理页面右上角的 \n添加服务 \n按钮，在弹出窗口里选择\nMySQL，输入服务名称并勾选\n\"绑定创建后的服务到此项目(可选)\"：\n\n添加服务 [https://dn-coding-net-production-pp.qbox.me/6bab0ff6-46ca-4931-8759-301829ae51d6.png]\n\n\n点击 \n确定 \n按钮创建服务，可以看到新创建的服务\nmysql-test\n已经出现在\n“已绑定服务”\n列表里了:\n\n服务列表 [https://dn-coding-net-production-pp.qbox.me/ca0e4e37-f2af-49d5-871c-f9e1b2b7db4e.png]\n\n\n3.3.3.2\n绑定服务\n\n服务必须绑定到应用上才可以使用，只有和服务绑定的应用才能使用该服务。在服务管理的\n“可用服务”\n的每个服务都有 \n绑定 \n按钮，\n\n点击此按钮就可以把选定的服务绑定到当前应用了。由于上一步在创建服务的同时勾选了绑定到当前应用，这一步不需要做了。\n\n\n提示： \n同一个服务可以绑定到多个应用，反过来一个应用也是可以绑定多个服务的。\n\n\n3.3.3.3\n连接信息\n\n在网页上可以查看已绑定服务的连接信息（连接信息也可以在应用运行时通过环境变量获取， \n参考文档\n[http://docs.coding.io/services/] \n），应用通过此连接信息来使用服务：\n\n连接信息 [https://dn-coding-net-production-pp.qbox.me/d35a086d-d6f6-4f72-b6db-74ccad3139ca.png]\n\n\n3.3.3.4\n服务控制台\n\n服务控制台提供一个简单的网页界面来管理服务，可以在此执行服务数据的备份恢复，或者查询修改数据库数据等。\n\n服务控制台 [https://dn-coding-net-production-pp.qbox.me/fe27ca53-d7cd-445f-817c-2a3a56a61e87.png]\n\n\n4.\n附录\n\n语言支持\n\n\n以下是演示平台目前支持的语言和示例项目，点击语言名称\n可查看该语言文档，更多示例应用\n»\n\n\n语言 \n示例 \nJava\n[http://docs.coding.io/languages/java/] \nServlet\n[https://coding.net/u/demo/p/java-hello] \nSpring\n[https://coding.net/u/demo/p/spring-hello] \nRuby\n[http://docs.coding.io/languages/ruby/] \nSinatra\n[https://coding.net/u/demo/p/ruby-hello] \nRails\n[https://coding.net/u/demo/p/rails-hello] \nNode.js\n[http://docs.coding.io/languages/nodejs/] \nNode\n[https://coding.net/u/demo/p/node-hello] \nExpress\n[https://coding.net/u/demo/p/express-hello] \n2048\nStatic\n[https://coding.net/u/demo/p/node-2048] \nGo\n[http://docs.coding.io/languages/go/] \nGo\n[https://coding.net/u/demo/p/go-hello] \nRevel\n[https://coding.net/u/demo/p/revel-chat] \nPHP\n[http://docs.coding.io/languages/php/] \nPHP\n[https://coding.net/u/demo/p/php-hello] \nWordPress\n[https://coding.net/u/demo/p/php-wordpress] \nPython\n[http://docs.coding.io/languages/python/] \nFlask\n[https://coding.net/u/demo/p/python-hello] \nTornado\n[https://coding.net/u/demo/p/python-tornado] \nScala\n[http://docs.coding.io/languages/scala/] \nScalatra\n[https://coding.net/u/demo/p/scala-hello] \nPlay!\n1.x\n[https://coding.net/u/demo/p/play-hello] \nPlay!\n2.x\n[https://coding.net/u/demo/p/play2-hello] \nHTML\n[http://docs.coding.io/languages/html/] \nStatic\n[https://coding.net/u/demo/p/static-site] \nJekyll\n[https://coding.net/u/bluishoul/p/static-web]\n服务支持\n\n\n以下是演示平台目前提供的第三方服务，点击服务名称\n可查看该服务文档：\n\n\n服务 \n使用场景 \nMySQL\n[http://docs.coding.io/services/mysql/] \n关系型数据库\n(RDBMS) \nPostgreSQL\n[http://docs.coding.io/services/postgresql/] \n关系型数据库\n(RDBMS) \nRedis\n[http://docs.coding.io/services/redis/] \n键值对缓存和存储\n(key-value\ncache\nand\nstore) \nMongoDB\n[http://docs.coding.io/services/mongodb/] \n文档数据库\n(document\ndatabase) \nFilesystem\n[http://docs.coding.io/services/filesystem/] \n文件持久化\n(persistent\nfilesystem)\n示例： \nhttps://coding.net/u/demo/p/node-2048\n[https://coding.net/u/demo/p/node-2048]', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00'), ('31', '0', '开始使用演示平台', 'https://coding.net/help/doc/paas/getting-started.html', '---\nlayout: post\n\ntitle: 开始使用演示平台\n---\n\n\n\n本章介绍如何开始使用演示平台。\n\n### 开启演示 ###\n\n#### 前提条件\n\n  - Git 仓库不为空\n  - 通过项目部署检测，代码仓库有相应的文件。\n  - 拥有开启演示的权限( 目前只有项目拥有者 )\n\n具体语言依赖以 Java 为例：\n\n要求项目为 Maven 的 webapp 项目， 且项目根目录下必须存在 pom.xml 文件。\n同时，项目还需要配置好 maven-war-plugin 插件， 以保证执行构建的时候可以生成 war 包。\n详情可以参见 Java 语言支持：http://docs.coding.io/languages/java/\n\n  - 项目演示功能仅作演示之用，不支持高并发访问。\n  - 不作任何 SLA 保证，请不要在演示平台存储重要数据。\n\n> **Demo**：\n\n>登录到 Coding，打开公开项目 https://coding.net/u/demo/p/java-hello/git，点击右上角的 Fork 按钮将此项目 Fork 到你的账户里。\n这样就 Fork 了一个 java-hello 的公开项目到你项目空间。\n\n也可以创建你自己的私有项目。\n\n### 开启演示\n\n打开 Fork 后项目的 **演示** Tab，点击页面最下面检测应用下的 **开始检测** 按钮，系统会自动检测出此项目的语言：\n\n![开启演示](https://dn-coding-net-production-pp.qbox.me/07d0da9f-0abe-408c-a16e-1d90a4526d22.png)\n\n> 公开项目只能选择北京服务器，私有项目可以选择北京和香港 (需付费) 服务器，\n\n然后勾选 “我已阅读并知道以上注意事项”，点击 **开启演示** 进入演示控制台。\n\n![演示控制台](https://dn-coding-net-production-pp.qbox.me/3400d458-96a0-48eb-aca9-491b4fcbd3b7.png) \n\n\n### 部署应用\n\n#### 一键部署\n\n\n在控制台可以自定义应用的各种参数，包括部署的版本、访问域名、内存等，这里我们全部使用默认配置，直接点击 **一键部署** 按钮来部署应用。\n部署过程中遇到了问题可以点击控制台页面上的 **常见问题解答** 链接查看一些常见问题的解决方法。控制台会后台自动更新应用当前的状态：\n\n![应用状态](https://dn-coding-net-production-pp.qbox.me/d3869a80-4c55-4433-9e3c-751bb6ed9f27.png)\n\n**查看日志**\n\n演示平台中的应用日志包括该项目的演示部署及访问日志等，支持实时查看，主要是为了程序排错之用。\n>注意：平台仅保留最近一千行应用日志。应用日志会进行不定期清理，如有重要日志，请及时保存\n\n\n在部署的过程中可以通过 **查看日志** 功能看到应用当前的部署日志，通过日志可以检查部署过程中出现的各种问题。\n\n\n这是此项目部署过程中的部分日志：\n\n![应用日志](https://dn-coding-net-production-pp.qbox.me/670aa6f9-0b36-44fe-becb-3ef1c569ac5d.png) \n\n\n稍等一会待应用部署完成，回到控制台页面可以看到应用状态变为 **正在运行**，并且应用运行时的 CPU、内存、磁盘等状态数据也会显示出来：\n\n![应用状态](https://dn-coding-net-production-pp.qbox.me/f2b9c351-e23c-4d87-a98b-106b294c2418.png) \n\n\n> 注意：演示平台不是开发平台，有新的代码提交和更新需要重新部署。\n\n\n#### 访问应用\n\n应用部署成功后，点击控制台页面上的 **马上访问** 按钮可以查看当前运行的应用：\n\n![查看应用](https://dn-coding-net-production-pp.qbox.me/1308389d-6376-4e50-9727-f239a57fa87e.png) \n\n\n至此，java-hello 示例应用已经部署完成，可以把它的访问地址分享给其它人查看。\n\n---\n\n\n\n  <div class=\"footer-nav\">\n  <div class=\"left-nav\"><i class=\"fa fa-angle-left\"></i><a href=\"/help/doc/paas/index.html\">上一篇：演示介绍</a></div>\n  <div class=\"right-nav\"><a href=\"/help/doc/paas/services.html\">下一篇：服务管理</a><i class=\"fa fa-angle-right\"></i></div>\n  </div>\n\n\n', '本章介绍如何开始使用演示平台。\n\n\n开启演示\n\n前提条件\n * \n   Git\n   仓库不为空\n * \n   通过项目部署检测，代码仓库有相应的文件。\n * \n   拥有开启演示的权限(\n   目前只有项目拥有者\n   )\n\n\n具体语言依赖以\nJava\n为例：\n\n\n要求项目为\nMaven\n的\nwebapp\n项目，\n且项目根目录下必须存在\npom.xml\n文件。\n\n同时，项目还需要配置好\nmaven-war-plugin\n插件，\n以保证执行构建的时候可以生成\nwar\n包。\n\n详情可以参见\nJava\n语言支持： \nhttp://docs.coding.io/languages/java/\n[http://docs.coding.io/languages/java/]\n\n * \n   项目演示功能仅作演示之用，不支持高并发访问。\n * \n   不作任何\n   SLA\n   保证，请不要在演示平台存储重要数据。\n\n\nDemo \n：\n\n\n登录到\nCoding，打开公开项目 \nhttps://coding.net/u/demo/p/java-hello/git，点击右上角的\n[https://coding.net/u/demo/p/java-hello/git，点击右上角的] \nFork\n按钮将此项目\nFork\n到你的账户里。\n\n这样就\nFork\n了一个\njava-hello\n的公开项目到你项目空间。\n\n\n也可以创建你自己的私有项目。\n\n\n开启演示\n\n打开\nFork\n后项目的 \n演示 \nTab，点击页面最下面检测应用下的 \n开始检测 \n按钮，系统会自动检测出此项目的语言：\n\n开启演示 [https://dn-coding-net-production-pp.qbox.me/07d0da9f-0abe-408c-a16e-1d90a4526d22.png]\n\n\n公开项目只能选择北京服务器，私有项目可以选择北京和香港\n(需付费)\n服务器，\n\n\n然后勾选\n“我已阅读并知道以上注意事项”，点击 \n开启演示 \n进入演示控制台。\n\n演示控制台 [https://dn-coding-net-production-pp.qbox.me/3400d458-96a0-48eb-aca9-491b4fcbd3b7.png]\n\n\n部署应用\n\n一键部署\n\n在控制台可以自定义应用的各种参数，包括部署的版本、访问域名、内存等，这里我们全部使用默认配置，直接点击 \n一键部署 \n按钮来部署应用。\n\n部署过程中遇到了问题可以点击控制台页面上的 \n常见问题解答 \n链接查看一些常见问题的解决方法。控制台会后台自动更新应用当前的状态：\n\n应用状态 [https://dn-coding-net-production-pp.qbox.me/d3869a80-4c55-4433-9e3c-751bb6ed9f27.png]\n\n\n查看日志\n\n\n演示平台中的应用日志包括该项目的演示部署及访问日志等，支持实时查看，主要是为了程序排错之用。\n\n\n注意：平台仅保留最近一千行应用日志。应用日志会进行不定期清理，如有重要日志，请及时保存\n\n\n在部署的过程中可以通过 \n查看日志 \n功能看到应用当前的部署日志，通过日志可以检查部署过程中出现的各种问题。\n\n\n这是此项目部署过程中的部分日志：\n\n应用日志 [https://dn-coding-net-production-pp.qbox.me/670aa6f9-0b36-44fe-becb-3ef1c569ac5d.png]\n\n\n稍等一会待应用部署完成，回到控制台页面可以看到应用状态变为 \n正在运行 \n，并且应用运行时的\nCPU、内存、磁盘等状态数据也会显示出来：\n\n应用状态 [https://dn-coding-net-production-pp.qbox.me/f2b9c351-e23c-4d87-a98b-106b294c2418.png]\n\n\n注意：演示平台不是开发平台，有新的代码提交和更新需要重新部署。\n\n\n访问应用\n\n应用部署成功后，点击控制台页面上的 \n马上访问 \n按钮可以查看当前运行的应用：\n\n查看应用 [https://dn-coding-net-production-pp.qbox.me/1308389d-6376-4e50-9727-f239a57fa87e.png]\n\n\n至此，java-hello\n示例应用已经部署完成，可以把它的访问地址分享给其它人查看。\n\n\n\n\n\n<div\nclass=\"footer-nav\">\n\n<div\nclass=\"left-nav\"><i\nclass=\"fa\nfa-angle-left\"></i><a\nhref=\"/help/doc/paas/index.html\">上一篇：演示介绍</a></div>\n\n<div\nclass=\"right-nav\"><a\nhref=\"/help/doc/paas/services.html\">下一篇：服务管理</a><i\nclass=\"fa\nfa-angle-right\"></i></div>\n\n</div>', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00'), ('32', '0', '任务管理', 'https://coding.net/help/doc/mobile/task.html', '---\nlayout: post\n\ntitle: 任务管理\n---\n\n本章节主要描述如何在手机App上管理和设置任务。\n\n## 项目任务 \n\n### 创建和指派任务\n\n>**方法一：**项目列表点击导航栏右上角「+」，进入快捷功能界面，点击「任务」进入创建任务界面，输入任务内容，选择所属项目以及执行者并点击右上角「完成」即可创建任务。\n\n>**方法二：**点击项目首页菜单列表「任务」，进入任务列表点击导航栏右上角「+」进入创建任务界面，输入任务内容，选择执行者并点击右上角「完成」即可创建任务。\n\n>**方法三：**去往「我的任务」，进入任务列表点击导航栏右上角「+」进入创建任务界面，输入任务内容，选择执行者并点击右上角「完成」即可创建任务。\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/cea5247f-6cb2-4702-b563-9bdb4e70c384.png) \n ![图片](https://dn-coding-net-production-pp.qbox.me/cd3ef1b3-acb2-4f4e-9772-0738fed99f92.png) \n\n\n#### 添加任务描述\n\n\n>可进入任务详情在任务内容下方点击「补充描述」，进入描述编辑界面。\n>描述的文本输入支持 Markdown 语法以及预览功能。\n\n#### 删除任务\n\n>能，进入任务详情，点击任务内容右侧「删除」按钮进行删除\n>注意，项目内成员不能删除他人创建的任务（项目创建者除外）\n\n#### 给任务贴标签\n\n> 进入任务界面，点击左上方添加标签按钮，即可添加自定义标签\n\n---\n\n\n\n  <div class=\"footer-nav\">\n  <div class=\"left-nav\"><i class=\"fa fa-angle-left\"></i><a href=\"/help/doc/mobile/files.html\">上一篇：文件管理</a></div>\n  <div class=\"right-nav\"><a href=\"/help/doc/mobile/discuss.html\">下一篇：讨论管理</a><i class=\"fa fa-angle-right\"></i></div>\n  </div>\n', '本章节主要描述如何在手机App上管理和设置任务。\n\n\n项目任务\n\n创建和指派任务\n\n方法一： \n项目列表点击导航栏右上角「+」，进入快捷功能界面，点击「任务」进入创建任务界面，输入任务内容，选择所属项目以及执行者并点击右上角「完成」即可创建任务。\n\n\n方法二： \n点击项目首页菜单列表「任务」，进入任务列表点击导航栏右上角「+」进入创建任务界面，输入任务内容，选择执行者并点击右上角「完成」即可创建任务。\n\n\n方法三： \n去往「我的任务」，进入任务列表点击导航栏右上角「+」进入创建任务界面，输入任务内容，选择执行者并点击右上角「完成」即可创建任务。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/cea5247f-6cb2-4702-b563-9bdb4e70c384.png]\n图片 [https://dn-coding-net-production-pp.qbox.me/cd3ef1b3-acb2-4f4e-9772-0738fed99f92.png]\n\n\n添加任务描述\n\n可进入任务详情在任务内容下方点击「补充描述」，进入描述编辑界面。\n\n描述的文本输入支持\nMarkdown\n语法以及预览功能。\n\n\n删除任务\n\n能，进入任务详情，点击任务内容右侧「删除」按钮进行删除\n\n注意，项目内成员不能删除他人创建的任务（项目创建者除外）\n\n\n给任务贴标签\n\n进入任务界面，点击左上方添加标签按钮，即可添加自定义标签\n\n\n\n\n\n<div\nclass=\"footer-nav\">\n\n<div\nclass=\"left-nav\"><i\nclass=\"fa\nfa-angle-left\"></i><a\nhref=\"/help/doc/mobile/files.html\">上一篇：文件管理</a></div>\n\n<div\nclass=\"right-nav\"><a\nhref=\"/help/doc/mobile/discuss.html\">下一篇：讨论管理</a><i\nclass=\"fa\nfa-angle-right\"></i></div>\n\n</div>', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00'), ('33', '0', '开始使用项目管理', 'https://coding.net/help/doc/project/getting-started.html', '---\nlayout: post\n\ntitle: 开始使用项目管理\n---\n\n## 项目创建&设置\n\n### 创建项目 \n\n用户登录之后，将鼠标移至右上角**添加**按钮并在下拉列表中选择**项目**，进入新建项目操作流程；或者将鼠标移至**头像**并在下拉列表中选择**项目**，进入我的项目页，再点击**添加**按钮，进入新建项目操作流程。\n![在这里输入图片描述][1]\n![在这里输入图片描述][2]\n注意：项目一旦创建，项目属性（私有或公开）便无法修改。\n\n### 公开&私有项目的区别 \n\n公开项目是完全公开的，包括源码、项目讨论、质量控制等，只有项目成员可以编辑该项目，但任何用户都可以进行 fork，关注，收藏等操作。\n私有项目只对项目成员可见，并不会公开展示于项目成员的个人首页上。只有项目所有者才能添加项目成员，项目的所有内容和更新都只有项目成员可以进行操作和查看。\n\n### 项目概览\n\n在项目主页的左侧一级菜单栏选择**设置**，点击**项目概览**，则可查看项目的版本、服务期限、项目内成员数和Git 仓库使用情况。\n若您是开发版本或高级版本，在**设置**页面还可以查看和 coding.net 的更加方便的联系方式和反馈渠道。\n\n### 更新项目信息 \n\n只有项目所有者有权更新项目信息。\n在项目主页的左侧一级菜单栏选择**设置**，点击**基本设置**，可以对项目的名称、图标、描述和默认分支进行修改和更新。\n![在这里输入图片描述][3]\n注意：项目属性（私有或公开）一经确定，便不可修改。\n\n### 删除项目 \n\n只有项目所有者有权删除项目。\n在项目主页的左侧一级菜单栏选择**设置**，点击**高级设置**，再点击**删除项目**，通过身份验证后，即可删除该项目。\n![在这里输入图片描述][4]\n注意：删除项目将会连同项目相关的所有数据（包括 issues、pull requests、动态等在内）一起删除且不可恢复，请慎重。\n\n### 转让项目 \n\n只有项目所有者有权转让项目给项目成员。\n在项目主页的左侧一级菜单栏选择**设置**，点击**高级设置**，选择项目成员，再点击**转让项目**，通过身份验证后，即可删除该项目。\n![在这里输入图片描述][5]\n\n注意：转让项目时，项目成员不能为空，并且转让项目后原项目所有者的权限将一并移交给新的项目所有者，原项目所有者成为普通项目成员。\n\n### 项目分组\n\n进入我的项目页，点击右上角**分组**，选中项目，再点击**移至新分组**按钮，并重命名新分组，即可移动项目到指定或新建分组。点击**返回**按钮即可中断项目分组操作。\n![在这里输入图片描述][6]\n\n### 设置常用项目\n\n进入我的项目页，将鼠标移至目标项目，右上角将出现**白色大头针标识**，点击，即可设置该项目为常用项目。\n![在这里输入图片描述][7]\n此后将鼠标移至右上角**头像**处可以查看或设置常用项目。\n![在这里输入图片描述][8]\n\n## 项目成员\n\n### 添加项目成员\n\n只有项目所有者有权限添加项目成员。其中，免费版最多拥有10名项目成员，开发版最多拥有20名项目成员，高级版最多拥有50名项目成员。如需添加更多项目成员，请至账户主页付费项目页选择升级该项目。\n在项目主页的左侧一级菜单栏中选择**成员**，点击**添加**按钮，即可进入添加项目成员弹窗页面。\n![在这里输入图片描述][9]\n![在这里输入图片描述][10]\n弹窗页面内，搜索框支持 email、用户名和唯一标识搜索添加；若点击**我关注的人**、**粉丝**和**我的项目**，即可查看其下所有个人账号，选中即可添加。\n如果该成员已经注册了 Coding 账号，您的邀请将会以私信的形式发送给 TA；如果该成员还没有 Coding 账号，您的邀请则以 email 的形式发送给 TA。\n\n### 删除项目成员\n\n只有项目所有者有权限删除项目成员。\n在项目主页的左侧一级菜单栏中选择**成员**，选中项目成员并点击项目成员右边的**红色叉字**，即可删除对应项目成员。\n![在这里输入图片描述][11]\n\n### 退出项目\n\n在项目主页的左侧一级菜单栏中选择**成员**，在项目成员列表里面找到自己并选中，然后点击**退出项目**；\n![在这里输入图片描述][12]\n或者在项目主页的左侧一级菜单栏中选择**设置**，点击**高级设置**，再点击**退出项目**。\n![在这里输入图片描述][13]\n\n## 项目有关动态\n\n### 项目动态主页\n\n点击项目图像即可进入当前项目的动态主页，项目动态主页显示当前关于任务、讨论、文件、代码、其他或所有的动态；右侧显示我的任务、最近的项目讨论和文件、项目成员和项目介绍，点击**查看更多**还可进入列表页面查看更多信息。\n\n### 我的动态主页\n点击我的头像即可进入我的动态主页，我的动态主页显示我的项目、我关注的动态（包括我的项目、关注的项目、关注的人）、和我的任务，点击**查看更多**还可进入列表页面查看更多信息。\n\n### 项目内成员的动态\n在项目主页的左侧一级菜单栏中选择**成员**，然后点击某个成员，即可查看该成员在当前项目内的最近动态。\n\n### 提醒&通知\n在个人主页的左侧一级菜单栏中选择**账户**，然后点击**提醒设置**，进行有关于项目内相关动态的提醒设置，接收相关的系统提醒和邮件提醒。\n![在这里输入图片描述][14]\n\n\n---\n\n## 上一篇 >> [项目管理介绍](/help/doc/project/index.html)\n\n## 下一篇 >> [项目文件管理](/help/doc/project/files.html)\n\n  [1]: https://dn-coding-net-production-static.qbox.me/92fe2d5a-e1f1-4454-b2e7-84040d5adfd5.png\n  [2]: https://dn-coding-net-production-static.qbox.me/617c33a3-522f-404e-a1d4-16155bf55950.jpg\n  [3]: https://dn-coding-net-production-static.qbox.me/8b821a8c-dfed-4fc2-9276-3a6542b2b3c7.png\n  [4]: https://dn-coding-net-production-static.qbox.me/a9326b6a-1fb7-456f-97d0-b3e969bea798.jpg?imageView2/2/w/800/h/800\n  [5]: https://dn-coding-net-production-static.qbox.me/91bc9f4a-8965-4d76-85dd-965c6b0e11ad.jpg?imageView2/2/w/800/h/800\n  [6]: https://dn-coding-net-production-static.qbox.me/e6149fa0-6c52-44e1-9348-5637d92322cf.jpg?imageView2/2/w/800/h/800\n  [7]: https://dn-coding-net-production-static.qbox.me/47e150d0-a369-456a-9e3f-dbcf53c54d0b.jpg?imageView2/2/w/800/h/800\n  [8]: https://dn-coding-net-production-static.qbox.me/d4743aad-13d0-46b4-8667-9d6066fe83a8.jpg?imageView2/2/w/800/h/800\n  [9]: https://dn-coding-net-production-static.qbox.me/ac3ba9d8-a05c-43d2-82e4-24daaa341040.jpg?imageView2/2/w/800/h/800\n  [10]: https://dn-coding-net-production-static.qbox.me/c27525a2-70a6-4ca3-964f-27518d0226c3.png?imageView2/2/w/800/h/800\n  [11]: https://dn-coding-net-production-static.qbox.me/150e0c74-cbf8-475a-99bf-2c1be8e0570a.png?imageView2/2/w/800/h/800\n  [12]: https://dn-coding-net-production-static.qbox.me/1bb18b92-2629-40cf-add3-69d843de7d79.png?imageView2/2/w/800/h/800\n  [13]: https://dn-coding-net-production-static.qbox.me/5222465a-4545-404c-9b59-2d782a325955.png?imageView2/2/w/800/h/800\n  [14]: https://dn-coding-net-production-pp.qbox.me/7747b520-1cb7-4954-8b39-b42b7093b2ad.png\n  \n  \n  \n\n  <div class=\"footer-nav\">\n  <div class=\"right-nav\"><a href=\"/help/doc/project/files.html\">下一篇：项目文件管理</a><i class=\"fa fa-angle-right\"></i></div>\n  </div>\n', '项目创建&设置\n\n创建项目\n\n用户登录之后，将鼠标移至右上角 \n添加 \n按钮并在下拉列表中选择 \n项目 \n，进入新建项目操作流程；或者将鼠标移至 \n头像 \n并在下拉列表中选择 \n项目 \n，进入我的项目页，再点击 \n添加 \n按钮，进入新建项目操作流程。\n在这里输入图片描述 [https://dn-coding-net-production-static.qbox.me/92fe2d5a-e1f1-4454-b2e7-84040d5adfd5.png]\n在这里输入图片描述 [https://dn-coding-net-production-static.qbox.me/617c33a3-522f-404e-a1d4-16155bf55950.jpg]\n\n注意：项目一旦创建，项目属性（私有或公开）便无法修改。\n\n\n公开&私有项目的区别\n\n公开项目是完全公开的，包括源码、项目讨论、质量控制等，只有项目成员可以编辑该项目，但任何用户都可以进行\nfork，关注，收藏等操作。\n\n私有项目只对项目成员可见，并不会公开展示于项目成员的个人首页上。只有项目所有者才能添加项目成员，项目的所有内容和更新都只有项目成员可以进行操作和查看。\n\n\n项目概览\n\n在项目主页的左侧一级菜单栏选择 \n设置 \n，点击 \n项目概览 \n，则可查看项目的版本、服务期限、项目内成员数和Git\n仓库使用情况。\n\n若您是开发版本或高级版本，在 \n设置 \n页面还可以查看和\ncoding.net\n的更加方便的联系方式和反馈渠道。\n\n\n更新项目信息\n\n只有项目所有者有权更新项目信息。\n\n在项目主页的左侧一级菜单栏选择 \n设置 \n，点击 \n基本设置 \n，可以对项目的名称、图标、描述和默认分支进行修改和更新。\n在这里输入图片描述 [https://dn-coding-net-production-static.qbox.me/8b821a8c-dfed-4fc2-9276-3a6542b2b3c7.png]\n\n注意：项目属性（私有或公开）一经确定，便不可修改。\n\n\n删除项目\n\n只有项目所有者有权删除项目。\n\n在项目主页的左侧一级菜单栏选择 \n设置 \n，点击 \n高级设置 \n，再点击 \n删除项目 \n，通过身份验证后，即可删除该项目。\n在这里输入图片描述 [https://dn-coding-net-production-static.qbox.me/a9326b6a-1fb7-456f-97d0-b3e969bea798.jpg?imageView2/2/w/800/h/800]\n\n注意：删除项目将会连同项目相关的所有数据（包括\nissues、pull\nrequests、动态等在内）一起删除且不可恢复，请慎重。\n\n\n转让项目\n\n只有项目所有者有权转让项目给项目成员。\n\n在项目主页的左侧一级菜单栏选择 \n设置 \n，点击 \n高级设置 \n，选择项目成员，再点击 \n转让项目 \n，通过身份验证后，即可删除该项目。\n在这里输入图片描述 [https://dn-coding-net-production-static.qbox.me/91bc9f4a-8965-4d76-85dd-965c6b0e11ad.jpg?imageView2/2/w/800/h/800]\n\n\n注意：转让项目时，项目成员不能为空，并且转让项目后原项目所有者的权限将一并移交给新的项目所有者，原项目所有者成为普通项目成员。\n\n\n项目分组\n\n进入我的项目页，点击右上角 \n分组 \n，选中项目，再点击 \n移至新分组 \n按钮，并重命名新分组，即可移动项目到指定或新建分组。点击 \n返回 \n按钮即可中断项目分组操作。\n在这里输入图片描述 [https://dn-coding-net-production-static.qbox.me/e6149fa0-6c52-44e1-9348-5637d92322cf.jpg?imageView2/2/w/800/h/800]\n\n\n设置常用项目\n\n进入我的项目页，将鼠标移至目标项目，右上角将出现 \n白色大头针标识 \n，点击，即可设置该项目为常用项目。\n在这里输入图片描述 [https://dn-coding-net-production-static.qbox.me/47e150d0-a369-456a-9e3f-dbcf53c54d0b.jpg?imageView2/2/w/800/h/800]\n\n此后将鼠标移至右上角 \n头像 \n处可以查看或设置常用项目。\n在这里输入图片描述 [https://dn-coding-net-production-static.qbox.me/d4743aad-13d0-46b4-8667-9d6066fe83a8.jpg?imageView2/2/w/800/h/800]\n\n\n项目成员\n\n添加项目成员\n\n只有项目所有者有权限添加项目成员。其中，免费版最多拥有10名项目成员，开发版最多拥有20名项目成员，高级版最多拥有50名项目成员。如需添加更多项目成员，请至账户主页付费项目页选择升级该项目。\n\n在项目主页的左侧一级菜单栏中选择 \n成员 \n，点击 \n添加 \n按钮，即可进入添加项目成员弹窗页面。\n在这里输入图片描述 [https://dn-coding-net-production-static.qbox.me/ac3ba9d8-a05c-43d2-82e4-24daaa341040.jpg?imageView2/2/w/800/h/800]\n在这里输入图片描述 [https://dn-coding-net-production-static.qbox.me/c27525a2-70a6-4ca3-964f-27518d0226c3.png?imageView2/2/w/800/h/800]\n\n弹窗页面内，搜索框支持\nemail、用户名和唯一标识搜索添加；若点击 \n我关注的人 \n、 \n粉丝 \n和 \n我的项目 \n，即可查看其下所有个人账号，选中即可添加。\n\n如果该成员已经注册了\nCoding\n账号，您的邀请将会以私信的形式发送给\nTA；如果该成员还没有\nCoding\n账号，您的邀请则以\nemail\n的形式发送给\nTA。\n\n\n删除项目成员\n\n只有项目所有者有权限删除项目成员。\n\n在项目主页的左侧一级菜单栏中选择 \n成员 \n，选中项目成员并点击项目成员右边的 \n红色叉字 \n，即可删除对应项目成员。\n在这里输入图片描述 [https://dn-coding-net-production-static.qbox.me/150e0c74-cbf8-475a-99bf-2c1be8e0570a.png?imageView2/2/w/800/h/800]\n\n\n退出项目\n\n在项目主页的左侧一级菜单栏中选择 \n成员 \n，在项目成员列表里面找到自己并选中，然后点击 \n退出项目 \n；\n在这里输入图片描述 [https://dn-coding-net-production-static.qbox.me/1bb18b92-2629-40cf-add3-69d843de7d79.png?imageView2/2/w/800/h/800]\n\n或者在项目主页的左侧一级菜单栏中选择 \n设置 \n，点击 \n高级设置 \n，再点击 \n退出项目 \n。\n在这里输入图片描述 [https://dn-coding-net-production-static.qbox.me/5222465a-4545-404c-9b59-2d782a325955.png?imageView2/2/w/800/h/800]\n\n\n项目有关动态\n\n项目动态主页\n\n点击项目图像即可进入当前项目的动态主页，项目动态主页显示当前关于任务、讨论、文件、代码、其他或所有的动态；右侧显示我的任务、最近的项目讨论和文件、项目成员和项目介绍，点击 \n查看更多 \n还可进入列表页面查看更多信息。\n\n\n我的动态主页\n\n点击我的头像即可进入我的动态主页，我的动态主页显示我的项目、我关注的动态（包括我的项目、关注的项目、关注的人）、和我的任务，点击 \n查看更多 \n还可进入列表页面查看更多信息。\n\n\n项目内成员的动态\n\n在项目主页的左侧一级菜单栏中选择 \n成员 \n，然后点击某个成员，即可查看该成员在当前项目内的最近动态。\n\n\n提醒&通知\n\n在个人主页的左侧一级菜单栏中选择 \n账户 \n，然后点击 \n提醒设置 \n，进行有关于项目内相关动态的提醒设置，接收相关的系统提醒和邮件提醒。\n在这里输入图片描述 [https://dn-coding-net-production-pp.qbox.me/7747b520-1cb7-4954-8b39-b42b7093b2ad.png]\n\n\n\n\n\n上一篇\n>> \n项目管理介绍\n[/HELP/DOC/PROJECT/index.html]\n\n下一篇\n>> \n项目文件管理\n[/HELP/DOC/PROJECT/FILES.HTML]\n\n<div\nclass=\"footer-nav\">\n\n<div\nclass=\"right-nav\"><a\nhref=\"/help/doc/project/files.html\">下一篇：项目文件管理</a><i\nclass=\"fa\nfa-angle-right\"></i></div>\n\n</div>', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00'), ('34', '0', '项目讨论', 'https://coding.net/help/doc/project/discuss.html', '---\nlayout: post\n\ntitle: 项目讨论\n---\n\n本篇介绍如何使用项目讨论。\n\n## 关于项目讨论\n\n - 私有项目\n项目讨论是只有项目成员可见的互动交流区域。该项目上的所有成员都可以在讨论区创建新的讨论帖，评论或者回复讨论。只有项目所有者和该讨论发起者可以编辑或删除已存在的讨论。\n![在这里输入图片描述][29]\n\n - 公开项目\n项目讨论完全是公开的，任何已登录用户都可以在讨论区创建新的讨论，评论或者回复讨论。但只有项目所有者和该讨论发起者可以编辑或删除已存在的讨论。\n![在这里输入图片描述][30]\n\n### 创建讨论\n\n在项目主页的左侧一级菜单栏选择**讨论**，点击**添加**按钮，即可进入新讨论的创建页面。\n讨论的内容编辑框支持 Markdown 语法以及全屏预览功能。\n[点击此处][31]查看 Markdown 语法说明。\n\n### 编辑&删除讨论\n\n只有项目创建者和该讨论创建者可以编辑或删除已存在的讨论。\n点击讨论标题下的**编辑**或**删除**图标，即可编辑和删除讨论。\n\n### 添加&删除讨论标签\n\n创建、编辑或者查看讨论时，点击**添加**标签按钮，出现标签下拉列表，选中标签即可添加或删除。\nTips：私有项目的讨论和任务的标签是通用的，并且添加标签时一次可以添加多个，还可以按标签查看讨论。\n注意：已登录用户可以在任何公开项目内创建、编辑&删除讨论，但只有项目成员有权添加或删除标签。\n\n### # 标志\n\n项目内的 Markdown 编辑器支持“#”自动提示，并通过 #ID 引用项目内讨论、文件、任务和合并请求。\n公开项目仅能引用项目内讨论和 Pull Request 的 ID 。\n\n###  关注讨论\n\n在讨论详情页，每个项目成员都可以点击讨论标题下关注者旁（或者在讨论内容的结尾处）的**添加**按钮，在成员下拉框中添加或者取消某个或某几个项目成员对当前任务的关注。\n\n---\n\n## 上一篇 >> [项目文件管理](/help/doc/project/files.html)\n\n\n   [28]: https://dn-coding-net-production-static.qbox.me/f09dbf3f-8a36-4cb3-9197-073e31e3951c.png?imageView2/2/w/800/h/800\n  [29]: https://dn-coding-net-production-static.qbox.me/72516dfe-529a-4ed3-a20b-a8cdc2f249b9.png?imageView2/2/w/800/h/800\n  [30]: https://dn-coding-net-production-static.qbox.me/a161eaef-b710-4151-bffb-2eea37c4093d.png?imageView2/2/w/800/h/800\n  [31]: https://dn-coding-net-production-static.qbox.me/2d162819-3a56-4496-920f-6f5ad5ef2fc3.png?imageView2/2/w/800/h/800\n  \n  \n  \n\n  <div class=\"footer-nav\">\n  <div class=\"left-nav\"><i class=\"fa fa-angle-left\"></i><a href=\"/help/doc/project/files.html\">上一篇：项目文件管理</a></div>\n  </div>\n\n', '本篇介绍如何使用项目讨论。\n\n\n关于项目讨论\n * \n   私有项目\n   \n   项目讨论是只有项目成员可见的互动交流区域。该项目上的所有成员都可以在讨论区创建新的讨论帖，评论或者回复讨论。只有项目所有者和该讨论发起者可以编辑或删除已存在的讨论。\n   在这里输入图片描述 [https://dn-coding-net-production-static.qbox.me/72516dfe-529a-4ed3-a20b-a8cdc2f249b9.png?imageView2/2/w/800/h/800]\n   \n   \n * \n   公开项目\n   \n   项目讨论完全是公开的，任何已登录用户都可以在讨论区创建新的讨论，评论或者回复讨论。但只有项目所有者和该讨论发起者可以编辑或删除已存在的讨论。\n   在这里输入图片描述 [https://dn-coding-net-production-static.qbox.me/a161eaef-b710-4151-bffb-2eea37c4093d.png?imageView2/2/w/800/h/800]\n   \n   \n\n\n创建讨论\n\n在项目主页的左侧一级菜单栏选择 \n讨论 \n，点击 \n添加 \n按钮，即可进入新讨论的创建页面。\n\n讨论的内容编辑框支持\nMarkdown\n语法以及全屏预览功能。\n\n点击此处\n[https://dn-coding-net-production-static.qbox.me/2d162819-3a56-4496-920f-6f5ad5ef2fc3.png?imageView2/2/w/800/h/800] \n查看\nMarkdown\n语法说明。\n\n\n编辑&删除讨论\n\n只有项目创建者和该讨论创建者可以编辑或删除已存在的讨论。\n\n点击讨论标题下的 \n编辑 \n或 \n删除 \n图标，即可编辑和删除讨论。\n\n\n添加&删除讨论标签\n\n创建、编辑或者查看讨论时，点击 \n添加 \n标签按钮，出现标签下拉列表，选中标签即可添加或删除。\n\nTips：私有项目的讨论和任务的标签是通用的，并且添加标签时一次可以添加多个，还可以按标签查看讨论。\n\n注意：已登录用户可以在任何公开项目内创建、编辑&删除讨论，但只有项目成员有权添加或删除标签。\n\n\n#\n标志\n\n项目内的\nMarkdown\n编辑器支持“#”自动提示，并通过\n#ID\n引用项目内讨论、文件、任务和合并请求。\n\n公开项目仅能引用项目内讨论和\nPull\nRequest\n的\nID\n。\n\n\n关注讨论\n\n在讨论详情页，每个项目成员都可以点击讨论标题下关注者旁（或者在讨论内容的结尾处）的 \n添加 \n按钮，在成员下拉框中添加或者取消某个或某几个项目成员对当前任务的关注。\n\n\n\n\n\n上一篇\n>> \n项目文件管理\n[/HELP/DOC/PROJECT/FILES.HTML]\n\n<div\nclass=\"footer-nav\">\n\n<div\nclass=\"left-nav\"><i\nclass=\"fa\nfa-angle-left\"></i><a\nhref=\"/help/doc/project/files.html\">上一篇：项目文件管理</a></div>\n\n</div>', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00');
INSERT INTO `help_documents` VALUES ('35', '0', '演示平台进阶功能', 'https://coding.net/help/doc/paas/services.html', '---\nlayout: post\n\ntitle: 演示平台进阶功能\n---\n\n### 进阶使用\n\n演示功能包含以下几个子模块，所有演示相关操作都是在此完成，完全通过图形界面操作（我们不提供命令行工具）。\n\n- 控制台\n- 查看日志\n- 文件系统\n- 环境变量\n- 服务管理\n\n控制台和日志功能上面已经介绍，这里不再重复，只介绍下面几个功能：\n\n### 文件系统\n\nCoding 对每个演示应用都提供一个 WebUI 的方式可以查看到应用实时的文件系统，这对于调试时查找问题来说有时候会很有用（只读，不支持在线编辑）\n\n![文件系统](https://dn-coding-net-production-pp.qbox.me/70a0905c-e50f-4349-b477-0e8bf9e3ec67.png) \n\n同时文件系统的文件是无法在 WebUI 上传或下载的，但是文件系统服务的数据是可以导入导出的，进入文件系统服务的控制台，有备份和恢复按钮，可以导出和导入 zip 压缩文件。\n\n演示应用程序可以读写文件系统的文件，也可以通过 Web 导入导出。 使用方法是应用直接读写连接信息里 host_path 里的路径。\n\n文件系统部署详细说明参见 [文件系统](http://docs.coding.io/services/filesystem/)\n\n### 环境变量\n\n环境变量功能可以以图形界面的方式编辑应用运行时的环境变量（环境变量的改动，需要 **重启应用** 才能生效）。\n\n![环境变量](https://dn-coding-net-production-pp.qbox.me/0f04744d-cfa1-4927-b2d8-1934e07a770b.png) \n\n关于在应用中如何使用环境变量参加 [环境变量](http://docs.coding.io/references/env/)\n\n### 服务管理\n\n大部分应用都会依赖数据库、缓存之类组件，这些在演示平台上都是以服务的方式提供的，演示平台目前支持以下第三方服务：\n\n- [MySQL](http://docs.coding.io/services/mysql)\n- [PostgreSQL](http://docs.coding.io/services/postgresql)\n- [Redis](http://docs.coding.io/services/redis)\n- [MongoDB](http://docs.coding.io/services/mysql/mongodb)\n- [Filesystem](http://docs.coding.io/services/mysql/filesystem)\n\n下面以 MySQL 为例来介绍如何添加并使用第三方服务。\n\n#### 添加服务\n\n点击服务管理页面右上角的 **添加服务** 按钮，在弹出窗口里选择 MySQL，输入服务名称并勾选 \"绑定创建后的服务到此项目(可选)\"：\n\n![添加服务](https://dn-coding-net-production-pp.qbox.me/6bab0ff6-46ca-4931-8759-301829ae51d6.png) \n\n点击 **确定** 按钮创建服务，可以看到新创建的服务 mysql-test 已经出现在 “已绑定服务” 列表里了:\n\n![服务列表](https://dn-coding-net-production-pp.qbox.me/ca0e4e37-f2af-49d5-871c-f9e1b2b7db4e.png) \n\n\n#### 绑定服务\n\n服务必须绑定到应用上才可以使用，只有和服务绑定的应用才能使用该服务。在服务管理的 “可用服务” 的每个服务都有 **绑定** 按钮，\n点击此按钮就可以把选定的服务绑定到当前应用了。由于上一步在创建服务的同时勾选了绑定到当前应用，这一步不需要做了。\n\n> **提示：** 同一个服务可以绑定到多个应用，反过来一个应用也是可以绑定多个服务的。\n\n#### 连接信息\n\n在网页上可以查看已绑定服务的连接信息（连接信息也可以在应用运行时通过环境变量获取，[参考文档](http://docs.coding.io/services/)），应用通过此连接信息来使用服务：\n\n![连接信息](https://dn-coding-net-production-pp.qbox.me/d35a086d-d6f6-4f72-b6db-74ccad3139ca.png) \n\n\n#### 服务控制台\n\n服务控制台提供一个简单的网页界面来管理服务，可以在此执行服务数据的备份恢复，或者查询修改数据库数据等。\n\n![服务控制台](https://dn-coding-net-production-pp.qbox.me/fe27ca53-d7cd-445f-817c-2a3a56a61e87.png)\n\n---\n\n\n\n  <div class=\"footer-nav\">\n  <div class=\"left-nav\"><i class=\"fa fa-angle-left\"></i><a href=\"/help/doc/paas/getting-started.html\">上一篇：开始使用演示</a></div>\n  </div>\n\n\n', '进阶使用\n\n演示功能包含以下几个子模块，所有演示相关操作都是在此完成，完全通过图形界面操作（我们不提供命令行工具）。\n\n * \n   控制台\n * \n   查看日志\n * \n   文件系统\n * \n   环境变量\n * \n   服务管理\n\n\n控制台和日志功能上面已经介绍，这里不再重复，只介绍下面几个功能：\n\n\n文件系统\n\nCoding\n对每个演示应用都提供一个\nWebUI\n的方式可以查看到应用实时的文件系统，这对于调试时查找问题来说有时候会很有用（只读，不支持在线编辑）\n\n文件系统 [https://dn-coding-net-production-pp.qbox.me/70a0905c-e50f-4349-b477-0e8bf9e3ec67.png]\n\n\n同时文件系统的文件是无法在\nWebUI\n上传或下载的，但是文件系统服务的数据是可以导入导出的，进入文件系统服务的控制台，有备份和恢复按钮，可以导出和导入\nzip\n压缩文件。\n\n\n演示应用程序可以读写文件系统的文件，也可以通过\nWeb\n导入导出。\n使用方法是应用直接读写连接信息里\nhost_path\n里的路径。\n\n\n文件系统部署详细说明参见 \n文件系统\n[http://docs.coding.io/services/filesystem/]\n\n\n环境变量\n\n环境变量功能可以以图形界面的方式编辑应用运行时的环境变量（环境变量的改动，需要 \n重启应用 \n才能生效）。\n\n环境变量 [https://dn-coding-net-production-pp.qbox.me/0f04744d-cfa1-4927-b2d8-1934e07a770b.png]\n\n\n关于在应用中如何使用环境变量参加 \n环境变量\n[http://docs.coding.io/references/env/]\n\n\n服务管理\n\n大部分应用都会依赖数据库、缓存之类组件，这些在演示平台上都是以服务的方式提供的，演示平台目前支持以下第三方服务：\n\n * \n   MySQL\n   [http://docs.coding.io/services/mysql]\n * \n   PostgreSQL\n   [http://docs.coding.io/services/postgresql]\n * \n   Redis\n   [http://docs.coding.io/services/redis]\n * \n   MongoDB\n   [http://docs.coding.io/services/mysql/mongodb]\n * \n   Filesystem\n   [http://docs.coding.io/services/mysql/filesystem]\n\n\n下面以\nMySQL\n为例来介绍如何添加并使用第三方服务。\n\n\n添加服务\n\n点击服务管理页面右上角的 \n添加服务 \n按钮，在弹出窗口里选择\nMySQL，输入服务名称并勾选\n\"绑定创建后的服务到此项目(可选)\"：\n\n添加服务 [https://dn-coding-net-production-pp.qbox.me/6bab0ff6-46ca-4931-8759-301829ae51d6.png]\n\n\n点击 \n确定 \n按钮创建服务，可以看到新创建的服务\nmysql-test\n已经出现在\n“已绑定服务”\n列表里了:\n\n服务列表 [https://dn-coding-net-production-pp.qbox.me/ca0e4e37-f2af-49d5-871c-f9e1b2b7db4e.png]\n\n\n绑定服务\n\n服务必须绑定到应用上才可以使用，只有和服务绑定的应用才能使用该服务。在服务管理的\n“可用服务”\n的每个服务都有 \n绑定 \n按钮，\n\n点击此按钮就可以把选定的服务绑定到当前应用了。由于上一步在创建服务的同时勾选了绑定到当前应用，这一步不需要做了。\n\n\n提示： \n同一个服务可以绑定到多个应用，反过来一个应用也是可以绑定多个服务的。\n\n\n连接信息\n\n在网页上可以查看已绑定服务的连接信息（连接信息也可以在应用运行时通过环境变量获取， \n参考文档\n[http://docs.coding.io/services/] \n），应用通过此连接信息来使用服务：\n\n连接信息 [https://dn-coding-net-production-pp.qbox.me/d35a086d-d6f6-4f72-b6db-74ccad3139ca.png]\n\n\n服务控制台\n\n服务控制台提供一个简单的网页界面来管理服务，可以在此执行服务数据的备份恢复，或者查询修改数据库数据等。\n\n服务控制台 [https://dn-coding-net-production-pp.qbox.me/fe27ca53-d7cd-445f-817c-2a3a56a61e87.png]\n\n\n\n\n\n<div\nclass=\"footer-nav\">\n\n<div\nclass=\"left-nav\"><i\nclass=\"fa\nfa-angle-left\"></i><a\nhref=\"/help/doc/paas/getting-started.html\">上一篇：开始使用演示</a></div>\n\n</div>', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00'), ('36', '0', '项目任务管理', 'https://coding.net/help/doc/project/task.html', '---\nlayout: post\n\ntitle: 项目任务管理\n---\n\n本章主要介绍，如何在 Coding 管理任务\n\n### 3.4 关于任务管理\n\n任务管理是私有项目具有的特色功能，任务详情页会记录项目成员操作任务的每一次动态。所有项目成员可以快速创建任务并随时重新指派任务的执行人，在任务下迅捷地交流意见和建议，实时地跟踪任务的进度，促进任务的高效完成。\n\n - 任务详情页\n\n![在这里输入图片描述][23]\n\n - 项目内任务中心\n![在这里输入图片描述][24]\n\n - 我的任务页\n![在这里输入图片描述][25]\n\n -  任务弹窗页\n\n![在这里输入图片描述][26]\n\n#### 3.4.1  创建任务\n\n - 项目内任务中心创建任务\n在项目主页的左侧一级菜单栏选择**任务**，在屏幕上方的文本框输入任务标题和任务描述，点击左边的**日历**图标和**感叹号**图标选择任务截止日期和任务紧急程度，点击右边的**头像**图标选择任务执行成员，回车即可创建任务，如需给任务添加标签，可以点击任务下方的**时钟**按钮，进入任务详情页添加。\n![在这里输入图片描述][27]\n\n - 全局创建任务\n将鼠标移至右上角**添加**按钮并选择任务，在任务弹窗页面全局创建任务，并给任务加标签。全局创建任务后，页面出现任务创建提示，点击即可进入任务详情页。\n![在这里输入图片描述][28]\n\n注意：目前只有私有项目具有任务功能。\n\n#### 3.4.2  更新任务\n\n项目内任何成员都可以更新任务的标题、描述、紧急程度、截止日期、标签，重新分配任务执行者，详细操作和创建任务时相似。\n注意：在任务详情页可以修改任务的所有属性，在任务列表可以进行除添加标签以外的所有操作。\n\n#### 3.4.3  删除任务\n\n项目内成员不能删除他人创建的任务（项目所有者除外），只能删除自己创建的任务。\n\n#### 3.4.4  完成&重启任务\n\n点击正在进行中的任务内容左边的方框按钮，任务将更新为完成状态，方框内有“√”标志，任务内容被删除线覆盖。\n点击点击已完成的任务内容左边的方框按钮，任务将更新为重新开启状态状态。\n\n#### 3.4.5 添加任务标签\n\n全局创建或在任务详情页更新任务时，点击**添加**标签按钮，出现标签下拉列表，选中标签即可添加。\nTips：讨论标签和任务标签是通用的，并且添加标签时一次可以添加多个，还可以按标签查看任务。\n\n#### 3.4.6  # 标志\n\n每个任务都有一个独特的引用 ID。\n项目内的 Markdown 编辑器支持“#”自动提示，并通过 #ID 引用项目内任务和合并请求。\n\n#### 3.4.7  关注任务\n\n任务的创建者和每一任执行者都会自动关注当前任务。\n在任务列表页，某个项目成员如需主动关注或取消任务，可将鼠标移至任务列表的某一任务标题上，标题下一行将出现**眼睛**图标，点击即可关注或取消关注任务；\n在任务详情页的右下角，每个项目成员都可以点击关注者右边的**添加**按钮，在成员下拉框中添加或者取消某个或某几个项目成员对当前任务的关注。\n\n#### 3.4.8  关联 Merge Request 动态\n\n当项目成员在代码页面创建合并请求（Merge Request）时，如果选择关联任务，那么Merge Request 的创建、合并、拒绝、取消和编辑的动态都会实时地在任务详情页显示；\n如果在编辑 Merge Request 的时候，取消了对先前某个任务的关联，那么 Merge Request 则不显示。\n\n---\n\n\n\n  [21]: https://dn-coding-net-production-static.qbox.me/f7b47f09-eb7b-4a5d-b8d7-069d1995ede4.png?imageView2/2/w/800/h/800\n  [22]: https://dn-coding-net-production-static.qbox.me/1a666602-7b07-4a8c-b504-10a418ae185e.jpg?imageView2/2/w/800/h/800\n  [23]: https://dn-coding-net-production-static.qbox.me/0bfbda67-6a5e-4f39-94bc-c9fae18c87e6.png?imageView2/2/w/800/h/800\n  [24]: https://dn-coding-net-production-static.qbox.me/7d818d4e-bd20-4467-8f15-dcb4f5087b93.png?imageView2/2/w/800/h/800\n  [25]: https://dn-coding-net-production-static.qbox.me/f09dbf3f-8a36-4cb3-9197-073e31e3951c.png?imageView2/2/w/800/h/800\n  [26]: https://dn-coding-net-production-static.qbox.me/72516dfe-529a-4ed3-a20b-a8cdc2f249b9.png?imageView2/2/w/800/h/800\n  [27]: https://dn-coding-net-production-static.qbox.me/a161eaef-b710-4151-bffb-2eea37c4093d.png?imageView2/2/w/800/h/800\n  [28]: https://dn-coding-net-production-static.qbox.me/2d162819-3a56-4496-920f-6f5ad5ef2fc3.png?imageView2/2/w/800/h/800\n  \n  \n\n  <div class=\"footer-nav\">\n  <div class=\"left-nav\"><i class=\"fa fa-angle-left\"></i><a href=\"/help/doc/project/files.html\">上一篇：项目文件管理</a></div>\n  <div class=\"right-nav\"><a href=\"/help/doc/project/discuss.html\">下一篇：项目讨论</a><i class=\"fa fa-angle-right\"></i></div>\n  </div>\n', '本章主要介绍，如何在\nCoding\n管理任务\n\n\n3.4\n关于任务管理\n\n任务管理是私有项目具有的特色功能，任务详情页会记录项目成员操作任务的每一次动态。所有项目成员可以快速创建任务并随时重新指派任务的执行人，在任务下迅捷地交流意见和建议，实时地跟踪任务的进度，促进任务的高效完成。\n\n * \n   任务详情页\n\n在这里输入图片描述 [https://dn-coding-net-production-static.qbox.me/0bfbda67-6a5e-4f39-94bc-c9fae18c87e6.png?imageView2/2/w/800/h/800]\n\n * \n   项目内任务中心\n   在这里输入图片描述 [https://dn-coding-net-production-static.qbox.me/7d818d4e-bd20-4467-8f15-dcb4f5087b93.png?imageView2/2/w/800/h/800]\n   \n   \n * \n   我的任务页\n   在这里输入图片描述 [https://dn-coding-net-production-static.qbox.me/f09dbf3f-8a36-4cb3-9197-073e31e3951c.png?imageView2/2/w/800/h/800]\n   \n   \n * \n   任务弹窗页\n   \n   \n\n在这里输入图片描述 [https://dn-coding-net-production-static.qbox.me/72516dfe-529a-4ed3-a20b-a8cdc2f249b9.png?imageView2/2/w/800/h/800]\n\n\n3.4.1\n创建任务\n * \n   项目内任务中心创建任务\n   \n   在项目主页的左侧一级菜单栏选择 \n   任务 \n   ，在屏幕上方的文本框输入任务标题和任务描述，点击左边的 \n   日历 \n   图标和 \n   感叹号 \n   图标选择任务截止日期和任务紧急程度，点击右边的 \n   头像 \n   图标选择任务执行成员，回车即可创建任务，如需给任务添加标签，可以点击任务下方的 \n   时钟 \n   按钮，进入任务详情页添加。\n   在这里输入图片描述 [https://dn-coding-net-production-static.qbox.me/a161eaef-b710-4151-bffb-2eea37c4093d.png?imageView2/2/w/800/h/800]\n   \n   \n * \n   全局创建任务\n   \n   将鼠标移至右上角 \n   添加 \n   按钮并选择任务，在任务弹窗页面全局创建任务，并给任务加标签。全局创建任务后，页面出现任务创建提示，点击即可进入任务详情页。\n   在这里输入图片描述 [https://dn-coding-net-production-static.qbox.me/2d162819-3a56-4496-920f-6f5ad5ef2fc3.png?imageView2/2/w/800/h/800]\n   \n   \n\n\n注意：目前只有私有项目具有任务功能。\n\n\n3.4.2\n更新任务\n\n项目内任何成员都可以更新任务的标题、描述、紧急程度、截止日期、标签，重新分配任务执行者，详细操作和创建任务时相似。\n\n注意：在任务详情页可以修改任务的所有属性，在任务列表可以进行除添加标签以外的所有操作。\n\n\n3.4.3\n删除任务\n\n项目内成员不能删除他人创建的任务（项目所有者除外），只能删除自己创建的任务。\n\n\n3.4.4\n完成&重启任务\n\n点击正在进行中的任务内容左边的方框按钮，任务将更新为完成状态，方框内有“√”标志，任务内容被删除线覆盖。\n\n点击点击已完成的任务内容左边的方框按钮，任务将更新为重新开启状态状态。\n\n\n3.4.5\n添加任务标签\n\n全局创建或在任务详情页更新任务时，点击 \n添加 \n标签按钮，出现标签下拉列表，选中标签即可添加。\n\nTips：讨论标签和任务标签是通用的，并且添加标签时一次可以添加多个，还可以按标签查看任务。\n\n\n3.4.6\n#\n标志\n\n每个任务都有一个独特的引用\nID。\n\n项目内的\nMarkdown\n编辑器支持“#”自动提示，并通过\n#ID\n引用项目内任务和合并请求。\n\n\n3.4.7\n关注任务\n\n任务的创建者和每一任执行者都会自动关注当前任务。\n\n在任务列表页，某个项目成员如需主动关注或取消任务，可将鼠标移至任务列表的某一任务标题上，标题下一行将出现 \n眼睛 \n图标，点击即可关注或取消关注任务；\n\n在任务详情页的右下角，每个项目成员都可以点击关注者右边的 \n添加 \n按钮，在成员下拉框中添加或者取消某个或某几个项目成员对当前任务的关注。\n\n\n3.4.8\n关联\nMERGE\nREQUEST\n动态\n\n当项目成员在代码页面创建合并请求（Merge\nRequest）时，如果选择关联任务，那么Merge\nRequest\n的创建、合并、拒绝、取消和编辑的动态都会实时地在任务详情页显示；\n\n如果在编辑\nMerge\nRequest\n的时候，取消了对先前某个任务的关联，那么\nMerge\nRequest\n则不显示。\n\n\n\n\n\n<div\nclass=\"footer-nav\">\n\n<div\nclass=\"left-nav\"><i\nclass=\"fa\nfa-angle-left\"></i><a\nhref=\"/help/doc/project/files.html\">上一篇：项目文件管理</a></div>\n\n<div\nclass=\"right-nav\"><a\nhref=\"/help/doc/project/discuss.html\">下一篇：项目讨论</a><i\nclass=\"fa\nfa-angle-right\"></i></div>\n\n</div>', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00'), ('37', '0', '项目文件管理', 'https://coding.net/help/doc/project/files.html', '---\nlayout: post\n\ntitle: 项目文件管理\n---\n\n本章节主要介绍如何管理项目文件。\n\n## 关于项目文件\n\n项目文件中心支持对文件的上传、下载、协同编辑、在线预览、公开分享、删除等功能，每个文件都拥有动态和历史版本，项目成员可以在文件下评论和交流，并通过下载查看旧的文件版本。\n![在这里输入图片描述][15]\n\n### 创建文件\n\n在项目主页的左侧一级菜单栏选择**文档**，点击头像下方的**创建**按钮并选择创建  TXT 或 Markdown 文档。\n[查看 Markdown 语法说明。][16]\n\n### 上传文件\n\n在项目主页的左侧一级菜单栏选择**文档**，点击头像下方的**上传**按钮上传本地文件，或者直接拖拽文件到虚线框内上传。\n![在这里输入图片描述][17]\n\n注意：coding.net 支持所有格式文件的上传，一次性可以上传单个或多个文件，但单个文件应不超过50M ，否则不能成功上传。\n\n### 编辑和重命名文件\n\n只有 TXT 或 Markdown 文档可以重新重命名并编辑，其余类型文件暂时支持重命名功能，项目内所有成员拥有编辑的权限。\n\n### 删除文件\n\n项目所有者对所有文件具有删除的权限,文件上传者可以删除 TA 上传的文件，文档创建者可以删除 TA 创建的 TXT 和 Markdown 文档。\n创建项目文档文件夹之后，要删除这个文件夹需要先删除文件夹中的所有文件直到文件夹为空，该文件夹才可以被删除。\n\n### 编辑列表\n\n项目内所有成员都有编辑列表的权限，点击**编辑列表**按钮并选中文件，再点击**移动到…**按钮即可自由地移动单个或多个文件至新的文件夹或者再点击**删除**按钮即可批量删除文件。\n![在这里输入图片描述][18]\n\n### 分享文件\n\n点击文件名旁的**分享**图标，出现分享悬浮窗，点击**创建**按钮，再点击**复制**图标，即可获得可用于公开分享的链接。任何人可以通过链接访问被分享的文件并下载。\n若要停止分享，点击悬浮窗内的停止按钮即可，先前的链接便会失效。\n![在这里输入图片描述][19]\n项目内所有成员拥有创建公开分享链接的权限，也可以停止分享任一文件。\n\n### 文件动态&评论\n\n项目成员每一次对于文件的操作，如创建文档、上传新版本、重命名、删除整个文件或文件的某个版本、对文件进行评论等，将会用动态的形式记录并形成历史版本。\n![在这里输入图片描述][20]\n\n### 历史版本\n\n打开文件默认预览最新版本，历史版本支持添加备注、删除和下载和在线预览。所有项目成员可以上传新的文件版本，给历史版本添加备注和删除旧的文件版本。\n![在这里输入图片描述][21]\n\n### 文件弹窗页\n点击文件名即可进入文件弹窗页，以上所有对文件的操作（除创建和上传初始版本文件）均可以在弹窗页进行，点击弹窗页右上角的**去详情页**图标即可进入文件详情页面。\n![在这里输入图片描述][22]\n\n---\n\n\n[15]: https://dn-coding-net-production-static.qbox.me/bcd21f3c-1893-412a-af07-e8e9a383312d.png?imageView2/2/w/800/h/800\n  [16]: https://coding.net/u/coding/p/Coding-Feedback/git/blob/master/markdown-syntax.md\n  [17]: https://dn-coding-net-production-static.qbox.me/168ec032-475f-4660-bfb0-9a02ded0e769.jpg?imageView2/2/w/800/h/800\n  [18]: https://dn-coding-net-production-static.qbox.me/9cffca9e-06ea-43bc-8a74-2db1462e71e1.png?imageView2/2/w/800/h/800\n  [19]: https://dn-coding-net-production-static.qbox.me/2dc00bb8-d486-412f-9090-63ef7ef10845.png?imageView2/2/w/800/h/800\n  [20]: https://dn-coding-net-production-static.qbox.me/db76b8f1-3c30-45d3-9e0c-9f2d5e31fae4.png?imageView2/2/w/800/h/800\n  [21]: https://dn-coding-net-production-static.qbox.me/2d162819-3a56-4496-920f-6f5ad5ef2fc3.png?imageView2/2/w/800/h/800\n  [22]: https://dn-coding-net-production-pp.qbox.me/828cdee3-d2ae-459e-9775-a79b396e81c8.jpg\n\n\n\n\n  <div class=\"footer-nav\">\n  <div class=\"left-nav\"><i class=\"fa fa-angle-left\"></i><a href=\"/help/doc/project/getting-started.html\">上一篇：开始使用项目管理</a></div>\n  <div class=\"right-nav\"><a href=\"/help/doc/project/task.html\">下一篇：任务管理</a><i class=\"fa fa-angle-right\"></i></div>\n  </div>\n\n', '本章节主要介绍如何管理项目文件。\n\n\n关于项目文件\n\n项目文件中心支持对文件的上传、下载、协同编辑、在线预览、公开分享、删除等功能，每个文件都拥有动态和历史版本，项目成员可以在文件下评论和交流，并通过下载查看旧的文件版本。\n在这里输入图片描述 [https://dn-coding-net-production-static.qbox.me/bcd21f3c-1893-412a-af07-e8e9a383312d.png?imageView2/2/w/800/h/800]\n\n\n创建文件\n\n在项目主页的左侧一级菜单栏选择 \n文档 \n，点击头像下方的 \n创建 \n按钮并选择创建\nTXT\n或\nMarkdown\n文档。\n\n查看\nMarkdown\n语法说明。\n[https://coding.net/u/coding/p/Coding-Feedback/git/blob/master/markdown-syntax.md]\n\n\n上传文件\n\n在项目主页的左侧一级菜单栏选择 \n文档 \n，点击头像下方的 \n上传 \n按钮上传本地文件，或者直接拖拽文件到虚线框内上传。\n在这里输入图片描述 [https://dn-coding-net-production-static.qbox.me/168ec032-475f-4660-bfb0-9a02ded0e769.jpg?imageView2/2/w/800/h/800]\n\n\n注意：coding.net\n支持所有格式文件的上传，一次性可以上传单个或多个文件，但单个文件应不超过50M\n，否则不能成功上传。\n\n\n编辑和重命名文件\n\n只有\nTXT\n或\nMarkdown\n文档可以重新重命名并编辑，其余类型文件暂时支持重命名功能，项目内所有成员拥有编辑的权限。\n\n\n删除文件\n\n项目所有者对所有文件具有删除的权限,文件上传者可以删除\nTA\n上传的文件，文档创建者可以删除\nTA\n创建的\nTXT\n和\nMarkdown\n文档。\n\n创建项目文档文件夹之后，要删除这个文件夹需要先删除文件夹中的所有文件直到文件夹为空，该文件夹才可以被删除。\n\n\n编辑列表\n\n项目内所有成员都有编辑列表的权限，点击 \n编辑列表 \n按钮并选中文件，再点击 \n移动到… \n按钮即可自由地移动单个或多个文件至新的文件夹或者再点击 \n删除 \n按钮即可批量删除文件。\n在这里输入图片描述 [https://dn-coding-net-production-static.qbox.me/9cffca9e-06ea-43bc-8a74-2db1462e71e1.png?imageView2/2/w/800/h/800]\n\n\n分享文件\n\n点击文件名旁的 \n分享 \n图标，出现分享悬浮窗，点击 \n创建 \n按钮，再点击 \n复制 \n图标，即可获得可用于公开分享的链接。任何人可以通过链接访问被分享的文件并下载。\n\n若要停止分享，点击悬浮窗内的停止按钮即可，先前的链接便会失效。\n在这里输入图片描述 [https://dn-coding-net-production-static.qbox.me/2dc00bb8-d486-412f-9090-63ef7ef10845.png?imageView2/2/w/800/h/800]\n\n项目内所有成员拥有创建公开分享链接的权限，也可以停止分享任一文件。\n\n\n文件动态&评论\n\n项目成员每一次对于文件的操作，如创建文档、上传新版本、重命名、删除整个文件或文件的某个版本、对文件进行评论等，将会用动态的形式记录并形成历史版本。\n在这里输入图片描述 [https://dn-coding-net-production-static.qbox.me/db76b8f1-3c30-45d3-9e0c-9f2d5e31fae4.png?imageView2/2/w/800/h/800]\n\n\n历史版本\n\n打开文件默认预览最新版本，历史版本支持添加备注、删除和下载和在线预览。所有项目成员可以上传新的文件版本，给历史版本添加备注和删除旧的文件版本。\n在这里输入图片描述 [https://dn-coding-net-production-static.qbox.me/2d162819-3a56-4496-920f-6f5ad5ef2fc3.png?imageView2/2/w/800/h/800]\n\n\n文件弹窗页\n\n点击文件名即可进入文件弹窗页，以上所有对文件的操作（除创建和上传初始版本文件）均可以在弹窗页进行，点击弹窗页右上角的 \n去详情页 \n图标即可进入文件详情页面。\n在这里输入图片描述 [https://dn-coding-net-production-pp.qbox.me/828cdee3-d2ae-459e-9775-a79b396e81c8.jpg]\n\n\n\n\n\n<div\nclass=\"footer-nav\">\n\n<div\nclass=\"left-nav\"><i\nclass=\"fa\nfa-angle-left\"></i><a\nhref=\"/help/doc/project/getting-started.html\">上一篇：开始使用项目管理</a></div>\n\n<div\nclass=\"right-nav\"><a\nhref=\"/help/doc/project/task.html\">下一篇：任务管理</a><i\nclass=\"fa\nfa-angle-right\"></i></div>\n\n</div>', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00'), ('38', '0', '项目管理使用手册', 'https://coding.net/help/doc/project/project-management.html', '---\nlayout: post\n\ntitle: 项目管理使用手册\n---\n\n## 1. 项目管理使用手册 ##\n\n本手册主要对 coding.net 旗下项目管理平台的相关功能进行介绍和简单演示。\n*Copyright by coding.net* \n持续更新中\n创建时间2015/7/25\n\n## 2. 关于项目 \n\n### 2.1 项目创建&设置\n\n#### 2.1.1 创建项目 \n\n用户登录之后，将鼠标移至右上角**添加**按钮并在下拉列表中选择**项目**，进入新建项目操作流程；或者将鼠标移至**头像**并在下拉列表中选择**项目**，进入我的项目页，再点击**添加**按钮，进入新建项目操作流程。\n![在这里输入图片描述][1]\n![在这里输入图片描述][2]\n注意：项目一旦创建，项目属性（私有或公开）便无法修改。\n\n#### 2.1.2 公开&私有项目的区别 \n\n公开项目是完全公开的，包括源码、项目讨论、质量控制等，只有项目成员可以编辑该项目，但任何用户都可以进行 fork，关注，收藏等操作。\n私有项目只对项目成员可见，并不会公开展示于项目成员的个人首页上。只有项目所有者才能添加项目成员，项目的所有内容和更新都只有项目成员可以进行操作和查看。\n\n#### 2.1.3 更新项目信息 \n\n只有项目所有者有权更新项目信息。\n在项目主页的左侧一级菜单栏选择**设置**，点击**基本设置**，可以对项目的名称、图标、描述和默认分支进行修改和更新。\n![在这里输入图片描述][3]\n注意：项目属性（私有或公开）一经确定，便不可修改。\n\n#### 2.1.4 删除项目 \n\n只有项目所有者有权删除项目。\n在项目主页的左侧一级菜单栏选择**设置**，点击**高级设置**，再点击**删除项目**，通过身份验证后，即可删除该项目。\n![在这里输入图片描述][4]\n注意：删除项目将会连同项目相关的所有数据（包括 issues、pull requests、动态等在内）一起删除且不可恢复，请慎重。\n\n#### 2.1.5 转让项目 \n\n只有项目所有者有权转让项目给项目成员。\n在项目主页的左侧一级菜单栏选择**设置**，点击**高级设置**，选择项目成员，再点击**转让项目**，通过身份验证后，即可删除该项目。\n![在这里输入图片描述][5]\n\n注意：转让项目时，项目成员不能为空，并且转让项目后原项目所有者的权限将一并移交给新的项目所有者，原项目所有者成为普通项目成员。\n\n#### 2.1.6 项目分组\n\n进入我的项目页，点击右上角**分组**，选中项目，再点击**移至新分组**按钮，并重命名新分组，即可移动项目到指定或新建分组。点击**返回**按钮即可中断项目分组操作。\n![在这里输入图片描述][6]\n\n#### 2.1.7 设置常用项目\n\n进入我的项目页，将鼠标移至目标项目，右上角将出现**白色大头针标识**，点击，即可设置该项目为常用项目。\n![在这里输入图片描述][7]\n此后将鼠标移至右上角**头像**处可以查看或设置常用项目。\n![在这里输入图片描述][8]\n\n### 2.2 项目成员\n\n#### 2.2.1 添加项目成员\n\n只有项目所有者有权限添加项目成员。\n在项目主页的左侧一级菜单栏中选择**成员**，点击**添加**按钮，即可进入添加项目成员弹窗页面。\n![在这里输入图片描述][9]\n![在这里输入图片描述][10]\n弹窗页面内，搜索框支持 email、用户名和唯一标识搜索添加；若点击**我关注的人**、**粉丝**和**我的项目**，即可查看其下所有个人账号，选中即可添加。\n如果该成员已经注册了 Coding 账号，您的邀请将会以私信的形式发送给 TA；如果该成员还没有 Coding 账号，您的邀请则以 email 的形式发送给 TA。\n\n#### 2.2.2 删除项目成员\n\n只有项目所有者有权限删除项目成员。\n在项目主页的左侧一级菜单栏中选择**成员**，选中项目成员并点击项目成员右边的**红色叉字**，即可删除对应项目成员。\n![在这里输入图片描述][11]\n\n#### 2.2.3 退出项目\n\n在项目主页的左侧一级菜单栏中选择**成员**，在项目成员列表里面找到自己并选中，然后点击**退出项目**；\n![在这里输入图片描述][12]\n或者在项目主页的左侧一级菜单栏中选择**设置**，点击**高级设置**，再点击**退出项目**。\n![在这里输入图片描述][13]\n\n## 3. 关于项目管理 \n\n### 3.1 项目管理 \n\n项目管理是 coding.net 向云端开发团队提供的社会化项目协作管理平台，团队成员之间可以自由地进行信息交流、文件共享、任务管理和项目讨论，让远程协作和项目管理变得简单高效。\n\n### 3.2 项目管理功能概述\n\n - 信息交流\n - 文件共享\n - 任务管理\n - 项目讨论\n\n### 3.3 关于项目文件\n\n项目文件中心支持对文件的上传、下载、协同编辑、在线预览、公开分享、删除等功能，每个文件都拥有动态和历史版本，项目成员可以在文件下评论和交流，并通过下载查看旧的文件版本。\n![在这里输入图片描述][14]\n\n#### 3.3.1 创建文件\n\n在项目主页的左侧一级菜单栏选择**文档**，点击头像下方的**创建**按钮并选择创建  TXT 或 Markdown 文档。\n[查看 Markdown 语法说明。][15]\n\n#### 3.3.2 上传文件\n\n在项目主页的左侧一级菜单栏选择**文档**，点击头像下方的**上传**按钮上传本地文件，或者直接拖拽文件到虚线框内上传。\n![在这里输入图片描述][16]\n\n注意：coding.net 支持所有格式文件的上传，一次性可以上传单个或多个文件，但单个文件应不超过50M ，否则不能成功上传。\n\n#### 3.3.3 编辑和重命名文件\n\n只有 TXT 或 Markdown 文档可以重新重命名并编辑，其余类型文件暂时支持重命名功能，项目内所有成员拥有编辑的权限。\n\n#### 3.3.4 删除文件\n\n项目所有者对所有文件具有删除的权限,文件上传者可以删除 TA 上传的文件，文档创建者可以删除 TA 创建的 TXT 和 Markdown 文档。\n创建项目文档文件夹之后，要删除这个文件夹需要先删除文件夹中的所有文件直到文件夹为空，该文件夹才可以被删除。\n\n#### 3.3.5 编辑列表\n\n项目内所有成员都有编辑列表的权限，点击**编辑列表**按钮并选中文件，再点击**移动到…**按钮即可自由地移动单个或多个文件至新的文件夹或者再点击**删除**按钮即可批量删除文件。\n![在这里输入图片描述][17]\n\n#### 3.3.6 分享文件\n\n点击文件名旁的**分享**图标，出现分享悬浮窗，点击**创建**按钮，再点击**复制**图标，即可获得可用于公开分享的链接。任何人可以通过链接访问被分享的文件并下载。\n若要停止分享，点击悬浮窗内的停止按钮即可，先前的链接便会失效。\n![在这里输入图片描述][18]\n项目内所有成员拥有创建公开分享链接的权限，也可以停止分享任一文件。\n\n#### 3.3.7 文件动态\n\n项目成员每一次对于文件的操作，如创建、上传新版本、重命名、删除、评论等，将会用动态的形式记录并形成历史版本。\n![在这里输入图片描述][19]\n\n#### 3.3.8 历史版本\n\n打开文件默认预览最新版本，历史版本支持添加备注、删除和下载和在线预览。所有项目成员可以上传新的文件版本，给历史版本添加备注和删除旧的文件版本。\n![在这里输入图片描述][20]\n\n### 3.4 关于任务管理\n\n任务管理是私有项目具有的特色功能，任务详情页会记录项目成员操作任务的每一次动态。所有项目成员可以快速创建任务并随时重新指派任务的执行人，在任务下迅捷地交流意见和建议，实时地跟踪任务的进度，促进任务的高效完成。\n\n - 任务详情页\n\n![在这里输入图片描述][21]\n\n - 项目内任务中心\n![在这里输入图片描述][22]\n\n - 我的任务页\n![在这里输入图片描述][23]\n\n#### 3.4.1  创建任务\n\n - 项目内任务中心创建任务\n在项目主页的左侧一级菜单栏选择**任务**，在屏幕上方的文本框输入任务标题和任务描述，点击左边的**日历**图标和**感叹号**图标选择任务截止日期和任务紧急程度，点击右边的**头像**图标选择任务执行成员，回车即可创建任务，如需给任务添加标签，可以点击任务下方的**时钟**按钮，进入任务详情页添加。\n![在这里输入图片描述][24]\n\n - 全局创建任务\n将鼠标移至右上角**添加**按钮并选择任务，在任务弹窗页面全局创建任务，并给任务加标签。全局创建任务后，页面出现任务创建提示，点击即可进入任务详情页。\n![在这里输入图片描述][25]\n\n注意：目前只有私有项目具有任务功能。\n\n#### 3.4.2  更新任务\n\n项目内任何成员都可以更新任务的标题、描述、紧急程度、截止日期、标签，重新分配任务执行者，详细操作和创建任务时相似。\n注意：在任务详情页可以修改任务的所有属性，在任务列表可以进行除添加标签以外的所有操作。\n\n#### 3.4.3  删除任务\n\n项目内成员不能删除他人创建的任务（项目所有者除外），只能删除自己创建的任务。\n\n#### 3.4.4  完成&重开任务\n\n点击正在进行中的任务内容左边的方框按钮，任务将更新为完成状态，方框内有“√”标志，任务内容被删除线覆盖。\n点击点击已完成的任务内容左边的方框按钮，任务将更新为重新开启状态状态。\n\n#### 3.4.5 添加任务标签\n\n全局创建或在任务详情页更新任务时，点击**添加**标签按钮，出现标签下拉列表，选中标签即可添加。\nTips：讨论标签和任务标签是通用的，并且添加标签时一次可以添加多个，还可以按标签查看任务。\n\n#### 3.4.6  # 标志\n\n每个任务都有一个独特的引用 ID。\n项目内的 Markdown 编辑器支持“#”自动提示，并通过 #ID 引用项目内任务和合并请求。\n\n#### 3.4.7  关注任务\n\n任务的创建者和执行者会自动关注当前任务。\n其余项目成员如需主动关注任务，可将鼠标移至任务列表的某一任务标题上，标题下一行将出现**眼睛**图标，点击即可关注；或者在任务详情页的右下角点击关注者右边的**添加**按钮，即可关注任务。\n\n#### 3.4.8  关联资源（待做）\n\n### 3.5 关于项目讨论\n\n - 私有项目\n项目讨论是只有项目成员可见的互动交流区域。该项目上的所有成员都可以在讨论区创建新的讨论帖，评论或者回复讨论。只有项目所有者和该讨论发起者可以编辑或删除已存在的讨论。\n![在这里输入图片描述][26]\n\n - 公开项目\n项目讨论完全是公开的，任何已登录用户都可以在讨论区创建新的讨论，评论或者回复讨论。但只有项目所有者和该讨论发起者可以编辑或删除已存在的讨论。\n![在这里输入图片描述][27]\n\n#### 3.5.1  创建讨论\n\n在项目主页的左侧一级菜单栏选择**讨论**，点击**添加**按钮，即可进入新讨论的创建页面。\n讨论的内容编辑框支持 Markdown 语法以及全屏预览功能。\n[点击此处][28]查看 Markdown 语法说明。\n\n#### 3.5.2  编辑&删除讨论\n\n只有项目创建者和该讨论创建者可以编辑或删除已存在的讨论。\n点击讨论标题下的**编辑**或**删除**图标，即可编辑和删除讨论。\n\n#### 3.5.3  添加讨论标签\n\n创建或编辑讨论时，点击**添加**标签按钮，出现标签下拉列表，选中标签即可添加。\nTips：私有项目的讨论和任务的标签是通用的，并且添加标签时一次可以添加多个，还可以按标签查看讨论。\n\n#### 3.5.4  # 标志\n\n项目内的 Markdown 编辑器支持“#”自动提示，并通过 #ID 引用项目内讨论、文件、任务和合并请求。\n公开项目仅能引用项目内讨论和 PR。\n\n#### 3.5.5  关注讨论\n\n讨论的创建者自动关注当前讨论。\n其余项目成员如需主动关注，点击讨论标题下的**眼睛**图标即可关注讨论，再次点击即可取消关注。\n公开项目的讨论任何人都可以主动关注。\n\n\n  [1]: https://dn-coding-net-production-static.qbox.me/92fe2d5a-e1f1-4454-b2e7-84040d5adfd5.png\n  [2]: https://dn-coding-net-production-static.qbox.me/617c33a3-522f-404e-a1d4-16155bf55950.jpg\n  [3]: https://dn-coding-net-production-static.qbox.me/8b821a8c-dfed-4fc2-9276-3a6542b2b3c7.png\n  [4]: https://dn-coding-net-production-static.qbox.me/a9326b6a-1fb7-456f-97d0-b3e969bea798.jpg?imageView2/2/w/800/h/800\n  [5]: https://dn-coding-net-production-static.qbox.me/91bc9f4a-8965-4d76-85dd-965c6b0e11ad.jpg?imageView2/2/w/800/h/800\n  [6]: https://dn-coding-net-production-static.qbox.me/e6149fa0-6c52-44e1-9348-5637d92322cf.jpg?imageView2/2/w/800/h/800\n  [7]: https://dn-coding-net-production-static.qbox.me/47e150d0-a369-456a-9e3f-dbcf53c54d0b.jpg?imageView2/2/w/800/h/800\n  [8]: https://dn-coding-net-production-static.qbox.me/d4743aad-13d0-46b4-8667-9d6066fe83a8.jpg?imageView2/2/w/800/h/800\n  [9]: https://dn-coding-net-production-static.qbox.me/ac3ba9d8-a05c-43d2-82e4-24daaa341040.jpg?imageView2/2/w/800/h/800\n  [10]: https://dn-coding-net-production-static.qbox.me/c27525a2-70a6-4ca3-964f-27518d0226c3.png?imageView2/2/w/800/h/800\n  [11]: https://dn-coding-net-production-static.qbox.me/150e0c74-cbf8-475a-99bf-2c1be8e0570a.png?imageView2/2/w/800/h/800\n  [12]: https://dn-coding-net-production-static.qbox.me/1bb18b92-2629-40cf-add3-69d843de7d79.png?imageView2/2/w/800/h/800\n  [13]: https://dn-coding-net-production-static.qbox.me/5222465a-4545-404c-9b59-2d782a325955.png?imageView2/2/w/800/h/800\n  [14]: https://dn-coding-net-production-static.qbox.me/bcd21f3c-1893-412a-af07-e8e9a383312d.png?imageView2/2/w/800/h/800\n  [15]: https://coding.net/u/coding/p/Coding-Feedback/git/blob/master/markdown-syntax.md\n  [16]: https://dn-coding-net-production-static.qbox.me/168ec032-475f-4660-bfb0-9a02ded0e769.jpg?imageView2/2/w/800/h/800\n  [17]: https://dn-coding-net-production-static.qbox.me/9cffca9e-06ea-43bc-8a74-2db1462e71e1.png?imageView2/2/w/800/h/800\n  [18]: https://dn-coding-net-production-static.qbox.me/2dc00bb8-d486-412f-9090-63ef7ef10845.png?imageView2/2/w/800/h/800\n  [19]: https://dn-coding-net-production-static.qbox.me/db76b8f1-3c30-45d3-9e0c-9f2d5e31fae4.png?imageView2/2/w/800/h/800\n  [20]: https://dn-coding-net-production-static.qbox.me/2d162819-3a56-4496-920f-6f5ad5ef2fc3.png?imageView2/2/w/800/h/800\n  [21]: https://dn-coding-net-production-static.qbox.me/f7b47f09-eb7b-4a5d-b8d7-069d1995ede4.png?imageView2/2/w/800/h/800\n  [22]: https://dn-coding-net-production-static.qbox.me/1a666602-7b07-4a8c-b504-10a418ae185e.jpg?imageView2/2/w/800/h/800\n  [23]: https://dn-coding-net-production-static.qbox.me/0bfbda67-6a5e-4f39-94bc-c9fae18c87e6.png?imageView2/2/w/800/h/800\n  [24]: https://dn-coding-net-production-static.qbox.me/7d818d4e-bd20-4467-8f15-dcb4f5087b93.png?imageView2/2/w/800/h/800\n  [25]: https://dn-coding-net-production-static.qbox.me/f09dbf3f-8a36-4cb3-9197-073e31e3951c.png?imageView2/2/w/800/h/800\n  [26]: https://dn-coding-net-production-static.qbox.me/72516dfe-529a-4ed3-a20b-a8cdc2f249b9.png?imageView2/2/w/800/h/800\n  [27]: https://dn-coding-net-production-static.qbox.me/a161eaef-b710-4151-bffb-2eea37c4093d.png?imageView2/2/w/800/h/800\n  [28]: https://dn-coding-net-production-static.qbox.me/2d162819-3a56-4496-920f-6f5ad5ef2fc3.png?imageView2/2/w/800/h/800', '1.\n项目管理使用手册\n\n本手册主要对\ncoding.net\n旗下项目管理平台的相关功能进行介绍和简单演示。\n\nCopyright\nby\ncoding.net\n\n持续更新中\n\n创建时间2015/7/25\n\n\n2.\n关于项目\n\n2.1\n项目创建&设置\n\n2.1.1\n创建项目\n\n用户登录之后，将鼠标移至右上角 \n添加 \n按钮并在下拉列表中选择 \n项目 \n，进入新建项目操作流程；或者将鼠标移至 \n头像 \n并在下拉列表中选择 \n项目 \n，进入我的项目页，再点击 \n添加 \n按钮，进入新建项目操作流程。\n在这里输入图片描述 [https://dn-coding-net-production-static.qbox.me/92fe2d5a-e1f1-4454-b2e7-84040d5adfd5.png]\n在这里输入图片描述 [https://dn-coding-net-production-static.qbox.me/617c33a3-522f-404e-a1d4-16155bf55950.jpg]\n\n注意：项目一旦创建，项目属性（私有或公开）便无法修改。\n\n\n2.1.2\n公开&私有项目的区别\n\n公开项目是完全公开的，包括源码、项目讨论、质量控制等，只有项目成员可以编辑该项目，但任何用户都可以进行\nfork，关注，收藏等操作。\n\n私有项目只对项目成员可见，并不会公开展示于项目成员的个人首页上。只有项目所有者才能添加项目成员，项目的所有内容和更新都只有项目成员可以进行操作和查看。\n\n\n2.1.3\n更新项目信息\n\n只有项目所有者有权更新项目信息。\n\n在项目主页的左侧一级菜单栏选择 \n设置 \n，点击 \n基本设置 \n，可以对项目的名称、图标、描述和默认分支进行修改和更新。\n在这里输入图片描述 [https://dn-coding-net-production-static.qbox.me/8b821a8c-dfed-4fc2-9276-3a6542b2b3c7.png]\n\n注意：项目属性（私有或公开）一经确定，便不可修改。\n\n\n2.1.4\n删除项目\n\n只有项目所有者有权删除项目。\n\n在项目主页的左侧一级菜单栏选择 \n设置 \n，点击 \n高级设置 \n，再点击 \n删除项目 \n，通过身份验证后，即可删除该项目。\n在这里输入图片描述 [https://dn-coding-net-production-static.qbox.me/a9326b6a-1fb7-456f-97d0-b3e969bea798.jpg?imageView2/2/w/800/h/800]\n\n注意：删除项目将会连同项目相关的所有数据（包括\nissues、pull\nrequests、动态等在内）一起删除且不可恢复，请慎重。\n\n\n2.1.5\n转让项目\n\n只有项目所有者有权转让项目给项目成员。\n\n在项目主页的左侧一级菜单栏选择 \n设置 \n，点击 \n高级设置 \n，选择项目成员，再点击 \n转让项目 \n，通过身份验证后，即可删除该项目。\n在这里输入图片描述 [https://dn-coding-net-production-static.qbox.me/91bc9f4a-8965-4d76-85dd-965c6b0e11ad.jpg?imageView2/2/w/800/h/800]\n\n\n注意：转让项目时，项目成员不能为空，并且转让项目后原项目所有者的权限将一并移交给新的项目所有者，原项目所有者成为普通项目成员。\n\n\n2.1.6\n项目分组\n\n进入我的项目页，点击右上角 \n分组 \n，选中项目，再点击 \n移至新分组 \n按钮，并重命名新分组，即可移动项目到指定或新建分组。点击 \n返回 \n按钮即可中断项目分组操作。\n在这里输入图片描述 [https://dn-coding-net-production-static.qbox.me/e6149fa0-6c52-44e1-9348-5637d92322cf.jpg?imageView2/2/w/800/h/800]\n\n\n2.1.7\n设置常用项目\n\n进入我的项目页，将鼠标移至目标项目，右上角将出现 \n白色大头针标识 \n，点击，即可设置该项目为常用项目。\n在这里输入图片描述 [https://dn-coding-net-production-static.qbox.me/47e150d0-a369-456a-9e3f-dbcf53c54d0b.jpg?imageView2/2/w/800/h/800]\n\n此后将鼠标移至右上角 \n头像 \n处可以查看或设置常用项目。\n在这里输入图片描述 [https://dn-coding-net-production-static.qbox.me/d4743aad-13d0-46b4-8667-9d6066fe83a8.jpg?imageView2/2/w/800/h/800]\n\n\n2.2\n项目成员\n\n2.2.1\n添加项目成员\n\n只有项目所有者有权限添加项目成员。\n\n在项目主页的左侧一级菜单栏中选择 \n成员 \n，点击 \n添加 \n按钮，即可进入添加项目成员弹窗页面。\n在这里输入图片描述 [https://dn-coding-net-production-static.qbox.me/ac3ba9d8-a05c-43d2-82e4-24daaa341040.jpg?imageView2/2/w/800/h/800]\n在这里输入图片描述 [https://dn-coding-net-production-static.qbox.me/c27525a2-70a6-4ca3-964f-27518d0226c3.png?imageView2/2/w/800/h/800]\n\n弹窗页面内，搜索框支持\nemail、用户名和唯一标识搜索添加；若点击 \n我关注的人 \n、 \n粉丝 \n和 \n我的项目 \n，即可查看其下所有个人账号，选中即可添加。\n\n如果该成员已经注册了\nCoding\n账号，您的邀请将会以私信的形式发送给\nTA；如果该成员还没有\nCoding\n账号，您的邀请则以\nemail\n的形式发送给\nTA。\n\n\n2.2.2\n删除项目成员\n\n只有项目所有者有权限删除项目成员。\n\n在项目主页的左侧一级菜单栏中选择 \n成员 \n，选中项目成员并点击项目成员右边的 \n红色叉字 \n，即可删除对应项目成员。\n在这里输入图片描述 [https://dn-coding-net-production-static.qbox.me/150e0c74-cbf8-475a-99bf-2c1be8e0570a.png?imageView2/2/w/800/h/800]\n\n\n2.2.3\n退出项目\n\n在项目主页的左侧一级菜单栏中选择 \n成员 \n，在项目成员列表里面找到自己并选中，然后点击 \n退出项目 \n；\n在这里输入图片描述 [https://dn-coding-net-production-static.qbox.me/1bb18b92-2629-40cf-add3-69d843de7d79.png?imageView2/2/w/800/h/800]\n\n或者在项目主页的左侧一级菜单栏中选择 \n设置 \n，点击 \n高级设置 \n，再点击 \n退出项目 \n。\n在这里输入图片描述 [https://dn-coding-net-production-static.qbox.me/5222465a-4545-404c-9b59-2d782a325955.png?imageView2/2/w/800/h/800]\n\n\n3.\n关于项目管理\n\n3.1\n项目管理\n\n项目管理是\ncoding.net\n向云端开发团队提供的社会化项目协作管理平台，团队成员之间可以自由地进行信息交流、文件共享、任务管理和项目讨论，让远程协作和项目管理变得简单高效。\n\n\n3.2\n项目管理功能概述\n * \n   信息交流\n * \n   文件共享\n * \n   任务管理\n * \n   项目讨论\n\n\n3.3\n关于项目文件\n\n项目文件中心支持对文件的上传、下载、协同编辑、在线预览、公开分享、删除等功能，每个文件都拥有动态和历史版本，项目成员可以在文件下评论和交流，并通过下载查看旧的文件版本。\n在这里输入图片描述 [https://dn-coding-net-production-static.qbox.me/bcd21f3c-1893-412a-af07-e8e9a383312d.png?imageView2/2/w/800/h/800]\n\n\n3.3.1\n创建文件\n\n在项目主页的左侧一级菜单栏选择 \n文档 \n，点击头像下方的 \n创建 \n按钮并选择创建\nTXT\n或\nMarkdown\n文档。\n\n查看\nMarkdown\n语法说明。\n[https://coding.net/u/coding/p/Coding-Feedback/git/blob/master/markdown-syntax.md]\n\n\n3.3.2\n上传文件\n\n在项目主页的左侧一级菜单栏选择 \n文档 \n，点击头像下方的 \n上传 \n按钮上传本地文件，或者直接拖拽文件到虚线框内上传。\n在这里输入图片描述 [https://dn-coding-net-production-static.qbox.me/168ec032-475f-4660-bfb0-9a02ded0e769.jpg?imageView2/2/w/800/h/800]\n\n\n注意：coding.net\n支持所有格式文件的上传，一次性可以上传单个或多个文件，但单个文件应不超过50M\n，否则不能成功上传。\n\n\n3.3.3\n编辑和重命名文件\n\n只有\nTXT\n或\nMarkdown\n文档可以重新重命名并编辑，其余类型文件暂时支持重命名功能，项目内所有成员拥有编辑的权限。\n\n\n3.3.4\n删除文件\n\n项目所有者对所有文件具有删除的权限,文件上传者可以删除\nTA\n上传的文件，文档创建者可以删除\nTA\n创建的\nTXT\n和\nMarkdown\n文档。\n\n创建项目文档文件夹之后，要删除这个文件夹需要先删除文件夹中的所有文件直到文件夹为空，该文件夹才可以被删除。\n\n\n3.3.5\n编辑列表\n\n项目内所有成员都有编辑列表的权限，点击 \n编辑列表 \n按钮并选中文件，再点击 \n移动到… \n按钮即可自由地移动单个或多个文件至新的文件夹或者再点击 \n删除 \n按钮即可批量删除文件。\n在这里输入图片描述 [https://dn-coding-net-production-static.qbox.me/9cffca9e-06ea-43bc-8a74-2db1462e71e1.png?imageView2/2/w/800/h/800]\n\n\n3.3.6\n分享文件\n\n点击文件名旁的 \n分享 \n图标，出现分享悬浮窗，点击 \n创建 \n按钮，再点击 \n复制 \n图标，即可获得可用于公开分享的链接。任何人可以通过链接访问被分享的文件并下载。\n\n若要停止分享，点击悬浮窗内的停止按钮即可，先前的链接便会失效。\n在这里输入图片描述 [https://dn-coding-net-production-static.qbox.me/2dc00bb8-d486-412f-9090-63ef7ef10845.png?imageView2/2/w/800/h/800]\n\n项目内所有成员拥有创建公开分享链接的权限，也可以停止分享任一文件。\n\n\n3.3.7\n文件动态\n\n项目成员每一次对于文件的操作，如创建、上传新版本、重命名、删除、评论等，将会用动态的形式记录并形成历史版本。\n在这里输入图片描述 [https://dn-coding-net-production-static.qbox.me/db76b8f1-3c30-45d3-9e0c-9f2d5e31fae4.png?imageView2/2/w/800/h/800]\n\n\n3.3.8\n历史版本\n\n打开文件默认预览最新版本，历史版本支持添加备注、删除和下载和在线预览。所有项目成员可以上传新的文件版本，给历史版本添加备注和删除旧的文件版本。\n在这里输入图片描述 [https://dn-coding-net-production-static.qbox.me/2d162819-3a56-4496-920f-6f5ad5ef2fc3.png?imageView2/2/w/800/h/800]\n\n\n3.4\n关于任务管理\n\n任务管理是私有项目具有的特色功能，任务详情页会记录项目成员操作任务的每一次动态。所有项目成员可以快速创建任务并随时重新指派任务的执行人，在任务下迅捷地交流意见和建议，实时地跟踪任务的进度，促进任务的高效完成。\n\n * \n   任务详情页\n\n在这里输入图片描述 [https://dn-coding-net-production-static.qbox.me/f7b47f09-eb7b-4a5d-b8d7-069d1995ede4.png?imageView2/2/w/800/h/800]\n\n * \n   项目内任务中心\n   在这里输入图片描述 [https://dn-coding-net-production-static.qbox.me/1a666602-7b07-4a8c-b504-10a418ae185e.jpg?imageView2/2/w/800/h/800]\n   \n   \n * \n   我的任务页\n   在这里输入图片描述 [https://dn-coding-net-production-static.qbox.me/0bfbda67-6a5e-4f39-94bc-c9fae18c87e6.png?imageView2/2/w/800/h/800]\n   \n   \n\n\n3.4.1\n创建任务\n * \n   项目内任务中心创建任务\n   \n   在项目主页的左侧一级菜单栏选择 \n   任务 \n   ，在屏幕上方的文本框输入任务标题和任务描述，点击左边的 \n   日历 \n   图标和 \n   感叹号 \n   图标选择任务截止日期和任务紧急程度，点击右边的 \n   头像 \n   图标选择任务执行成员，回车即可创建任务，如需给任务添加标签，可以点击任务下方的 \n   时钟 \n   按钮，进入任务详情页添加。\n   在这里输入图片描述 [https://dn-coding-net-production-static.qbox.me/7d818d4e-bd20-4467-8f15-dcb4f5087b93.png?imageView2/2/w/800/h/800]\n   \n   \n * \n   全局创建任务\n   \n   将鼠标移至右上角 \n   添加 \n   按钮并选择任务，在任务弹窗页面全局创建任务，并给任务加标签。全局创建任务后，页面出现任务创建提示，点击即可进入任务详情页。\n   在这里输入图片描述 [https://dn-coding-net-production-static.qbox.me/f09dbf3f-8a36-4cb3-9197-073e31e3951c.png?imageView2/2/w/800/h/800]\n   \n   \n\n\n注意：目前只有私有项目具有任务功能。\n\n\n3.4.2\n更新任务\n\n项目内任何成员都可以更新任务的标题、描述、紧急程度、截止日期、标签，重新分配任务执行者，详细操作和创建任务时相似。\n\n注意：在任务详情页可以修改任务的所有属性，在任务列表可以进行除添加标签以外的所有操作。\n\n\n3.4.3\n删除任务\n\n项目内成员不能删除他人创建的任务（项目所有者除外），只能删除自己创建的任务。\n\n\n3.4.4\n完成&重开任务\n\n点击正在进行中的任务内容左边的方框按钮，任务将更新为完成状态，方框内有“√”标志，任务内容被删除线覆盖。\n\n点击点击已完成的任务内容左边的方框按钮，任务将更新为重新开启状态状态。\n\n\n3.4.5\n添加任务标签\n\n全局创建或在任务详情页更新任务时，点击 \n添加 \n标签按钮，出现标签下拉列表，选中标签即可添加。\n\nTips：讨论标签和任务标签是通用的，并且添加标签时一次可以添加多个，还可以按标签查看任务。\n\n\n3.4.6\n#\n标志\n\n每个任务都有一个独特的引用\nID。\n\n项目内的\nMarkdown\n编辑器支持“#”自动提示，并通过\n#ID\n引用项目内任务和合并请求。\n\n\n3.4.7\n关注任务\n\n任务的创建者和执行者会自动关注当前任务。\n\n其余项目成员如需主动关注任务，可将鼠标移至任务列表的某一任务标题上，标题下一行将出现 \n眼睛 \n图标，点击即可关注；或者在任务详情页的右下角点击关注者右边的 \n添加 \n按钮，即可关注任务。\n\n\n3.4.8\n关联资源（待做）\n\n3.5\n关于项目讨论\n * \n   私有项目\n   \n   项目讨论是只有项目成员可见的互动交流区域。该项目上的所有成员都可以在讨论区创建新的讨论帖，评论或者回复讨论。只有项目所有者和该讨论发起者可以编辑或删除已存在的讨论。\n   在这里输入图片描述 [https://dn-coding-net-production-static.qbox.me/72516dfe-529a-4ed3-a20b-a8cdc2f249b9.png?imageView2/2/w/800/h/800]\n   \n   \n * \n   公开项目\n   \n   项目讨论完全是公开的，任何已登录用户都可以在讨论区创建新的讨论，评论或者回复讨论。但只有项目所有者和该讨论发起者可以编辑或删除已存在的讨论。\n   在这里输入图片描述 [https://dn-coding-net-production-static.qbox.me/a161eaef-b710-4151-bffb-2eea37c4093d.png?imageView2/2/w/800/h/800]\n   \n   \n\n\n3.5.1\n创建讨论\n\n在项目主页的左侧一级菜单栏选择 \n讨论 \n，点击 \n添加 \n按钮，即可进入新讨论的创建页面。\n\n讨论的内容编辑框支持\nMarkdown\n语法以及全屏预览功能。\n\n点击此处\n[https://dn-coding-net-production-static.qbox.me/2d162819-3a56-4496-920f-6f5ad5ef2fc3.png?imageView2/2/w/800/h/800] \n查看\nMarkdown\n语法说明。\n\n\n3.5.2\n编辑&删除讨论\n\n只有项目创建者和该讨论创建者可以编辑或删除已存在的讨论。\n\n点击讨论标题下的 \n编辑 \n或 \n删除 \n图标，即可编辑和删除讨论。\n\n\n3.5.3\n添加讨论标签\n\n创建或编辑讨论时，点击 \n添加 \n标签按钮，出现标签下拉列表，选中标签即可添加。\n\nTips：私有项目的讨论和任务的标签是通用的，并且添加标签时一次可以添加多个，还可以按标签查看讨论。\n\n\n3.5.4\n#\n标志\n\n项目内的\nMarkdown\n编辑器支持“#”自动提示，并通过\n#ID\n引用项目内讨论、文件、任务和合并请求。\n\n公开项目仅能引用项目内讨论和\nPR。\n\n\n3.5.5\n关注讨论\n\n讨论的创建者自动关注当前讨论。\n\n其余项目成员如需主动关注，点击讨论标题下的 \n眼睛 \n图标即可关注讨论，再次点击即可取消关注。\n\n公开项目的讨论任何人都可以主动关注。', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00'), ('39', '0', '项目管理介绍', 'https://coding.net/help/doc/project/index.html', '---\nlayout: post\n\ntitle: 项目管理介绍\n---\n\n本手册主要对 coding.net 旗下项目管理平台的相关功能进行介绍和简单演示。\n\n*Copyright by coding.net* \n持续更新中  最近更新时间2015/9/1\n\n## 关于项目管理 \n\nCoding.net 在 Git 代码托管的基础上自主研发一套供软件开发人员使用的项目管理和团队协作工具。为了提高团队协作下软件开发的效率。\n\n团队协作以项目为单位。一个账号可以创建多个项目，一个项目可以添加多个项目成员。\n\n 主要功能如下：\n \n - Git 代码操作整合\n - 任务管理\n - 讨论管理\n - 在线文件管理\n \n\n\n## 下一篇 >> [开始使用项目管理](/help/doc/project/getting-started.html)', '本手册主要对\ncoding.net\n旗下项目管理平台的相关功能进行介绍和简单演示。\n\n\nCopyright\nby\ncoding.net\n\n持续更新中\n最近更新时间2015/9/1\n\n\n关于项目管理\n\nCoding.net\n在\nGit\n代码托管的基础上自主研发一套供软件开发人员使用的项目管理和团队协作工具。为了提高团队协作下软件开发的效率。\n\n\n团队协作以项目为单位。一个账号可以创建多个项目，一个项目可以添加多个项目成员。\n\n\n主要功能如下：\n\n * \n   Git\n   代码操作整合\n * \n   任务管理\n * \n   讨论管理\n * \n   在线文件管理\n\n\n下一篇\n>> \n开始使用项目管理\n[/HELP/DOC/PROJECT/GETTING-STARTED.HTML]', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00'), ('40', '0', '运行程序', 'https://coding.net/help/doc/webide/execution.html', '---\nlayout: post\n\ntitle: 运行程序\n---  \n\n\n## 运行程序###\n\n### 在终端运行程序\n\n编写好的代码可以在终端( Terminal ) 里面运行，对于需要创建外部访问链接的应用需要明确绑定到 0.0.0.0 地址, 比如：\n\n    ➜  workspace git:(master) ✗ ruby app.rb -o 0.0.0.0 -p 8080                                                                                            \n    == Sinatra (v1.4.6) has taken the stage on 8080 for development with backup from Thin                                                                 \n    Thin web server (v1.6.3 codename Protein Powder)                                                                                                      \n    Maximum connections set to 1024                                                                                                                       \n    Listening on 0.0.0.0:8080, CTRL+C to stop        \n\n>需要强调一下，绑定在本地回环地址 127.0.0.1 是无效的。\n\n\n### 创建外部访问链接( Generate Access Url )\n\nWebIDE 支持为编写好的程序创建一个外部可以访问的链接，有效期 1 个小时，点击菜单的 Tools -> Generate Access Url 如下图。\n\n![图片](https://dn-coding-net-production-pp.qbox.me/543dfde7-8bf0-49a8-95c8-80c33f18c106.png) \n\n设置你需要绑定的端口，需要跟程序运行监听的端口一致, 如上面的8080，点击链接访问如下：\n\n![图片](https://dn-coding-net-production-pp.qbox.me/1bca4b34-acbd-423c-a393-4380978bbff8.png) \n                                        \n\n\n  <div class=\"footer-nav\">\n  <div class=\"left-nav\"><i class=\"fa fa-angle-left\"></i><a href=\"/help/doc/webide/terminal.html\">上一篇：终端</a></div>\n  </div>\n', '运行程序\n\n在终端运行程序\n\n编写好的代码可以在终端(\nTerminal\n)\n里面运行，对于需要创建外部访问链接的应用需要明确绑定到\n0.0.0.0\n地址,\n比如：\n\n➜  workspace git:(master) ✗ ruby app.rb -o 0.0.0.0 -p 8080                                                                                            \n== Sinatra (v1.4.6) has taken the stage on 8080 for development with backup from Thin                                                                 \nThin web server (v1.6.3 codename Protein Powder)                                                                                                      \nMaximum connections set to 1024                                                                                                                       \nListening on 0.0.0.0:8080, CTRL+C to stop        \n\n\n\n需要强调一下，绑定在本地回环地址\n127.0.0.1\n是无效的。\n\n\n创建外部访问链接(\nGENERATE\nACCESS\nURL\n)\n\nWebIDE\n支持为编写好的程序创建一个外部可以访问的链接，有效期\n1\n个小时，点击菜单的\nTools\n->\nGenerate\nAccess\nUrl\n如下图。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/543dfde7-8bf0-49a8-95c8-80c33f18c106.png]\n\n\n设置你需要绑定的端口，需要跟程序运行监听的端口一致,\n如上面的8080，点击链接访问如下：\n\n图片 [https://dn-coding-net-production-pp.qbox.me/1bca4b34-acbd-423c-a393-4380978bbff8.png]\n\n\n<div\nclass=\"footer-nav\">\n\n<div\nclass=\"left-nav\"><i\nclass=\"fa\nfa-angle-left\"></i><a\nhref=\"/help/doc/webide/terminal.html\">上一篇：终端</a></div>\n\n</div>', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00'), ('41', '0', 'Markdown语法介绍', 'https://coding.net/help/doc/project/markdown.html', '---\nlayout: post\n\ntitle: Markdown语法介绍\n---\n\n### 什么是Markdown语法？\n\nMarkdown 是一种轻量级标记语言，目标是实现「易读易写」。Coding.net的许多版块都采用了Markdown语法，比如冒泡，讨论，Pull Request等。\n\n\n### 标题\n\n在Markdown中，你只需要在文本前面加上# 即可，同理、你还可以增加二级标题、三级标题、四级标题、五级标题和六级标题，总共六级，只需要增加# 即可，标题字号相应降低。例如：\n\n    # 一级标题\n    ## 二级标题\n    ### 三级标题\n    #### 四级标题\n    ##### 五级标题\n    ###### 六级标题\n\n*点击预览可以看到效果：*\n\n![在这里输入图片描述][1]\n\n### 锚点\n\nCoding 会针对每个标题，在解析时都会添加锚点id，如\n\n```\n# 锚点\n```\n\n会被解析成：\n\n````\n<h1 id=\"user-content-锚点\">锚点</h1>\n````\n\n注意我们添加了一个user-content-的前缀所以如果要自己添加跳转链接要使用markdown的形式，且链接要加一个\'user-content-\'前缀，如：\n\n```\n[问内链接](#user-content-锚点);\n```\n\n###引用\nMarkdown 标记区块引用是使用类似 email 中用 > 的引用方式，只需要在整个段落的第一行最前面加上 > ：\n\n    > Coding.net 为软件开发者提供基于云计算技术的软件开发平台，包括项目管理，代码托管，运行空间和质量控制等等。\n\n*效果图如下：*\n\n![在这里输入图片描述][2]\n\n区块引用可以嵌套，只要根据层次加上不同数量的 > ：\n\n    > 这是第一级引用。\n    >\n    > > 这是第二级引用。\n    >\n    > 现在回到第一级引用。\n\n*效果图如下：*\n\n![在这里输入图片描述][3]\n\n引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：\n\n    > ## 这是一个标题。\n    >\n    > 1. 这是第一行列表项。\n    > 2. 这是第二行列表项。\n    >\n    > 给出一些例子代码：\n    >\n    > return shell_exec(\"echo $input | $markdown_script\");\n\n*效果图如下：*\n\n![在这里输入图片描述][4]\n\n\n###列表\n列表项目标记通常放在最左边，项目标记后面要接一个字符的空格。\n**无序列表**：使用星号、加号或是减号作为列表标记\n\n    - Red\n    - Green\n    - Blue\n\n*效果图如下：*\n\n![在这里输入图片描述][5]\n\n\n有序列表：使用数字接着一个英文句点\n\n    1. Red\n    2. Green\n    3. Blue\n\n\n*效果图如下：*\n\n![在这里输入图片描述][6]\n\n如果要在列表项目内放进引用，那 > 就需要缩进：\n\n    *  Coding.net有以下主要功能:\n        > 代码托管平台\n        > 在线运行环境    \n        > 代码质量监控    \n        > 项目管理平台\n\n*效果图如下：*\n\n![在这里输入图片描述][7]\n\n\n### 代码\n\n只要把你的代码块包裹在 ``` 之间，你就不需要通过无休止的缩进来标记代码块了。\n在围栏式代码块中，你可以指定一个可选的语言标识符，然后我们就可以为它启用语法着色了。\n举个例子，这样可以为一段 Ruby 代码着色：\n\n    ```ruby\n    require \'redcarpet\'\n    markdown = Redcarpet.new(\"Hello World!\")\n    puts markdown.to_html\n    ```\n\n*效果图如下：*\n\n![在这里输入图片描述][8]\n\n\n### 强调\n\n在Markdown中，可以使用 * 和 _ 来表示斜体和加粗。\n\n斜体：\n\n    *Coding，让开发更简单*\n    _Coding，让开发更简单_\n\n*效果图如下：*\n\n![在这里输入图片描述][9]\n\n加粗：\n\n    **Coding，让开发更简单**\n    __Coding，让开发更简单__\n\n*效果图如下：*\n\n![在这里输入图片描述][10]\n\n\n\n### 自动链接\n方括号显示说明，圆括号内显示网址， Markdown 会自动把它转成链接，例如：\n\n    [超强大的云开发平台Coding](http://coding.net)\n\n*效果图如下：*\n\n![在这里输入图片描述][11]\n\n或者也可以直接用< >，将网址或者邮箱地址放在中间，也能将地址直接转成链接：\n\n    <support@coding.net>\n\n*效果图如下：*\n\n![在这里输入图片描述][12]\n\n\n\n### 表格\n在 Markdown 中，可以制作表格，例如：\n\n    ```\n    \n    First Header | Second Header | Third Header\n    ------------ | ------------- | ------------\n    Content Cell | Content Cell  | Content Cell\n    Content Cell | Content Cell  | Content Cell\n    \n    ```\n    \n*效果图如下：*\n\n![在这里输入图片描述][13]\n\n或者也可以让表格两边内容对齐，中间内容居中，例如：\n\n    ```\n    \n    First Header | Second Header | Third Header\n    :----------- | :-----------: | -----------:\n    Left         | Center        | Right\n    Left         | Center        | Right\n    \n    ```\n\n*效果图如下：*\n\n![在这里输入图片描述][14]\n\n\n\n  [1]: https://dn-coding-net-production-pp.qbox.me/d46c3a8f-b74a-4008-ad1d-a56be443d5fa.png\n  [2]: https://dn-coding-net-production-pp.qbox.me/d735ad0c-2113-48dd-ae5d-2d3b3fca6977.png\n  [3]: https://dn-coding-net-production-pp.qbox.me/db2ce6d5-5dc9-4c92-b226-50174d853eb9.png\n  [4]: https://dn-coding-net-production-pp.qbox.me/58bc73bd-f1ba-4cc1-9d90-24758e099de7.png\n  [5]: https://dn-coding-net-production-pp.qbox.me/d5772b14-8976-4e9f-945b-4b06d2a6e8f1.png\n  [6]: https://dn-coding-net-production-pp.qbox.me/d0321f44-c344-43d4-817e-9040735cf5b3.png\n  [7]: https://dn-coding-net-production-pp.qbox.me/21bfcf00-3a71-4b90-9f6e-e692dd3100a2.png\n  [8]: https://dn-coding-net-production-pp.qbox.me/64a6b611-e0b9-443d-b7a2-c134613b63f9.png\n  [9]: https://dn-coding-net-production-pp.qbox.me/0e72e420-fd75-4dc8-8093-66a57e38cd68.png\n  [10]: https://dn-coding-net-production-pp.qbox.me/372a6abf-f801-4a70-9f20-49f9e7db632d.png\n  [11]: https://dn-coding-net-production-pp.qbox.me/3aeea7b8-a675-4491-adbb-b64b1145ff1a.png\n  [12]: https://dn-coding-net-production-pp.qbox.me/c028625a-182b-4f76-8805-245c0e27e389.png\n  [13]: https://dn-coding-net-production-pp.qbox.me/9a77d37a-95d4-4ad6-ab09-0d41f766fe34.jpg\n  [14]: https://dn-coding-net-production-pp.qbox.me/0d4014c0-3f54-462a-8a99-4706c62b9e5e.jpg\n  \n  \n### 分割线\n\n在 Markdown 中，可以制作分割线，例如：\n\n```\n---\n```\n\n*效果图如下：*\n\n![在这里输入图片描述][15]\n\n  [15]: https://dn-coding-net-production-pp.qbox.me/aeb88b18-688b-41e9-a4a3-0f970ab3af3e.png\n  \n  \n### 上下标\n\n\\^表示上标, _表示下标。如果上下标的内容多于一个字符，要用{}把这些内容括起来当成一个整体。上下标是可以嵌套的，也可以同时使用。\n例如：\n\n```\nx^{y^z}=(1+{\\rm e}^x)^{-2xy^w}\n```\n\n*效果图如下：*\n\n![在这里输入图片描述][16]\n\n  [16]: https://dn-coding-net-production-pp.qbox.me/ce4167be-058d-4cfc-9848-49ef2aebee94.png\n', '什么是MARKDOWN语法？\n\nMarkdown\n是一种轻量级标记语言，目标是实现「易读易写」。Coding.net的许多版块都采用了Markdown语法，比如冒泡，讨论，Pull\nRequest等。\n\n\n标题\n\n在Markdown中，你只需要在文本前面加上#\n即可，同理、你还可以增加二级标题、三级标题、四级标题、五级标题和六级标题，总共六级，只需要增加#\n即可，标题字号相应降低。例如：\n\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n\n\n\n点击预览可以看到效果：\n\n在这里输入图片描述 [https://dn-coding-net-production-pp.qbox.me/d46c3a8f-b74a-4008-ad1d-a56be443d5fa.png]\n\n\n锚点\n\nCoding\n会针对每个标题，在解析时都会添加锚点id，如\n\n# 锚点\n\n\n\n会被解析成：\n\n<h1 id=\"user-content-锚点\">锚点</h1>\n\n\n\n注意我们添加了一个user-content-的前缀所以如果要自己添加跳转链接要使用markdown的形式，且链接要加一个\'user-content-\'前缀，如：\n\n[问内链接](#user-content-锚点);\n\n\n\n###引用\n\nMarkdown\n标记区块引用是使用类似\nemail\n中用\n>\n的引用方式，只需要在整个段落的第一行最前面加上\n>\n：\n\n> Coding.net 为软件开发者提供基于云计算技术的软件开发平台，包括项目管理，代码托管，运行空间和质量控制等等。\n\n\n\n效果图如下：\n\n在这里输入图片描述 [https://dn-coding-net-production-pp.qbox.me/d735ad0c-2113-48dd-ae5d-2d3b3fca6977.png]\n\n\n区块引用可以嵌套，只要根据层次加上不同数量的\n>\n：\n\n> 这是第一级引用。\n>\n> > 这是第二级引用。\n>\n> 现在回到第一级引用。\n\n\n\n效果图如下：\n\n在这里输入图片描述 [https://dn-coding-net-production-pp.qbox.me/db2ce6d5-5dc9-4c92-b226-50174d853eb9.png]\n\n\n引用的区块内也可以使用其他的\nMarkdown\n语法，包括标题、列表、代码区块等：\n\n> ## 这是一个标题。\n>\n> 1. 这是第一行列表项。\n> 2. 这是第二行列表项。\n>\n> 给出一些例子代码：\n>\n> return shell_exec(\"echo $input | $markdown_script\");\n\n\n\n效果图如下：\n\n在这里输入图片描述 [https://dn-coding-net-production-pp.qbox.me/58bc73bd-f1ba-4cc1-9d90-24758e099de7.png]\n\n\n###列表\n\n列表项目标记通常放在最左边，项目标记后面要接一个字符的空格。\n\n无序列表 \n：使用星号、加号或是减号作为列表标记\n\n- Red\n- Green\n- Blue\n\n\n\n效果图如下：\n\n在这里输入图片描述 [https://dn-coding-net-production-pp.qbox.me/d5772b14-8976-4e9f-945b-4b06d2a6e8f1.png]\n\n\n有序列表：使用数字接着一个英文句点\n\n1. Red\n2. Green\n3. Blue\n\n\n\n效果图如下：\n\n在这里输入图片描述 [https://dn-coding-net-production-pp.qbox.me/d0321f44-c344-43d4-817e-9040735cf5b3.png]\n\n\n如果要在列表项目内放进引用，那\n>\n就需要缩进：\n\n*  Coding.net有以下主要功能:\n    > 代码托管平台\n    > 在线运行环境    \n    > 代码质量监控    \n    > 项目管理平台\n\n\n\n效果图如下：\n\n在这里输入图片描述 [https://dn-coding-net-production-pp.qbox.me/21bfcf00-3a71-4b90-9f6e-e692dd3100a2.png]\n\n\n代码\n\n只要把你的代码块包裹在\n```\n之间，你就不需要通过无休止的缩进来标记代码块了。\n\n在围栏式代码块中，你可以指定一个可选的语言标识符，然后我们就可以为它启用语法着色了。\n\n举个例子，这样可以为一段\nRuby\n代码着色：\n\n```ruby\nrequire \'redcarpet\'\nmarkdown = Redcarpet.new(\"Hello World!\")\nputs markdown.to_html\n```\n\n\n\n效果图如下：\n\n在这里输入图片描述 [https://dn-coding-net-production-pp.qbox.me/64a6b611-e0b9-443d-b7a2-c134613b63f9.png]\n\n\n强调\n\n在Markdown中，可以使用\n*\n和\n_\n来表示斜体和加粗。\n\n\n斜体：\n\n*Coding，让开发更简单*\n_Coding，让开发更简单_\n\n\n\n效果图如下：\n\n在这里输入图片描述 [https://dn-coding-net-production-pp.qbox.me/0e72e420-fd75-4dc8-8093-66a57e38cd68.png]\n\n\n加粗：\n\n**Coding，让开发更简单**\n__Coding，让开发更简单__\n\n\n\n效果图如下：\n\n在这里输入图片描述 [https://dn-coding-net-production-pp.qbox.me/372a6abf-f801-4a70-9f20-49f9e7db632d.png]\n\n\n自动链接\n\n方括号显示说明，圆括号内显示网址，\nMarkdown\n会自动把它转成链接，例如：\n\n[超强大的云开发平台Coding](http://coding.net)\n\n\n\n效果图如下：\n\n在这里输入图片描述 [https://dn-coding-net-production-pp.qbox.me/3aeea7b8-a675-4491-adbb-b64b1145ff1a.png]\n\n\n或者也可以直接用<\n>，将网址或者邮箱地址放在中间，也能将地址直接转成链接：\n\n<support@coding.net>\n\n\n\n效果图如下：\n\n在这里输入图片描述 [https://dn-coding-net-production-pp.qbox.me/c028625a-182b-4f76-8805-245c0e27e389.png]\n\n\n表格\n\n在\nMarkdown\n中，可以制作表格，例如：\n\n```\n\nFirst Header | Second Header | Third Header\n------------ | ------------- | ------------\nContent Cell | Content Cell  | Content Cell\nContent Cell | Content Cell  | Content Cell\n\n```\n\n\n\n效果图如下：\n\n在这里输入图片描述 [https://dn-coding-net-production-pp.qbox.me/9a77d37a-95d4-4ad6-ab09-0d41f766fe34.jpg]\n\n\n或者也可以让表格两边内容对齐，中间内容居中，例如：\n\n```\n\nFirst Header | Second Header | Third Header\n:----------- | :-----------: | -----------:\nLeft         | Center        | Right\nLeft         | Center        | Right\n\n```\n\n\n\n效果图如下：\n\n在这里输入图片描述 [https://dn-coding-net-production-pp.qbox.me/0d4014c0-3f54-462a-8a99-4706c62b9e5e.jpg]\n\n\n分割线\n\n在\nMarkdown\n中，可以制作分割线，例如：\n\n---\n\n\n\n效果图如下：\n\n在这里输入图片描述 [https://dn-coding-net-production-pp.qbox.me/aeb88b18-688b-41e9-a4a3-0f970ab3af3e.png]\n\n\n上下标\n\n\\^表示上标,\n_表示下标。如果上下标的内容多于一个字符，要用{}把这些内容括起来当成一个整体。上下标是可以嵌套的，也可以同时使用。\n\n例如：\n\nx^{y^z}=(1+{\\rm e}^x)^{-2xy^w}\n\n\n\n效果图如下：\n\n在这里输入图片描述 [https://dn-coding-net-production-pp.qbox.me/ce4167be-058d-4cfc-9848-49ef2aebee94.png]', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00'), ('42', '0', '开启在线编程之旅', 'https://coding.net/help/doc/webide/getting-started.html', '---\nlayout: post\n\ntitle: 开启在线编程之旅\n---\n\n### 开启WebIDE\n\n#### 前提条件：\n\n -  已经创建好至少一个项目\n -  已创建的 WorkSpace 少于当前账户的配额，具体配额查询项目升级 [项目版本说明][1]\n \n#### 开启WebIDE：\n \n可以通过独立的域名 https://ide.coding.net 进入到 WebIDE。\n\n也可以通过代码，打开到IDE.\n\n##### 私有项目：\n\n1.进入到已创建好的项目界面, 选择 “代码”-> “WebIDE” 如下图所示：\n\n   ![图片](https://dn-coding-net-production-pp.qbox.me/35c83b34-d146-47fb-8cfc-a99ed91574f1.png) \n\n2.点击“进入WebIDE” 进入到 WebIDE 主界面\n\n##### 公有项目：\n\n1.  进入到已创建好的项目界面, 选择“WebIDE” Tab 如下图所示：\n\n    ![图片](https://dn-coding-net-production-pp.qbox.me/af2628fa-9093-42b1-9d3e-c5d9c1154e11.png) \n\n2. 点击“进入WebIDE” 进入到 WebIDE 主界面\n\n<a name=\"aaa\"/>\n\n### 界面说明 ###\n\nWebIDE 界面如下图：\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/0213eb7c-31e8-4fed-bf44-b28b38400b31.png) \n\n1. 顶部菜单栏\n2. 左边是文件树目录\n3. 中间是文本编辑区和文件预览区\n4. 下边是终端界面\n\n - 注：您也可以拖动 Tab 自定义界面。\n\n### 文件管理\nWebIDE 支持文件新建、删除、上传、下载、重命名。 右键点击文件树目录，出现如下菜单：\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/a97d272a-f567-45c6-9205-b808c6747969.png) \n\nWebIDE 支持图片和pdf 的双击预览。\n\n### 代码提交&更新 ###\n    \n#### Clone 代码\n\n    首次进入 WebIDE 项目时候 WebIDE 会默认 Clone 项目的代码到IDE的 Workspace\n    \n#### Commit 提交本地仓库\n \n当你完成代码编辑后可以点击菜单栏的 “Repository” - > “Commit” ， 选择要提交的文件，提交到本地的代码库。\n\n![图片](https://dn-coding-net-production-pp.qbox.me/78fbf09c-b6e6-4020-a82f-daa1c55bc3fe.png) \n\n#### 分支修改\n\n如果需要创建或者修改本地和远程分支，点击菜单栏的“Repository” - > “Branches”，或者点击右下角的分支图标，默认是“Master”。\n\n右下角会弹出如下图的选项，对于本地和远端仓库的操作如Push，Pull ，默认都是操作本地和远端的仓库。\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/656ca53b-83aa-411b-b051-39380965392c.png) \n\n<a name=\"faq\"/>\n\n#### Push 提交远端仓库\n\n当你的代码需要提交到远端Git仓库时候，点击菜单栏的“Repository” - > “Push” ，确认本地和远端的分支。\n ![图片](https://dn-coding-net-production-pp.qbox.me/6e32e236-d9a4-468e-be9c-c16816f9a02d.png) \n\n#### Pull 从远端仓库拉取到本地\n\n当你的远端代码仓库领先于IDE的本地代码仓库时，需要将远端仓库的代码拉取到本地，点击菜单栏的“Repository” - > “Pull” ，会将代码拉取到本地设置的分支。\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/c389a9bc-aa96-40eb-b440-a776e6391ed3.png) \n\n---\n\n\n\n\n  <div class=\"footer-nav\">\n  <div class=\"left-nav\"><i class=\"fa fa-angle-left\"></i><a href=\"/help/doc/webide/index.html\">上一篇：WebIDE介绍</a></div>\n  <div class=\"right-nav\"><a href=\"/help/doc/webide/Workspace.html\">下一篇：工作空间</a><i class=\"fa fa-angle-right\"></i></div>\n  </div>\n', '开启WEBIDE\n\n前提条件：\n * \n   已经创建好至少一个项目\n * \n   已创建的\n   WorkSpace\n   少于当前账户的配额，具体配额查询项目升级\n   [项目版本说明][1]\n\n\n开启WEBIDE：\n\n可以通过独立的域名 \nhttps://ide.coding.net\n[https://ide.coding.net] \n进入到\nWebIDE。\n\n\n也可以通过代码，打开到IDE.\n\n\n私有项目：\n1.进入到已创建好的项目界面,\n选择\n“代码”->\n“WebIDE”\n如下图所示：\n\n图片 [https://dn-coding-net-production-pp.qbox.me/35c83b34-d146-47fb-8cfc-a99ed91574f1.png]\n\n\n2.点击“进入WebIDE”\n进入到\nWebIDE\n主界面\n\n\n公有项目： 1. \n    进入到已创建好的项目界面,\n    选择“WebIDE”\n    Tab\n    如下图所示：\n    \n    图片 [https://dn-coding-net-production-pp.qbox.me/af2628fa-9093-42b1-9d3e-c5d9c1154e11.png]\n    \n    \n 2. \n    点击“进入WebIDE”\n    进入到\n    WebIDE\n    主界面\n    \n    \n\n\n<a\nname=\"aaa\"/>\n\n\n界面说明\n\nWebIDE\n界面如下图：\n\n图片 [https://dn-coding-net-production-pp.qbox.me/0213eb7c-31e8-4fed-bf44-b28b38400b31.png]\n\n 1. \n    顶部菜单栏\n 2. \n    左边是文件树目录\n 3. \n    中间是文本编辑区和文件预览区\n 4. \n    下边是终端界面\n    \n     * \n       注：您也可以拖动\n       Tab\n       自定义界面。\n    \n    \n\n\n文件管理\n\nWebIDE\n支持文件新建、删除、上传、下载、重命名。\n右键点击文件树目录，出现如下菜单：\n\n图片 [https://dn-coding-net-production-pp.qbox.me/a97d272a-f567-45c6-9205-b808c6747969.png]\n\n\nWebIDE\n支持图片和pdf\n的双击预览。\n\n\n代码提交&更新\n\nCLONE\n代码\n首次进入 WebIDE 项目时候 WebIDE 会默认 Clone 项目的代码到IDE的 Workspace\n\n\n\nCOMMIT\n提交本地仓库\n\n当你完成代码编辑后可以点击菜单栏的\n“Repository”\n-\n>\n“Commit”\n，\n选择要提交的文件，提交到本地的代码库。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/78fbf09c-b6e6-4020-a82f-daa1c55bc3fe.png]\n\n\n分支修改\n\n如果需要创建或者修改本地和远程分支，点击菜单栏的“Repository”\n-\n>\n“Branches”，或者点击右下角的分支图标，默认是“Master”。\n\n\n右下角会弹出如下图的选项，对于本地和远端仓库的操作如Push，Pull\n，默认都是操作本地和远端的仓库。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/656ca53b-83aa-411b-b051-39380965392c.png]\n\n\n<a\nname=\"faq\"/>\n\n\nPUSH\n提交远端仓库\n\n当你的代码需要提交到远端Git仓库时候，点击菜单栏的“Repository”\n-\n>\n“Push”\n，确认本地和远端的分支。\n图片 [https://dn-coding-net-production-pp.qbox.me/6e32e236-d9a4-468e-be9c-c16816f9a02d.png]\n\n\nPULL\n从远端仓库拉取到本地\n\n当你的远端代码仓库领先于IDE的本地代码仓库时，需要将远端仓库的代码拉取到本地，点击菜单栏的“Repository”\n-\n>\n“Pull”\n，会将代码拉取到本地设置的分支。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/c389a9bc-aa96-40eb-b440-a776e6391ed3.png]\n\n\n\n\n\n<div\nclass=\"footer-nav\">\n\n<div\nclass=\"left-nav\"><i\nclass=\"fa\nfa-angle-left\"></i><a\nhref=\"/help/doc/webide/index.html\">上一篇：WebIDE介绍</a></div>\n\n<div\nclass=\"right-nav\"><a\nhref=\"/help/doc/webide/Workspace.html\">下一篇：工作空间</a><i\nclass=\"fa\nfa-angle-right\"></i></div>\n\n</div>', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00'), ('43', '0', 'WebIDE介绍', 'https://coding.net/help/doc/webide/index.html', '---\nlayout: post\n\ntitle: WebIDE介绍\n---\n\n本手册主要描述 Coding.net 旗下 WebIDE 产品的相关功能说明。\nCopyRight by Coding.net  更新时间 2015-09-01\n\n关于WebIDE\n--------\n\n### WebIDE 是什么？ ###\n\nWebIDE 是 Coding.net 研发的一款在线集成开发环境( Integrated Development Environment )。\n开发者只需要一个浏览器就可以编写代码，并在WebIDE 提供的终端环境中运行你的代码，让你告别 Local 环境，开启云端开发模式。\n\n\n### 为什么使用 WebIDE ？ ###\n\nWebIDE 致力于降低开发者编辑代码的门槛，省去了安装配置本地环境的繁琐，只需要一个浏览器就可以开始写代码。\n让用户可以随时随地云端开发，减少团队开发时重复配置开发环境的工作，让开发者可以更加专注于代码本身。\n\n\n### WebIDE 的主要功能 ###\n\n - 基于浏览器的代码编辑环境\n - 支持主流语言的语法高亮和代码提示\n - 整合Git 版本管理\n - 环境可以保存分享给项目成员\n - 全功能的 Linux 终端\n - 支持文档上传、下载和预览\n \n---\n\n\n\n\n  <div class=\"footer-nav\">\n  <div class=\"right-nav\"><a href=\"/help/doc/webide/getting-started.html\">下一篇：开启WebIDE</a><i class=\"fa fa-angle-right\"></i></div>\n  </div>\n', '本手册主要描述\nCoding.net\n旗下\nWebIDE\n产品的相关功能说明。\n\nCopyRight\nby\nCoding.net\n更新时间\n2015-09-01\n\n\n关于WEBIDE\n\nWEBIDE\n是什么？\n\nWebIDE\n是\nCoding.net\n研发的一款在线集成开发环境(\nIntegrated\nDevelopment\nEnvironment\n)。\n\n开发者只需要一个浏览器就可以编写代码，并在WebIDE\n提供的终端环境中运行你的代码，让你告别\nLocal\n环境，开启云端开发模式。\n\n\n为什么使用\nWEBIDE\n？\n\nWebIDE\n致力于降低开发者编辑代码的门槛，省去了安装配置本地环境的繁琐，只需要一个浏览器就可以开始写代码。\n\n让用户可以随时随地云端开发，减少团队开发时重复配置开发环境的工作，让开发者可以更加专注于代码本身。\n\n\nWEBIDE\n的主要功能\n * \n   基于浏览器的代码编辑环境\n * \n   支持主流语言的语法高亮和代码提示\n * \n   整合Git\n   版本管理\n * \n   环境可以保存分享给项目成员\n * \n   全功能的\n   Linux\n   终端\n * \n   支持文档上传、下载和预览\n\n\n\n\n\n<div\nclass=\"footer-nav\">\n\n<div\nclass=\"right-nav\"><a\nhref=\"/help/doc/webide/getting-started.html\">下一篇：开启WebIDE</a><i\nclass=\"fa\nfa-angle-right\"></i></div>\n\n</div>', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00'), ('44', '0', '环境管理', 'https://coding.net/help/doc/webide/environment.html', '---\nlayout: post\n\ntitle: 环境管理\n---\n\n\n\n\n### 环境管理&分享 ###\n\n#### 什么是环境 ###\n\n环境（Environment）是WebIDE指将终端所操控的系统环境（包括代码，修改过的文件和通过 apt-get 安装的软件等）。每个Workspace可以配置多个环境，和终端关联的环境称为当前环境。环境本质是一个Docker的Container实例。从用户的视角，环境是一个云端的操作系统。\n\n#### 如何管理环境 ###\n\n点击右边的环境设置“Environment”图标，弹出环境设置tab，如下图所示：\n\n![图片](https://dn-coding-net-production-pp.qbox.me/8b94439d-b591-46f1-9bcc-2b938289cfe6.png) \n \n点击 “ ？”可以查看，环境设置的帮助说明，用户可以将环境保存下来然后分享给其它的项目成员使用。\n\n#### 如何保存环境 ###\n鼠标浮动过去，点击“Save As” 可以将当前环境保存起来, 这样项目成员就可以在进入这个项目的时候使用相同的环境进行了。“Reset” 就是将当前的环境重置到，初始环境，慎重使用。 \n“Save As” 后结果如下：\n\n\n![图片](https://dn-coding-net-production-pp.qbox.me/15415d4d-0f86-4555-9333-41b74e328538.png) \n\n<a name=\"callback-url\"/>\n\n#### 如何切换和分享环境 \n\n当存在多个环境后，点击“Use” 可以切换到不同的环境，切换时当前的 Terminal 会被终止， 然后 Terminal 重新连接到刚才选择的 Environment。\n\n---\n\n\n\n  <div class=\"footer-nav\">\n  <div class=\"left-nav\"><i class=\"fa fa-angle-left\"></i><a href=\"/help/doc/webide/environment.html\">上一篇：开启WebIDE</a></div>\n  <div class=\"right-nav\"><a href=\"/help/doc/webide/terminal.html\">下一篇：终端</a><i class=\"fa fa-angle-right\"></i></div>\n  </div>\n', '环境管理&分享\n\n什么是环境\n\n环境（Environment）是WebIDE指将终端所操控的系统环境（包括代码，修改过的文件和通过\napt-get\n安装的软件等）。每个Workspace可以配置多个环境，和终端关联的环境称为当前环境。环境本质是一个Docker的Container实例。从用户的视角，环境是一个云端的操作系统。\n\n\n如何管理环境\n\n点击右边的环境设置“Environment”图标，弹出环境设置tab，如下图所示：\n\n图片 [https://dn-coding-net-production-pp.qbox.me/8b94439d-b591-46f1-9bcc-2b938289cfe6.png]\n\n\n点击\n“\n？”可以查看，环境设置的帮助说明，用户可以将环境保存下来然后分享给其它的项目成员使用。\n\n\n如何保存环境\n\n鼠标浮动过去，点击“Save\nAs”\n可以将当前环境保存起来,\n这样项目成员就可以在进入这个项目的时候使用相同的环境进行了。“Reset”\n就是将当前的环境重置到，初始环境，慎重使用。\n\n“Save\nAs”\n后结果如下：\n\n图片 [https://dn-coding-net-production-pp.qbox.me/15415d4d-0f86-4555-9333-41b74e328538.png]\n\n\n<a\nname=\"callback-url\"/>\n\n\n如何切换和分享环境\n\n当存在多个环境后，点击“Use”\n可以切换到不同的环境，切换时当前的\nTerminal\n会被终止，\n然后\nTerminal\n重新连接到刚才选择的\nEnvironment。\n\n\n\n\n\n<div\nclass=\"footer-nav\">\n\n<div\nclass=\"left-nav\"><i\nclass=\"fa\nfa-angle-left\"></i><a\nhref=\"/help/doc/webide/environment.html\">上一篇：开启WebIDE</a></div>\n\n<div\nclass=\"right-nav\"><a\nhref=\"/help/doc/webide/terminal.html\">下一篇：终端</a><i\nclass=\"fa\nfa-angle-right\"></i></div>\n\n</div>', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00'), ('45', '0', '工作空间', 'https://coding.net/help/doc/webide/workspace.html', '---\nlayout: post\n\ntitle: 工作空间\n---\n\n\n## 什么是 WorkSpace ？\n\nWorkSpace 是 WebIDE 在云端创建的一个独立项目代码根目录，每个用户对每个项目只能创建一个WorkSpace。\n它包含了用户在云端的代码根目录和可选的环境配置。 \n\n### 管理工作空间 \n\n进入到 ide.coding.net ，登录后，点击右上角 “控制台”。 可以进入到控制台界面，如下：\n\n ![控制台](https://dn-coding-net-production-pp.qbox.me/51ce3c36-0cf7-4454-8f3d-cb7927154b46.png) \n \n 控制台将展示你创建的所有 WorkSpace ，每个账号，每个项目都可以创建一个 WorkSpace。\n \n \n### 新建工作空间\n\n在控制台，点击 “新建工作空间” 进入到界面如下：\n\n ![新建WorkSpace](https://dn-coding-net-production-pp.qbox.me/d2826433-7083-4fce-bc0f-ee7d3d030906.png) \n\n可以通过导入外部项目地址，创建工作空间。\n\n> 注意： 导入外部项目地址，需要配置外部项目的 SSH Key， 比如导入 GitHub 代码，需要配置 GitHub 的 SSH Key\n\n也可以选择导入 Coding 的项目，创建工作空间。\n\n### 打开工作空间\n\n点击打开可以进入到工作空间的代码编辑区。\n\n ![打开工作空间](https://dn-coding-net-production-pp.qbox.me/ce59f2fc-a80e-49ec-a91b-a8abe3133749.png) \n\n### 删除工作空间\n\n删除工作空间，将会删除你所创建的独立的项目代码根目录， 因此未提交的代码更新将会丢失，同时环境配置也将会被删除。\n\n\n  <div class=\"footer-nav\">\n  <div class=\"left-nav\"><i class=\"fa fa-angle-left\"></i><a href=\"/help/doc/webide/environment.html\">上一篇：环境管理</a></div>\n  <div class=\"right-nav\"><a href=\"/help/doc/webide/environment.html\">下一篇：环境管理</a><i class=\"fa fa-angle-right\"></i></div>\n  </div>\n', '什么是\nWORKSPACE\n？\n\nWorkSpace\n是\nWebIDE\n在云端创建的一个独立项目代码根目录，每个用户对每个项目只能创建一个WorkSpace。\n\n它包含了用户在云端的代码根目录和可选的环境配置。\n\n\n管理工作空间\n\n进入到\nide.coding.net\n，登录后，点击右上角\n“控制台”。\n可以进入到控制台界面，如下：\n\n控制台 [https://dn-coding-net-production-pp.qbox.me/51ce3c36-0cf7-4454-8f3d-cb7927154b46.png]\n\n\n控制台将展示你创建的所有\nWorkSpace\n，每个账号，每个项目都可以创建一个\nWorkSpace。\n\n\n新建工作空间\n\n在控制台，点击\n“新建工作空间”\n进入到界面如下：\n\n新建WorkSpace [https://dn-coding-net-production-pp.qbox.me/d2826433-7083-4fce-bc0f-ee7d3d030906.png]\n\n\n可以通过导入外部项目地址，创建工作空间。\n\n\n注意：\n导入外部项目地址，需要配置外部项目的\nSSH\nKey，\n比如导入\nGitHub\n代码，需要配置\nGitHub\n的\nSSH\nKey\n\n\n也可以选择导入\nCoding\n的项目，创建工作空间。\n\n\n打开工作空间\n\n点击打开可以进入到工作空间的代码编辑区。\n\n打开工作空间 [https://dn-coding-net-production-pp.qbox.me/ce59f2fc-a80e-49ec-a91b-a8abe3133749.png]\n\n\n删除工作空间\n\n删除工作空间，将会删除你所创建的独立的项目代码根目录，\n因此未提交的代码更新将会丢失，同时环境配置也将会被删除。\n\n\n<div\nclass=\"footer-nav\">\n\n<div\nclass=\"left-nav\"><i\nclass=\"fa\nfa-angle-left\"></i><a\nhref=\"/help/doc/webide/environment.html\">上一篇：环境管理</a></div>\n\n<div\nclass=\"right-nav\"><a\nhref=\"/help/doc/webide/environment.html\">下一篇：环境管理</a><i\nclass=\"fa\nfa-angle-right\"></i></div>\n\n</div>', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00'), ('46', '0', 'WebIDE 使用手册', 'https://coding.net/help/doc/webide/webide.html', '---\nlayout: post\n\ntitle: WebIDE 使用手册\n---\n\n1.欢迎使用 WebIDE 手册 \n-----\n本手册主要描述 Coding.net 旗下 WebIDE 产品的相关功能说明。\n\n\n2.关于WebIDE\n--------\n\n### 2.1 WebIDE 是什么？ ###\n\nWebIDE 是 Coding.net 研发的一款在线集成开发环境( Integrated Development Environment )。\n开发者只需要一个浏览器就可以编写代码，并在WebIDE 提供的终端环境中运行你的代码，让你告别 Local 环境，开启云端开发模式。\n\n\n### 2.2 为什么使用 WebIDE ？ ###\n\nWebIDE 致力于降低开发者编辑代码的门槛，省去了安装配置本地环境的繁琐，只需要一个浏览器就可以开始写代码。\n让用户可以随时随地云端开发，减少团队开发时重复配置开发环境的工作，让开发者可以更加专注于代码本身。\n\n\n### 2.3 WebIDE 的主要功能 ###\n\n - 基于浏览器的代码编辑环境\n - 支持主流语言的语法高亮和代码提示\n - 整合Git 版本管理\n - 环境可以保存分享给项目成员\n - 全功能的 Linux 终端\n - 支持文档上传、下载和预览\n\n\n\n3.功能介绍\n--------\n\n### 3.1 开启WebIDE\n\n#### 3.1.1 前提条件：\n -  已经创建好至少一个项目\n -  已创建的 WorkSpace 少于当前账户的配额，具体配额查询项目升级 [项目版本说明][1]\n \n#### 3.1.2 开启WebIDE：\n \n##### 3.1.2.1 私有项目：\n\n1.进入到已创建好的项目界面, 选择 “代码”-> “WebIDE” 如下图所示：\n\n    ![图片](https://dn-coding-net-production-pp.qbox.me/35c83b34-d146-47fb-8cfc-a99ed91574f1.png) \n\n2.点击“进入WebIDE” 进入到 WebIDE 主界面\n\n##### 3.1.2.2 公有项目：\n\n1.  进入到已创建好的项目界面, 选择“WebIDE” Tab 如下图所示：\n\n    ![图片](https://dn-coding-net-production-pp.qbox.me/af2628fa-9093-42b1-9d3e-c5d9c1154e11.png) \n\n2. 点击“进入WebIDE” 进入到 WebIDE 主界面\n\n<a name=\"aaa\"/>\n\n### 3.2 界面说明 ###\n\nWebIDE 界面如下图：\n\n ![WebIDE界面](https://dn-coding-net-production-pp.qbox.me/0213eb7c-31e8-4fed-bf44-b28b38400b31.png) \n\n1. 顶部菜单栏\n2. 左边是文件树目录\n3. 中间是文本编辑区和文件预览区\n4. 下边是终端界面\n\n - 注：您也可以拖动 Tab 自定义界面。\n\n### 3.3  文件管理\nWebIDE 支持文件新建、删除、上传、下载、重命名。 右键点击文件树目录，出现如下菜单：\n\n ![文件](https://dn-coding-net-production-pp.qbox.me/a97d272a-f567-45c6-9205-b808c6747969.png) \n\nWebIDE 支持图片和pdf 的双击预览。\n\n### 3.4 代码提交&更新 ###\n    \n#### 3.4.1 Clone 代码\n\n    首次进入 WebIDE 项目时候 WebIDE 会默认 Clone 项目的代码到IDE的 Workspace\n    \n#### 3.4.2 Commit 提交本地仓库\n \n当你完成代码编辑后可以点击菜单栏的 “Repository” - > “Commit” ， 选择要提交的文件，提交到本地的代码库。\n\n![图片](https://dn-coding-net-production-pp.qbox.me/78fbf09c-b6e6-4020-a82f-daa1c55bc3fe.png) \n\n#### 3.4.3 分支修改\n\n如果需要创建或者修改本地和远程分支，点击菜单栏的“Repository” - > “Branches”，或者点击右下角的分支图标，默认是“Master”。\n\n右下角会弹出如下图的选项，对于本地和远端仓库的操作如Push，Pull ，默认都是操作本地和远端的仓库。\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/656ca53b-83aa-411b-b051-39380965392c.png) \n\n<a name=\"faq\"/>\n\n#### 3.4.4 Push 提交远端仓库\n\n当你的代码需要提交到远端Git仓库时候，点击菜单栏的“Repository” - > “Push” ，确认本地和远端的分支。\n ![图片](https://dn-coding-net-production-pp.qbox.me/6e32e236-d9a4-468e-be9c-c16816f9a02d.png) \n\n#### 3.4.5 Pull 从远端仓库拉取到本地\n\n当你的远端代码仓库领先于IDE的本地代码仓库时，需要将远端仓库的代码拉取到本地，点击菜单栏的“Repository” - > “Pull” ，会将代码拉取到本地设置的分支。\n\n ![图片](https://dn-coding-net-production-pp.qbox.me/c389a9bc-aa96-40eb-b440-a776e6391ed3.png) \n\n### 3.5 环境管理&分享 ###\n\n#### 3.5.1 什么是环境 ###\n\n环境（Environment）是WebIDE指将终端所操控的系统环境（包括代码，修改过的文件和通过 apt-get 安装的软件等）。每个Workspace可以配置多个环境，和终端关联的环境称为当前环境。环境本质是一个Docker的Container实例。从用户的视角，环境是一个云端的操作系统。\n\n#### 3.5.2 如何管理环境 ###\n\n点击右边的环境设置“Environment”图标，弹出环境设置tab，如下图所示：\n\n![图片](https://dn-coding-net-production-pp.qbox.me/8b94439d-b591-46f1-9bcc-2b938289cfe6.png) \n \n点击 “ ？”可以查看，环境设置的帮助说明，用户可以将环境保存下来然后分享给其它的项目成员使用。\n\n#### 3.5.3 如何保存环境 ###\n鼠标浮动过去，点击“Save As” 可以将当前环境保存起来, 这样项目成员就可以在进入这个项目的时候使用相同的环境进行了。“Reset” 就是将当前的环境重置到，初始环境，慎重使用。 \n“Save As” 后结果如下：\n\n\n![图片](https://dn-coding-net-production-pp.qbox.me/15415d4d-0f86-4555-9333-41b74e328538.png) \n\n<a name=\"callback-url\"/>\n\n#### 3.5.4 如何切换和分享环境 \n\n当存在多个环境后，点击“Use” 可以切换到不同的环境，切换时当前的 Terminal 会被终止， 然后 Terminal 重新连接到刚才选择的 Environment。\n\n### 3.6 终端 Terminal ###\n\n#### 3.6.1 终端 Terminal \n\nWebIDE 的终端是一个完成的 Ubuntu Linux Shell 环境，用户可以在里面执行任何 Linux 命令。初始的终端设置如下：\n\n - 系统为标准Ubuntu 14.04\n - 用户名和密码都是 coding\n - coding 用户具备 sudo 权限（`$sudo su`可切换到root用户）\n\n#### 3.6.2 如何打开终端 Terminal\n \n1. 点击“Terminal” 打开终端 Tab \n  ![图片](https://dn-coding-net-production-pp.qbox.me/874e33fa-ead9-4f30-8c6f-1a408a354fe9.png) \n  \n2. 点击菜单栏 “Tools” -> “New Terminal”\n \n  ![图片](https://dn-coding-net-production-pp.qbox.me/65e2b062-c972-4620-8dc0-d9280233294d.png) \n\n\n### 3.7 软件安装###\n\n可以在终端运行 apt-get 来安装你想要的 Linux 软件，可以在/etc/apt/source.list 查看和修改apt的源。\n\n    ➜  workspace git:(master) ✗ cat /etc/apt/sources.list  \n\n对于想要的软件用 apt-get install 安装, 比如安装npm：\n\n    ➜  workspace git:(master) ✗ sudo apt-get install npm    \n\n  \n### 3.7 运行程序###\n\n#### 3.7.1 在终端运行程序\n\n编写好的代码可以在终端( Terminal ) 里面运行，对于需要创建外部访问链接的应用需要明确绑定到 0.0.0.0 地址, 比如：\n\n    ➜  workspace git:(master) ✗ ruby app.rb -o 0.0.0.0 -p 8080                                                                                            \n    == Sinatra (v1.4.6) has taken the stage on 8080 for development with backup from Thin                                                                 \n    Thin web server (v1.6.3 codename Protein Powder)                                                                                                      \n    Maximum connections set to 1024                                                                                                                       \n    Listening on 0.0.0.0:8080, CTRL+C to stop        \n\n>需要强调一下，绑定在本地回环地址 127.0.0.1 是无效的。\n\n\n#### 3.7.2 创建外部访问链接( Generate Access Url )\n\nWebIDE 支持为编写好的程序创建一个外部可以访问的链接，有效期 1 个小时，点击菜单的 Tools -> Generate Access Url 如下图。\n\n![图片](https://dn-coding-net-production-pp.qbox.me/543dfde7-8bf0-49a8-95c8-80c33f18c106.png) \n\n设置你需要绑定的端口，需要跟程序运行监听的端口一致, 如上面的8080，点击链接访问如下：\n\n![图片](https://dn-coding-net-production-pp.qbox.me/1bca4b34-acbd-423c-a393-4380978bbff8.png) \n                                        \n\n4. Demo 如何使用 WebIDE 编写一个简单的程序\n--------\n此处放视频 \n\n\n  [1]: coding.net/upgrade', '1.欢迎使用\nWEBIDE\n手册\n\n本手册主要描述\nCoding.net\n旗下\nWebIDE\n产品的相关功能说明。\n\n\n2.关于WEBIDE\n\n2.1\nWEBIDE\n是什么？\n\nWebIDE\n是\nCoding.net\n研发的一款在线集成开发环境(\nIntegrated\nDevelopment\nEnvironment\n)。\n\n开发者只需要一个浏览器就可以编写代码，并在WebIDE\n提供的终端环境中运行你的代码，让你告别\nLocal\n环境，开启云端开发模式。\n\n\n2.2\n为什么使用\nWEBIDE\n？\n\nWebIDE\n致力于降低开发者编辑代码的门槛，省去了安装配置本地环境的繁琐，只需要一个浏览器就可以开始写代码。\n\n让用户可以随时随地云端开发，减少团队开发时重复配置开发环境的工作，让开发者可以更加专注于代码本身。\n\n\n2.3\nWEBIDE\n的主要功能\n * \n   基于浏览器的代码编辑环境\n * \n   支持主流语言的语法高亮和代码提示\n * \n   整合Git\n   版本管理\n * \n   环境可以保存分享给项目成员\n * \n   全功能的\n   Linux\n   终端\n * \n   支持文档上传、下载和预览\n\n\n3.功能介绍\n\n3.1\n开启WEBIDE\n\n3.1.1\n前提条件：\n * \n   已经创建好至少一个项目\n * \n   已创建的\n   WorkSpace\n   少于当前账户的配额，具体配额查询项目升级 \n   项目版本说明\n   [coding.net/upgrade]\n\n\n3.1.2\n开启WEBIDE：\n\n3.1.2.1\n私有项目：\n1.进入到已创建好的项目界面,\n选择\n“代码”->\n“WebIDE”\n如下图所示：\n\n![图片](https://dn-coding-net-production-pp.qbox.me/35c83b34-d146-47fb-8cfc-a99ed91574f1.png) \n\n\n\n2.点击“进入WebIDE”\n进入到\nWebIDE\n主界面\n\n\n3.1.2.2\n公有项目： 1. \n    进入到已创建好的项目界面,\n    选择“WebIDE”\n    Tab\n    如下图所示：\n    \n    图片 [https://dn-coding-net-production-pp.qbox.me/af2628fa-9093-42b1-9d3e-c5d9c1154e11.png]\n    \n    \n 2. \n    点击“进入WebIDE”\n    进入到\n    WebIDE\n    主界面\n    \n    \n\n\n<a\nname=\"aaa\"/>\n\n\n3.2\n界面说明\n\nWebIDE\n界面如下图：\n\nWebIDE界面 [https://dn-coding-net-production-pp.qbox.me/0213eb7c-31e8-4fed-bf44-b28b38400b31.png]\n\n 1. \n    顶部菜单栏\n 2. \n    左边是文件树目录\n 3. \n    中间是文本编辑区和文件预览区\n 4. \n    下边是终端界面\n    \n     * \n       注：您也可以拖动\n       Tab\n       自定义界面。\n    \n    \n\n\n3.3\n文件管理\n\nWebIDE\n支持文件新建、删除、上传、下载、重命名。\n右键点击文件树目录，出现如下菜单：\n\n文件 [https://dn-coding-net-production-pp.qbox.me/a97d272a-f567-45c6-9205-b808c6747969.png]\n\n\nWebIDE\n支持图片和pdf\n的双击预览。\n\n\n3.4\n代码提交&更新\n\n3.4.1\nCLONE\n代码\n首次进入 WebIDE 项目时候 WebIDE 会默认 Clone 项目的代码到IDE的 Workspace\n\n\n\n3.4.2\nCOMMIT\n提交本地仓库\n\n当你完成代码编辑后可以点击菜单栏的\n“Repository”\n-\n>\n“Commit”\n，\n选择要提交的文件，提交到本地的代码库。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/78fbf09c-b6e6-4020-a82f-daa1c55bc3fe.png]\n\n\n3.4.3\n分支修改\n\n如果需要创建或者修改本地和远程分支，点击菜单栏的“Repository”\n-\n>\n“Branches”，或者点击右下角的分支图标，默认是“Master”。\n\n\n右下角会弹出如下图的选项，对于本地和远端仓库的操作如Push，Pull\n，默认都是操作本地和远端的仓库。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/656ca53b-83aa-411b-b051-39380965392c.png]\n\n\n<a\nname=\"faq\"/>\n\n\n3.4.4\nPUSH\n提交远端仓库\n\n当你的代码需要提交到远端Git仓库时候，点击菜单栏的“Repository”\n-\n>\n“Push”\n，确认本地和远端的分支。\n图片 [https://dn-coding-net-production-pp.qbox.me/6e32e236-d9a4-468e-be9c-c16816f9a02d.png]\n\n\n3.4.5\nPULL\n从远端仓库拉取到本地\n\n当你的远端代码仓库领先于IDE的本地代码仓库时，需要将远端仓库的代码拉取到本地，点击菜单栏的“Repository”\n-\n>\n“Pull”\n，会将代码拉取到本地设置的分支。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/c389a9bc-aa96-40eb-b440-a776e6391ed3.png]\n\n\n3.5\n环境管理&分享\n\n3.5.1\n什么是环境\n\n环境（Environment）是WebIDE指将终端所操控的系统环境（包括代码，修改过的文件和通过\napt-get\n安装的软件等）。每个Workspace可以配置多个环境，和终端关联的环境称为当前环境。环境本质是一个Docker的Container实例。从用户的视角，环境是一个云端的操作系统。\n\n\n3.5.2\n如何管理环境\n\n点击右边的环境设置“Environment”图标，弹出环境设置tab，如下图所示：\n\n图片 [https://dn-coding-net-production-pp.qbox.me/8b94439d-b591-46f1-9bcc-2b938289cfe6.png]\n\n\n点击\n“\n？”可以查看，环境设置的帮助说明，用户可以将环境保存下来然后分享给其它的项目成员使用。\n\n\n3.5.3\n如何保存环境\n\n鼠标浮动过去，点击“Save\nAs”\n可以将当前环境保存起来,\n这样项目成员就可以在进入这个项目的时候使用相同的环境进行了。“Reset”\n就是将当前的环境重置到，初始环境，慎重使用。\n\n“Save\nAs”\n后结果如下：\n\n图片 [https://dn-coding-net-production-pp.qbox.me/15415d4d-0f86-4555-9333-41b74e328538.png]\n\n\n<a\nname=\"callback-url\"/>\n\n\n3.5.4\n如何切换和分享环境\n\n当存在多个环境后，点击“Use”\n可以切换到不同的环境，切换时当前的\nTerminal\n会被终止，\n然后\nTerminal\n重新连接到刚才选择的\nEnvironment。\n\n\n3.6\n终端\nTERMINAL\n\n3.6.1\n终端\nTERMINAL\n\nWebIDE\n的终端是一个完成的\nUbuntu\nLinux\nShell\n环境，用户可以在里面执行任何\nLinux\n命令。初始的终端设置如下：\n\n * \n   系统为标准Ubuntu\n   14.04\n * \n   用户名和密码都是\n   coding\n * \n   coding\n   用户具备\n   sudo\n   权限（ \n   $sudo\n   su \n   可切换到root用户）\n\n\n3.6.2\n如何打开终端\nTERMINAL\n 1. \n    点击“Terminal”\n    打开终端\n    Tab\n    图片 [https://dn-coding-net-production-pp.qbox.me/874e33fa-ead9-4f30-8c6f-1a408a354fe9.png]\n    \n    \n 2. \n    点击菜单栏\n    “Tools”\n    ->\n    “New\n    Terminal”\n    \n    图片 [https://dn-coding-net-production-pp.qbox.me/65e2b062-c972-4620-8dc0-d9280233294d.png]\n    \n    \n\n\n3.7\n软件安装\n\n可以在终端运行\napt-get\n来安装你想要的\nLinux\n软件，可以在/etc/apt/source.list\n查看和修改apt的源。\n\n➜  workspace git:(master) ✗ cat /etc/apt/sources.list  \n\n\n\n对于想要的软件用\napt-get\ninstall\n安装,\n比如安装npm：\n\n➜  workspace git:(master) ✗ sudo apt-get install npm    \n\n\n\n3.7\n运行程序\n\n3.7.1\n在终端运行程序\n\n编写好的代码可以在终端(\nTerminal\n)\n里面运行，对于需要创建外部访问链接的应用需要明确绑定到\n0.0.0.0\n地址,\n比如：\n\n➜  workspace git:(master) ✗ ruby app.rb -o 0.0.0.0 -p 8080                                                                                            \n== Sinatra (v1.4.6) has taken the stage on 8080 for development with backup from Thin                                                                 \nThin web server (v1.6.3 codename Protein Powder)                                                                                                      \nMaximum connections set to 1024                                                                                                                       \nListening on 0.0.0.0:8080, CTRL+C to stop        \n\n\n\n需要强调一下，绑定在本地回环地址\n127.0.0.1\n是无效的。\n\n\n3.7.2\n创建外部访问链接(\nGENERATE\nACCESS\nURL\n)\n\nWebIDE\n支持为编写好的程序创建一个外部可以访问的链接，有效期\n1\n个小时，点击菜单的\nTools\n->\nGenerate\nAccess\nUrl\n如下图。\n\n图片 [https://dn-coding-net-production-pp.qbox.me/543dfde7-8bf0-49a8-95c8-80c33f18c106.png]\n\n\n设置你需要绑定的端口，需要跟程序运行监听的端口一致,\n如上面的8080，点击链接访问如下：\n\n图片 [https://dn-coding-net-production-pp.qbox.me/1bca4b34-acbd-423c-a393-4380978bbff8.png]\n\n\n4.\nDEMO\n如何使用\nWEBIDE\n编写一个简单的程序\n\n此处放视频', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00');
INSERT INTO `help_documents` VALUES ('47', '0', '终端 Terminal', 'https://coding.net/help/doc/webide/terminal.html', '---\nlayout: post\n\ntitle: 终端 Terminal\n---\n\n## 终端 Terminal ###\n\n### 什么是终端 Terminal \n\nWebIDE 的终端是一个完成的 Ubuntu Linux Shell 环境，用户可以在里面执行任何 Linux 命令。初始的终端设置如下：\n\n - 系统为标准Ubuntu 14.04\n - 用户名和密码都是 coding\n - coding 用户具备 sudo 权限（`$sudo su`可切换到root用户）\n\n### 如何打开终端 Terminal\n \n1. 点击“Terminal” 打开终端 Tab \n  ![图片](https://dn-coding-net-production-pp.qbox.me/874e33fa-ead9-4f30-8c6f-1a408a354fe9.png) \n  \n2. 点击菜单栏 “Tools” -> “New Terminal”\n \n  ![图片](https://dn-coding-net-production-pp.qbox.me/65e2b062-c972-4620-8dc0-d9280233294d.png) \n\n\n## 软件安装###\n\n可以在终端运行 apt-get 来安装你想要的 Linux 软件，可以在/etc/apt/source.list 查看和修改apt的源。\n\n    ➜  workspace git:(master) ✗ cat /etc/apt/sources.list  \n\n对于想要的软件用 apt-get install 安装, 比如安装npm：\n\n    ➜  workspace git:(master) ✗ sudo apt-get install npm    \n\n---\n \n   \n\n\n  <div class=\"footer-nav\">\n  <div class=\"left-nav\"><i class=\"fa fa-angle-left\"></i><a href=\"/help/doc/webide/environment.html\">上一篇：环境管理</a></div>\n  <div class=\"right-nav\"><a href=\"/help/doc/webide/execution.html\">下一篇：运行程序</a><i class=\"fa fa-angle-right\"></i></div>\n  </div>\n', '终端\nTERMINAL\n\n什么是终端\nTERMINAL\n\nWebIDE\n的终端是一个完成的\nUbuntu\nLinux\nShell\n环境，用户可以在里面执行任何\nLinux\n命令。初始的终端设置如下：\n\n * \n   系统为标准Ubuntu\n   14.04\n * \n   用户名和密码都是\n   coding\n * \n   coding\n   用户具备\n   sudo\n   权限（ \n   $sudo\n   su \n   可切换到root用户）\n\n\n如何打开终端\nTERMINAL\n 1. \n    点击“Terminal”\n    打开终端\n    Tab\n    图片 [https://dn-coding-net-production-pp.qbox.me/874e33fa-ead9-4f30-8c6f-1a408a354fe9.png]\n    \n    \n 2. \n    点击菜单栏\n    “Tools”\n    ->\n    “New\n    Terminal”\n    \n    图片 [https://dn-coding-net-production-pp.qbox.me/65e2b062-c972-4620-8dc0-d9280233294d.png]\n    \n    \n\n\n软件安装\n\n可以在终端运行\napt-get\n来安装你想要的\nLinux\n软件，可以在/etc/apt/source.list\n查看和修改apt的源。\n\n➜  workspace git:(master) ✗ cat /etc/apt/sources.list  \n\n\n\n对于想要的软件用\napt-get\ninstall\n安装,\n比如安装npm：\n\n➜  workspace git:(master) ✗ sudo apt-get install npm    \n\n\n\n\n\n\n<div\nclass=\"footer-nav\">\n\n<div\nclass=\"left-nav\"><i\nclass=\"fa\nfa-angle-left\"></i><a\nhref=\"/help/doc/webide/environment.html\">上一篇：环境管理</a></div>\n\n<div\nclass=\"right-nav\"><a\nhref=\"/help/doc/webide/execution.html\">下一篇：运行程序</a><i\nclass=\"fa\nfa-angle-right\"></i></div>\n\n</div>', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00'), ('48', '1', 'Git 操作常见问题', 'https://coding.net/help/faq/git/git.html', '---\nlayout: post\n\ntitle: Git 操作常见问题\n---\n\n---\n\n## 如何提交代码到 Coding 上？\n\n可以查看 Coding 的 [Git 代码托管文档](/help/doc/git/index.html)\n可以参照网上的相关Git教程 如 [廖雪峰的 Git 教程](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)\n\n## 每次 Push 的时候如何不用输入密码？\n\n可以有2个办法：\n1. 配置 SSH 公钥，使用 SSH 协议操作，具体见 [SSH 公钥配置](/help/doc/git/ssh-key.html)\n2. 配置本地的 HTTPS Remote URL 加上你的username@password ， 仓库目录下 .git/config\n    \n    https://{username}:{passwd}@git.coding.net\n\n## 我的 Git 是1.7版本为什么无法提交代码？\n\ngit版本过低，最好升级到1.9 以上\n\n## 如何设置分支的提交权限，让部分人可以提交？\n\n你可以用保护分支功能来划分不同成员对不同分支的操作权限, 参见[分支管理](/help/doc/git/git-branch.html) 的保护分支章节\n\n## Coding 的代码管理支持图形化工具吗？\n\n支持，我们推荐使用 SourceTree， 具体参见[开始使用 Git](/help/doc/git/getting-started.html)的安装章节。\n\n## 出现 \'Coding.net Tips : [Internal server error]\' 怎么会事？\n\n出现[Internal Server error] 表示我们服务器端的仓库访问可能有问题。 \n麻烦通过[反馈](https://coding.net/u/coding/p/Coding-Feedback/topic)，提交你的项目的url地址 供研发人员排错。\n\n\n## Push 一直提示Permission denied (publickey) ?\n\n这个可能是由于你的没有目标仓库和分支的权限，导致无法更新数据。\n\n- 检查你的push 方式，通过 SSH 还是 HTTPS ，如果是 SSH 请检查你的 SSH公钥是否正确。 HTTPS 的方式请检查你的密码是否正确\n- 对目标分支是否有写权限。\n\n## 代码 push 不了，报 SSL Abort，SSL protocol error，或者 Connection Timeout 怎么办？\n\n由于Coding 将git 部署在CDN上了，可能你这边对应的 CDN 的节点有问题。 \n\n麻烦在反馈区，提供以下信息供研发人员提交到 CDN 服务商排查。\n1. 您的上网IP\n2. 您的 ping git.coding.net 的截图\n3. 您的DNS设置\n\n\n## 如何在 Coding 上回退代码版本？\n\nCoding 平台使用 git 来管理代码，Coding 没有提供版本回退的界面。需要使用 git 操作回退，然后更新到 Coding 服务器上\n具体的操作可以使用 git revert 或者  git reset \n\n## 如何设 SSH Key？怎么设置了之后还是要输入密码？\n\n设置 SSH Key 的方式参见[SSH公钥配置](/help/doc/git/ssh-key.html)\n\n如果用户自己对 SSH 私钥加了密，仍然需要使用密码来访问私钥，因此需要输入密码\n注意： 配置了 SSH 公钥后，需要使用 SSH 地址操作仓库。\n\n', '如何提交代码到\nCODING\n上？\n\n可以查看\nCoding\n的 \nGit\n代码托管文档\n[/help/doc/git/index.html]\n\n可以参照网上的相关Git教程\n如 \n廖雪峰的\nGit\n教程\n[http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000]\n\n\n每次\nPUSH\n的时候如何不用输入密码？\n\n可以有2个办法：\n\n 1. \n    配置\n    SSH\n    公钥，使用\n    SSH\n    协议操作，具体见 \n    SSH\n    公钥配置\n    [/help/doc/git/ssh-key.html]\n 2. \n    配置本地的\n    HTTPS\n    Remote\n    URL\n    加上你的username@password\n    ，\n    仓库目录下\n    .git/config\n    \n    \n    https://{username}:{passwd}@git.coding.net\n    [https://{username}:{passwd}@git.coding.net]\n    \n    \n\n\n我的\nGIT\n是1.7版本为什么无法提交代码？\n\ngit版本过低，最好升级到1.9\n以上\n\n\n如何设置分支的提交权限，让部分人可以提交？\n\n你可以用保护分支功能来划分不同成员对不同分支的操作权限,\n参见 \n分支管理\n[/help/doc/git/git-branch.html] \n的保护分支章节\n\n\nCODING\n的代码管理支持图形化工具吗？\n\n支持，我们推荐使用\nSourceTree，\n具体参见 \n开始使用\nGit\n[/help/doc/git/getting-started.html] \n的安装章节。\n\n\n出现\n\'CODING.NET\nTIPS\n:\n[INTERNAL\nSERVER\nERROR]\'\n怎么会事？\n\n出现[Internal\nServer\nerror]\n表示我们服务器端的仓库访问可能有问题。\n\n麻烦通过 \n反馈\n[https://coding.net/u/coding/p/Coding-Feedback/topic] \n，提交你的项目的url地址\n供研发人员排错。\n\n\nPUSH\n一直提示PERMISSION\nDENIED\n(PUBLICKEY)\n?\n\n这个可能是由于你的没有目标仓库和分支的权限，导致无法更新数据。\n\n * \n   检查你的push\n   方式，通过\n   SSH\n   还是\n   HTTPS\n   ，如果是\n   SSH\n   请检查你的\n   SSH公钥是否正确。\n   HTTPS\n   的方式请检查你的密码是否正确\n * \n   对目标分支是否有写权限。\n\n\n代码\nPUSH\n不了，报\nSSL\nABORT，SSL\nPROTOCOL\nERROR，或者\nCONNECTION\nTIMEOUT\n怎么办？\n\n由于Coding\n将git\n部署在CDN上了，可能你这边对应的\nCDN\n的节点有问题。\n\n\n麻烦在反馈区，提供以下信息供研发人员提交到\nCDN\n服务商排查。\n\n 1. \n    您的上网IP\n 2. \n    您的\n    ping\n    git.coding.net\n    的截图\n 3. \n    您的DNS设置\n\n\n如何在\nCODING\n上回退代码版本？\n\nCoding\n平台使用\ngit\n来管理代码，Coding\n没有提供版本回退的界面。需要使用\ngit\n操作回退，然后更新到\nCoding\n服务器上\n\n具体的操作可以使用\ngit\nrevert\n或者\ngit\nreset\n\n\n如何设\nSSH\nKEY？怎么设置了之后还是要输入密码？\n\n设置\nSSH\nKey\n的方式参见 \nSSH公钥配置\n[/help/doc/git/ssh-key.html]\n\n\n如果用户自己对\nSSH\n私钥加了密，仍然需要使用密码来访问私钥，因此需要输入密码\n\n注意：\n配置了\nSSH\n公钥后，需要使用\nSSH\n地址操作仓库。', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00'), ('49', '1', '代码仓库问题', 'https://coding.net/help/faq/git/repository.html', '---\nlayout: post\n\ntitle: 代码仓库问题\n---\n\n---\n\n## 如何访问 Coding 的 Git 仓库？\n\n目前用户可以通过以下三种协议对 git 仓库进行访问：\n1) HTTPS：读写仓库加密通道，有单次上传限制，如下表示超过这个限制了。\n    \n    error: RPC failed; result=22, HTTP code = 413B | 2.39 MiB/s\n    \n2) SSH：读写仓库加密通道，无单次上传限制，需先在个人设置页面上传 SSH-RSA 公钥，完成配对验证。\n3) Git：只读，并且只对公开项目有效。\n注意：Git 用户名为 Coding 的账户邮箱或者个性后缀，密码为 Coding 的账户密码。\n\n具体参见  Git帮助文档的[代码仓库](/help/doc/git/repository.html)\n\n## 如何导入已有仓库到 Coding？\n\n在新建项目页面，填写你要导入的项目的名称和描述后，选择导入仓库选项卡，根据你要导入的仓库类型选择版本控制类型，填写导入项目的公开 Clone 地址，如：https://github.com/twbs/bootstrap.git （svn 仓库导入格式如 http://code.taobao.org/svn/dev_codes/trunk）。 Coding 暂不支持导入外站的私有项目，另外受制于网络条件，Coding不能一定保证导入成功。结果会通过站内通知和邮件告知您。\n\n\n## 是不是所有项目都需要 README ,开源许可证和 .gitignore 文件？\n\n我们会推荐用户在新建项目的时候，同时创建 README，选择相应的开源许可证和 .gitignore 文件，以便更有效地进行项目管理；用户可以从实际需求出发进行选择。\n\n\n## Git 有多少存储空间？\n\nGit 的免费存储空间为：单项目限制 1G，另外请注意，Git 是用来存放源码的，如果里面存有大量的二进制文件（图片，音乐，视频，可执行程序，编译后的库等等）将会快速占用大量的空间，因此不建议这样做。\n\n## 用户可以建多少个仓库？\n\nGit 仓库跟项目是1对1的关系，用户可以免费建1000个项目。\n', '如何访问\nCODING\n的\nGIT\n仓库？\n\n目前用户可以通过以下三种协议对\ngit\n仓库进行访问：\n\n1)\nHTTPS：读写仓库加密通道，有单次上传限制，如下表示超过这个限制了。\n\nerror: RPC failed; result=22, HTTP code = 413B | 2.39 MiB/s\n\n\n\n2)\nSSH：读写仓库加密通道，无单次上传限制，需先在个人设置页面上传\nSSH-RSA\n公钥，完成配对验证。\n\n3)\nGit：只读，并且只对公开项目有效。\n\n注意：Git\n用户名为\nCoding\n的账户邮箱或者个性后缀，密码为\nCoding\n的账户密码。\n\n\n具体参见\nGit帮助文档的 \n代码仓库\n[/help/doc/git/repository.html]\n\n\n如何导入已有仓库到\nCODING？\n\n在新建项目页面，填写你要导入的项目的名称和描述后，选择导入仓库选项卡，根据你要导入的仓库类型选择版本控制类型，填写导入项目的公开\nClone\n地址，如： \nhttps://github.com/twbs/bootstrap.git\n[https://github.com/twbs/bootstrap.git] \n（svn\n仓库导入格式如 \nhttp://code.taobao.org/svn/dev_codes/trunk）。\n[http://code.taobao.org/svn/dev_codes/trunk）。] \nCoding\n暂不支持导入外站的私有项目，另外受制于网络条件，Coding不能一定保证导入成功。结果会通过站内通知和邮件告知您。\n\n\n是不是所有项目都需要\nREADME\n,开源许可证和\n.GITIGNORE\n文件？\n\n我们会推荐用户在新建项目的时候，同时创建\nREADME，选择相应的开源许可证和\n.gitignore\n文件，以便更有效地进行项目管理；用户可以从实际需求出发进行选择。\n\n\nGIT\n有多少存储空间？\n\nGit\n的免费存储空间为：单项目限制\n1G，另外请注意，Git\n是用来存放源码的，如果里面存有大量的二进制文件（图片，音乐，视频，可执行程序，编译后的库等等）将会快速占用大量的空间，因此不建议这样做。\n\n\n用户可以建多少个仓库？\n\nGit\n仓库跟项目是1对1的关系，用户可以免费建1000个项目。', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00'), ('50', '1', '演示第三方服务常见问题', 'https://coding.net/help/faq/paas/service.html', '---\nlayout: post\n\ntitle: 演示第三方服务常见问题\n---\n\n第三方服务相关的常见问题列表：\n\n---\n\n## MySQL 服务有时候会拒绝连接？\n\nMySQL 有连接数量限制，目前并发连接上限是 10 个，请注意在程序中及时关闭链接，其它的服务也有类似的限制。\n\n## 导入自己的 SQL 文件时提示无权限？\n\n演示平台提供的数据库用户只有有限的权限（无创建数据库权限），请把 SQL 文件内的建库语句(CREATE DATABASE) 去除，再执行导入试试。\n\n## 使用本地客户端工具连接数据库？\n\n目前不支持使用本地客户端工具连接数据库或其它服务，请使用网页上的服务控制台功能。\n\n## 如何执行定时任务(cron)？\n\n演示平台不支持 crontab，也没有提供可替代的服务支持，目前用户只能自己编写程序来实现定时任务。 自定义的定时任务程序可以嵌入在应用主程序里，也可以在 Procfile 里添加选项启动独立的进程。\n\n## “查看日志” 那里看到一些 ERR 开头的信息？\n\n这个 ERR 不一定是错误信息，部分 web 服务器启动时会有信息输出到 STDERR，请自行分辨是否是自己应用的错误信息。\n\n## 演示平台部署的网站支持 HTTPS 吗？\n\n不支持，但是你使用 https 地址也可以访问，只是浏览器会提示证书不受信任，因为我们使用的是自签名证书。\n\n## 绑定数据库等服务的方法？\n\n成功开启演示后默认进入控制台页面，点击左侧 “服务管理” 选项，在这里添加和绑定服务，目前支持的服务有： mysql，postgresql，redis，mongodb，filesystem。\n\n## 演示里环境变量添加方法？\n\n在演示平台通过检测成功开启后，选择左侧菜单栏中的 “环境变量”，可以管理环境变量。\n\n注意： 对环境变量做的修改需要重启应用才会生效。\n\n## 演示中的文件系统服务数据下载方法？\n\n开启项目演示后，点击左侧菜单栏“服务管理”，绑定服务后可以看到 “已绑定服务”，点击操作里的 “控制台”， 右上角即有 “备份数据” 按钮可以打包下载所有数据。不支持下载应用本身的文件系统数据。\n\n## “源码路径” 是什么，怎么设置？\n\n在演示的控制台可以看到高级选项-源码路径，源码目录是指要部署的目录，只有这个目录下的文件或代码才会被部署。\n\n## 演示平台的第三方服务可以跨应用访问吗？\n\n服务和应用是多对多的关系，是可以跨应用的\n\n----\n\n## 上一篇 >> [演示部署问题](/help/faq/paas/deploy.html)', '第三方服务相关的常见问题列表：\n\n\n\n\n\nMYSQL\n服务有时候会拒绝连接？\n\nMySQL\n有连接数量限制，目前并发连接上限是\n10\n个，请注意在程序中及时关闭链接，其它的服务也有类似的限制。\n\n\n导入自己的\nSQL\n文件时提示无权限？\n\n演示平台提供的数据库用户只有有限的权限（无创建数据库权限），请把\nSQL\n文件内的建库语句(CREATE\nDATABASE)\n去除，再执行导入试试。\n\n\n使用本地客户端工具连接数据库？\n\n目前不支持使用本地客户端工具连接数据库或其它服务，请使用网页上的服务控制台功能。\n\n\n如何执行定时任务(CRON)？\n\n演示平台不支持\ncrontab，也没有提供可替代的服务支持，目前用户只能自己编写程序来实现定时任务。\n自定义的定时任务程序可以嵌入在应用主程序里，也可以在\nProcfile\n里添加选项启动独立的进程。\n\n\n“查看日志”\n那里看到一些\nERR\n开头的信息？\n\n这个\nERR\n不一定是错误信息，部分\nweb\n服务器启动时会有信息输出到\nSTDERR，请自行分辨是否是自己应用的错误信息。\n\n\n演示平台部署的网站支持\nHTTPS\n吗？\n\n不支持，但是你使用\nhttps\n地址也可以访问，只是浏览器会提示证书不受信任，因为我们使用的是自签名证书。\n\n\n绑定数据库等服务的方法？\n\n成功开启演示后默认进入控制台页面，点击左侧\n“服务管理”\n选项，在这里添加和绑定服务，目前支持的服务有：\nmysql，postgresql，redis，mongodb，filesystem。\n\n\n演示里环境变量添加方法？\n\n在演示平台通过检测成功开启后，选择左侧菜单栏中的\n“环境变量”，可以管理环境变量。\n\n\n注意：\n对环境变量做的修改需要重启应用才会生效。\n\n\n演示中的文件系统服务数据下载方法？\n\n开启项目演示后，点击左侧菜单栏“服务管理”，绑定服务后可以看到\n“已绑定服务”，点击操作里的\n“控制台”，\n右上角即有\n“备份数据”\n按钮可以打包下载所有数据。不支持下载应用本身的文件系统数据。\n\n\n“源码路径”\n是什么，怎么设置？\n\n在演示的控制台可以看到高级选项-源码路径，源码目录是指要部署的目录，只有这个目录下的文件或代码才会被部署。\n\n\n演示平台的第三方服务可以跨应用访问吗？\n\n服务和应用是多对多的关系，是可以跨应用的\n\n\n\n\n\n上一篇\n>> \n演示部署问题\n[/HELP/FAQ/PAAS/DEPLOY.HTML]', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00'), ('51', '1', '部署常见问题', 'https://coding.net/help/faq/paas/deploy.html', '---\nlayout: post\n\ntitle: 部署常见问题\n---\n\n演示部署相关的常见问题列表：\n\n---\n\n\n## 项目一键部署失败？\n\n部署失败或无法启动的可能原因和解决办法：\n\n1. 项目无效：一般会在日志里有提示 Staging failed: An application could not be detected by any available buildpack。请参考我们提供的 [示例项目](https://coding.net/u/demo)，检查自己的项目是否符合要求，或者查看相应语言的 [文档](http://docs.coding.io)。\n2. 网络问题：这个有两种情况，一种是由于网络波动导致的数据传输出错，一般日志里会有 stdin: not in gzip format 之类的错误，重试部署即可；还有一种是部分包管理器要下载的资源在国外，国内无法访问，我们已经为多数包管理器配置了代理和本地缓存以加快部署，但可能还有些没处理的，如果你发现了请向我们 反馈。\n3. 部署超时：系统部署项目的最长时间为 15分钟，部署的过程包括下载依赖、编译和打包等，如果部署达到了这个时间还没完成就会失败。这个问题最常见的原因就是上面的 网络问题。\n4. 应用循环重启：这种情况实际上是应用在反复崩溃(CRASH)，表现为状态始终是 ”正在启动”，有两个可能的原因：一个是内存不足，日志里一般会有 \"reason\"=>\"CRASHED\" 错误，请加大内存重新部署；另一个是应用监听的端口不对，日志里一般会有 failed to start accepting connections 错误，请修改应用的监听端口为 PORT 环境变量里的值。\n5. 缺少启动命令：部分语言和框架需的项目部署时需要用户手工指定制动命令，如果没有指定项目可能会一直停留在 ”正在启动” 状态，日志里可以看到 missing start command 错误，请创建 Procfile 文件指定启动命令。\n6. 系统故障：请到 http://status.coding.net 查看系统的组件状态和详细的事件历史。\n\n各种无法辨识的异常情况，请到 反馈区 发表讨论，我们有专家在线跟进解答。\n\n## 一键部署时提示 “内存使用已达到上限”？\n\n每个用户的运行空间有 512M 的免费内存可以使用，出现这个提示说明你的内存已经使用完了。 可以通过删除其他项目的演示来释放内存，或者调小其他应用演示的内存。\n\n## 项目演示的状态一直为 “部署中”？\n\n系统部署项目的最长时间为 15分钟。如果部署的时间还不是很久，那请再等等，打开 “查看日志” 页面可以看到部署的日志信息。如果超过了 15 分钟 还没有部署成功，这时可以先点击 “停止” 按钮，再点击 “一键部署” 来重新部署。\n\n## 如何绑定自定义域名，可以用自己注册的吗？\n\n打开项目演示，点击开始检测，成功后开启功能，选择部署到“香港”(高级项目)服务器即可。\n\n\n## 演示平台最多可以支持多大的IP访问？\n\n演示平台不支持高并发访问，不做任何 SLA 保障，我们没有做 IP 数限制，但是如果某个应用访问量太大，影响其它应用的访问，这个应用有可能会被停止。\n\n## 如何部署纯静态 HTML 网站？\n\n请参考官方的 [demo](https://coding.net/u/demo/p/static-site/git) 进行配置， 不要忘记在 项目中添加 Staticfile，该文件为静态网站的特征文件。\n\n## 项目的语言或框架被识别错了？\n\n如果你的项目内同时存在两种语言的标记文件，那项目的运行环境可能不会被正确的识别，这时候可以到部署的 “高级选项” 里手工指定运行环境。\n\n## Jekyll、Hexo 等静态网站部署支持？\n\n演示平台是通用的 PAAS 平台，可以运行各种 Web 应用程序，用户可以通过演示平台的各种语言支持自己去写代码实现， 这里给出一个基于 Ruby 运行环境实现可以自动重新构建站点的 [Jekyll 示例](https://coding.net/u/demo/p/jekyll-demo/git)。\n\n上面的例子是在服务器端重新构建网站的，对新手来说可能有一定难度。所以，我们推荐在本地构建好静态站点再 push 上来，这样可以直接把站点部署为纯静态网站，稍作一些配置就可以实现自动更新，这种方式不需要用户写代码， 具体配置方法参考 静态网站支持 文档。\n\n温馨提示： 演示平台现已内置 Jekyll 支持，支持自动检测 Jekyll 网站（仅检测 master 分支，非 master 分支可忽略检测结果开启演示直接部署 Jekyll 站点所在的分支）。\n静态网站部署后部分 URL 访问显示 404？\n\n由于一些底层的技术原因，目前部署的应用里包含的中文名文件或文件夹在应用里会无法访问，请尽量不要在部署的源文件或文件夹里出现非英文文件名。\n\n## Push 代码并部署后，演示的效果和预期不符？\n\n平台只管把代码更新到你要部署的版本，运行效果是程序的问题。有两种方法可以检查代码是不是最新版本：\n\n检查部署后的 commit id 是不是最新的\n在 文件系统 直接看运行中的文件是不是最新的\n\n## 支持部署时自动获取 git 子模块的代码吗？\n\n不支持，请在部署前预先使用子模块 (submodule) 的代码替换子模块放到应用源码里。\n\n## 演示平台里部署的项目表单或 url 乱码？\n\n这与平台无关，请自行 Google 相应语言框架的处理方法。\n\n## 支持 Push 代码后自动更新部署演示吗？\n\n不支持，我们不推荐这样频繁部署演示，而且也不能保证每次 push 后都可以部署成功，毕竟大多数演示不是 静态 HTML 站点。\n如果有此需求请使用WebIDE \n\n## “查看日志” 那里看到一些 ERR 开头的信息？\n\n这个 ERR 不一定是错误信息，部分 web 服务器启动时会有信息输出到 STDERR，请自行分辨是否是自己应用的错误信息。\n\n## 演示平台部署的网站支持 HTTPS 吗？\n\n不支持，但是你使用 https 地址也可以访问，只是浏览器会提示证书不受信任，因为我们使用的是自签名证书。\n\n---\n\n## 上一篇 >> [语言&框架支持问题](/help/faq/paas/language.html)\n\n## 下一篇 >> [第三方服务问题](/help/faq/paas/service.html)', '演示部署相关的常见问题列表：\n\n\n\n\n\n项目一键部署失败？\n\n部署失败或无法启动的可能原因和解决办法：\n\n 1. \n    项目无效：一般会在日志里有提示\n    Staging\n    failed:\n    An\n    application\n    could\n    not\n    be\n    detected\n    by\n    any\n    available\n    buildpack。请参考我们提供的 \n    示例项目\n    [https://coding.net/u/demo] \n    ，检查自己的项目是否符合要求，或者查看相应语言的 \n    文档\n    [http://docs.coding.io] \n    。\n 2. \n    网络问题：这个有两种情况，一种是由于网络波动导致的数据传输出错，一般日志里会有\n    stdin:\n    not\n    in\n    gzip\n    format\n    之类的错误，重试部署即可；还有一种是部分包管理器要下载的资源在国外，国内无法访问，我们已经为多数包管理器配置了代理和本地缓存以加快部署，但可能还有些没处理的，如果你发现了请向我们\n    反馈。\n 3. \n    部署超时：系统部署项目的最长时间为\n    15分钟，部署的过程包括下载依赖、编译和打包等，如果部署达到了这个时间还没完成就会失败。这个问题最常见的原因就是上面的\n    网络问题。\n 4. \n    应用循环重启：这种情况实际上是应用在反复崩溃(CRASH)，表现为状态始终是\n    ”正在启动”，有两个可能的原因：一个是内存不足，日志里一般会有\n    \"reason\"=>\"CRASHED\"\n    错误，请加大内存重新部署；另一个是应用监听的端口不对，日志里一般会有\n    failed\n    to\n    start\n    accepting\n    connections\n    错误，请修改应用的监听端口为\n    PORT\n    环境变量里的值。\n 5. \n    缺少启动命令：部分语言和框架需的项目部署时需要用户手工指定制动命令，如果没有指定项目可能会一直停留在\n    ”正在启动”\n    状态，日志里可以看到\n    missing\n    start\n    command\n    错误，请创建\n    Procfile\n    文件指定启动命令。\n 6. \n    系统故障：请到 \n    http://status.coding.net\n    [http://status.coding.net] \n    查看系统的组件状态和详细的事件历史。\n\n\n各种无法辨识的异常情况，请到\n反馈区\n发表讨论，我们有专家在线跟进解答。\n\n\n一键部署时提示\n“内存使用已达到上限”？\n\n每个用户的运行空间有\n512M\n的免费内存可以使用，出现这个提示说明你的内存已经使用完了。\n可以通过删除其他项目的演示来释放内存，或者调小其他应用演示的内存。\n\n\n项目演示的状态一直为\n“部署中”？\n\n系统部署项目的最长时间为\n15分钟。如果部署的时间还不是很久，那请再等等，打开\n“查看日志”\n页面可以看到部署的日志信息。如果超过了\n15\n分钟\n还没有部署成功，这时可以先点击\n“停止”\n按钮，再点击\n“一键部署”\n来重新部署。\n\n\n如何绑定自定义域名，可以用自己注册的吗？\n\n打开项目演示，点击开始检测，成功后开启功能，选择部署到“香港”(高级项目)服务器即可。\n\n\n演示平台最多可以支持多大的IP访问？\n\n演示平台不支持高并发访问，不做任何\nSLA\n保障，我们没有做\nIP\n数限制，但是如果某个应用访问量太大，影响其它应用的访问，这个应用有可能会被停止。\n\n\n如何部署纯静态\nHTML\n网站？\n\n请参考官方的 \ndemo\n[https://coding.net/u/demo/p/static-site/git] \n进行配置，\n不要忘记在\n项目中添加\nStaticfile，该文件为静态网站的特征文件。\n\n\n项目的语言或框架被识别错了？\n\n如果你的项目内同时存在两种语言的标记文件，那项目的运行环境可能不会被正确的识别，这时候可以到部署的\n“高级选项”\n里手工指定运行环境。\n\n\nJEKYLL、HEXO\n等静态网站部署支持？\n\n演示平台是通用的\nPAAS\n平台，可以运行各种\nWeb\n应用程序，用户可以通过演示平台的各种语言支持自己去写代码实现，\n这里给出一个基于\nRuby\n运行环境实现可以自动重新构建站点的 \nJekyll\n示例\n[https://coding.net/u/demo/p/jekyll-demo/git] \n。\n\n\n上面的例子是在服务器端重新构建网站的，对新手来说可能有一定难度。所以，我们推荐在本地构建好静态站点再\npush\n上来，这样可以直接把站点部署为纯静态网站，稍作一些配置就可以实现自动更新，这种方式不需要用户写代码，\n具体配置方法参考\n静态网站支持\n文档。\n\n\n温馨提示：\n演示平台现已内置\nJekyll\n支持，支持自动检测\nJekyll\n网站（仅检测\nmaster\n分支，非\nmaster\n分支可忽略检测结果开启演示直接部署\nJekyll\n站点所在的分支）。\n\n静态网站部署后部分\nURL\n访问显示\n404？\n\n\n由于一些底层的技术原因，目前部署的应用里包含的中文名文件或文件夹在应用里会无法访问，请尽量不要在部署的源文件或文件夹里出现非英文文件名。\n\n\nPUSH\n代码并部署后，演示的效果和预期不符？\n\n平台只管把代码更新到你要部署的版本，运行效果是程序的问题。有两种方法可以检查代码是不是最新版本：\n\n\n检查部署后的\ncommit\nid\n是不是最新的\n\n在\n文件系统\n直接看运行中的文件是不是最新的\n\n\n支持部署时自动获取\nGIT\n子模块的代码吗？\n\n不支持，请在部署前预先使用子模块\n(submodule)\n的代码替换子模块放到应用源码里。\n\n\n演示平台里部署的项目表单或\nURL\n乱码？\n\n这与平台无关，请自行\nGoogle\n相应语言框架的处理方法。\n\n\n支持\nPUSH\n代码后自动更新部署演示吗？\n\n不支持，我们不推荐这样频繁部署演示，而且也不能保证每次\npush\n后都可以部署成功，毕竟大多数演示不是\n静态\nHTML\n站点。\n\n如果有此需求请使用WebIDE\n\n\n“查看日志”\n那里看到一些\nERR\n开头的信息？\n\n这个\nERR\n不一定是错误信息，部分\nweb\n服务器启动时会有信息输出到\nSTDERR，请自行分辨是否是自己应用的错误信息。\n\n\n演示平台部署的网站支持\nHTTPS\n吗？\n\n不支持，但是你使用\nhttps\n地址也可以访问，只是浏览器会提示证书不受信任，因为我们使用的是自签名证书。\n\n\n\n\n\n上一篇\n>> \n语言&框架支持问题\n[/HELP/FAQ/PAAS/LANGUAGE.HTML]\n\n下一篇\n>> \n第三方服务问题\n[/HELP/FAQ/PAAS/SERVICE.HTML]', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00'), ('52', '1', '语言&框架支持常见问题', 'https://coding.net/help/faq/paas/language.html', '---\nlayout: post\n\ntitle: 语言&框架支持常见问题\n---\n\n语言&框架支持相关的常见问题列表：\n\n---\n\n## 演示平台部署支持什么语言和框架？\n\n演示平台支持主流的语言和框架，具体查看[演示部署文档](http://docs.coding.io/)\n\n## Java 项目用到了非 Maven 中央库里的 jar 包？\n\n如果你使用第三方的 maven 源，可以通过自定义 maven 配置文件来让系统使用你的自定义源，具体方法参考 Java 语言支持 的 自定义 章节。\n\n## Java 项目打印出的日志乱码？\n\n请在 pom.xml 配置文件里设置源文件的编码为 UTF-8，配置方法：\n\n    <project>\n        <properties>\n            <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        </properties>\n    </project>\n\n## Java Tomcat 是否支持设置 URIEncoding 选项？\n\n不支持，URIEncoding 设置不能解决所有乱码问题，我们推荐用户自己通过编码解决编码问题，而不是依赖 Tomcat 的配置， 因为万一以后不使用 Tomcat 而换为其它没有这个配置选项的 Servlet 容器，还是会出现编码问题。解决方法可以参考 Tomcat 编码问题官方 FAQ，我们也给出了一个手工处理编码问题的 代码示例。\n\n## 支持部署非 maven 的 Java 项目吗？\n\n不支持，Java 语言目前只支持部署 maven 项目，我们不推荐把依赖的 jar 包放到版本控制里，请使用 maven 管理， maven 依赖会在部署时自动下载，详情参考 [Java 语言支持](http://docs.coding.io/languages/java/)。\n\n## PHP 演示是否支持伪静态(url rewrite)?\n\n支持，具体配置方法请参考 [PHP 语言支持](http://docs.coding.io/languages/php/) 的 Web 服务器 章节。\n\n## PHP 的某个内置扩展无法使用？\n\n部分 PHP 的内置扩展没有开启，需要用户手工配置 composer.json 来开启，详情参考 [PHP 语言支持](http://docs.coding.io/languages/php/) 的 扩展 章节。\n\n## 低版本 PHP (5.5以下)支持？\n\n我们只支持 5.5/5.6 版本的 PHP，如果需要使用更低的版本，可以通过自定义 buildpack 来实现，参考：\n\nhttps://github.com/CHH/heroku-buildpack-php\nhttps://github.com/iphoting/heroku-buildpack-php-tyler\n\n## Node.js 如何执行 grunt/bower/npm 命令？\n\n如果你需要在部署的时候执行一些额外的构建命令，可以在 package.json 中指定，具体方法参考 [Node.js 语言支持](http://docs.coding.io/languages/nodejs/)) 的 自定义构建 章节。\n\n## ASP.NET 语言支持？\n\n我们官方不提供 asp.net 的支持，但是用户可以通过自定义 [buildpack](http://docs.coding.io/references/buildpack/) 来实现支持（目前不是很完美）， 参考这两个社区 buildpack：[.net-buildpack](https://github.com/cloudfoundry-community/.net-buildpack) 和 [cloudfoundry-buildpack-clr](https://github.com/cloudfoundry-incubator/cloudfoundry-buildpack-clr)。\n\n## 支持演示非 web 项目吗？\n\n官方不提供非 web 项目支持，但可以通过自定义 buildpack 实现，有兴趣的用户可以自己参考 CF 和 heroku 的 buildpack 文档来研究。\n\n---\n\n## 下一篇 >> [演示部署问题](/help/faq/paas/deploy.html)', '语言&框架支持相关的常见问题列表：\n\n\n\n\n\n演示平台部署支持什么语言和框架？\n\n演示平台支持主流的语言和框架，具体查看 \n演示部署文档\n[http://docs.coding.io/]\n\n\nJAVA\n项目用到了非\nMAVEN\n中央库里的\nJAR\n包？\n\n如果你使用第三方的\nmaven\n源，可以通过自定义\nmaven\n配置文件来让系统使用你的自定义源，具体方法参考\nJava\n语言支持\n的\n自定义\n章节。\n\n\nJAVA\n项目打印出的日志乱码？\n\n请在\npom.xml\n配置文件里设置源文件的编码为\nUTF-8，配置方法：\n\n<project>\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    </properties>\n</project>\n\n\n\nJAVA\nTOMCAT\n是否支持设置\nURIENCODING\n选项？\n\n不支持，URIEncoding\n设置不能解决所有乱码问题，我们推荐用户自己通过编码解决编码问题，而不是依赖\nTomcat\n的配置，\n因为万一以后不使用\nTomcat\n而换为其它没有这个配置选项的\nServlet\n容器，还是会出现编码问题。解决方法可以参考\nTomcat\n编码问题官方\nFAQ，我们也给出了一个手工处理编码问题的\n代码示例。\n\n\n支持部署非\nMAVEN\n的\nJAVA\n项目吗？\n\n不支持，Java\n语言目前只支持部署\nmaven\n项目，我们不推荐把依赖的\njar\n包放到版本控制里，请使用\nmaven\n管理，\nmaven\n依赖会在部署时自动下载，详情参考 \nJava\n语言支持\n[http://docs.coding.io/languages/java/] \n。\n\n\nPHP\n演示是否支持伪静态(URL\nREWRITE)?\n\n支持，具体配置方法请参考 \nPHP\n语言支持\n[http://docs.coding.io/languages/php/] \n的\nWeb\n服务器\n章节。\n\n\nPHP\n的某个内置扩展无法使用？\n\n部分\nPHP\n的内置扩展没有开启，需要用户手工配置\ncomposer.json\n来开启，详情参考 \nPHP\n语言支持\n[http://docs.coding.io/languages/php/] \n的\n扩展\n章节。\n\n\n低版本\nPHP\n(5.5以下)支持？\n\n我们只支持\n5.5/5.6\n版本的\nPHP，如果需要使用更低的版本，可以通过自定义\nbuildpack\n来实现，参考：\n\n\nhttps://github.com/CHH/heroku-buildpack-php\n[https://github.com/CHH/heroku-buildpack-php]\n\nhttps://github.com/iphoting/heroku-buildpack-php-tyler\n[https://github.com/iphoting/heroku-buildpack-php-tyler]\n\n\nNODE.JS\n如何执行\nGRUNT/BOWER/NPM\n命令？\n\n如果你需要在部署的时候执行一些额外的构建命令，可以在\npackage.json\n中指定，具体方法参考 \nNode.js\n语言支持\n[http://docs.coding.io/languages/nodejs/] \n)\n的\n自定义构建\n章节。\n\n\nASP.NET\n语言支持？\n\n我们官方不提供\nasp.net\n的支持，但是用户可以通过自定义 \nbuildpack\n[http://docs.coding.io/references/buildpack/] \n来实现支持（目前不是很完美），\n参考这两个社区\nbuildpack： \n.net-buildpack\n[https://github.com/cloudfoundry-community/.net-buildpack] \n和 \ncloudfoundry-buildpack-clr\n[https://github.com/cloudfoundry-incubator/cloudfoundry-buildpack-clr] \n。\n\n\n支持演示非\nWEB\n项目吗？\n\n官方不提供非\nweb\n项目支持，但可以通过自定义\nbuildpack\n实现，有兴趣的用户可以自己参考\nCF\n和\nheroku\n的\nbuildpack\n文档来研究。\n\n\n\n\n\n下一篇\n>> \n演示部署问题\n[/HELP/FAQ/PAAS/DEPLOY.HTML]', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00'), ('53', '1', '文件管理', 'https://coding.net/help/faq/project/files.html', '---\nlayout: post\n\ntitle: 文件管理\n---\n\n\n## 如何创建文档？\n\n方法一：在项目的左侧菜单栏选择「文件」，点击头像下方的蓝色「+」创建 TXT/HTML/Markdown 文档，或点蓝色云按钮上传本地文件。\n方法二：在项目的左侧菜单栏选择「文见」，直接拖拽文档到虚线框内上传。\n点击此处查看 [Markdown 语法说明](/help/doc/project/markdown.html)。\n\n##  我可以上传哪些文档,大小有限制吗？\n\n支持所有格式文件的上传，单个文档不超过50M。\n\n## 我可以预览哪些文档？\n\n文档：Txt，md 等\n图片：jpg，jpeg，png 等\noffice： word， excel， ppt， pdf 等\n\n## 私有项目的文件可以供项目外的人查看吗？\n\n私有项目默认只有项目成员可以查看，但是可以通过点击文档上的分享按钮，获取 url 分享给外部好友。\n详细参见 [文件管理](/help/doc/project/files.html)\n\n\n\n\n', '如何创建文档？\n\n方法一：在项目的左侧菜单栏选择「文件」，点击头像下方的蓝色「+」创建\nTXT/HTML/Markdown\n文档，或点蓝色云按钮上传本地文件。\n\n方法二：在项目的左侧菜单栏选择「文见」，直接拖拽文档到虚线框内上传。\n\n点击此处查看 \nMarkdown\n语法说明\n[/help/doc/project/markdown.html] \n。\n\n\n我可以上传哪些文档,大小有限制吗？\n\n支持所有格式文件的上传，单个文档不超过50M。\n\n\n我可以预览哪些文档？\n\n文档：Txt，md\n等\n\n图片：jpg，jpeg，png\n等\n\noffice：\nword，\nexcel，\nppt，\npdf\n等\n\n\n私有项目的文件可以供项目外的人查看吗？\n\n私有项目默认只有项目成员可以查看，但是可以通过点击文档上的分享按钮，获取\nurl\n分享给外部好友。\n\n详细参见 \n文件管理\n[/help/doc/project/files.html]', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00'), ('54', '1', '项目设置常见问题', 'https://coding.net/help/faq/project/setting.html', '---\nlayout: post\n\ntitle: 项目设置常见问题\n---\n\n## 怎样创建一个新的项目？\n\n登录之后，将鼠标移至屏幕右上方的「+」，点击下拉菜单中的「项目」，即可进入新建项目操作流程。\n\n> 注意：项目一旦创建，项目属性（私有或者公开）便无法修改。\n\n## 一个账号可以创建多少个项目？\n单个账号可以创建总共1000个项目，包括公开和私有项目。\n\n## 公开项目与私有项目有什么区别？\n公开项目是完全公开的，包括源码，项目讨论，质量控制等，只有项目成员可以编辑该项目，但任何用户都可以进行 fork，关注，收藏等操作。\n私有项目只对项目成员可见，并不会公开展示于项目成员的个人页面上。只有项目创建者才能添加项目成员，项目的所有内容和更新都只有项目上的成员可以进行操作和查看\n\n## 如何修改项目信息？\n\n只有项目创建者有权修改项目信息。\n私有项目在项目的左侧菜单栏选择「设置」，可以修改项目的名称、图标和描述。\n公开项目在项目tab栏目的[设置]，进行选择修改。\n\n> 项目公开或者私有属性一经确定，便不可修改。\n\n## 可以对项目进行分组吗？\n\n可以。进入项目页面，点击右上角“分组”即可移动项目到指定或新建分组。\n\n## 如何删除项目？\n\n只有项目创建者有权删除项目。\n在项目的左侧菜单栏选择「设置」，点击「高级设置」，即可删除该项目。\n删除项目将会连同其相关的所有数据（包括 issues，pull requests，动态等在内）一起删除。\n详细参见 [项目设置](help/doc/project/getting-started.html)\n\n## 项目能否转让给他人？\n\n能。设置-高级设置-项目转让，创建者可以转让公开和私有项目。注意，项目转让会让创建者失去某些管理权限（如添加成员、开启演示、删除项目等），且只能转给项目成员。\n\n只有项目创建者有权修改项目信息。\n\n## 如何添加项目成员？\n\n只有项目创建者才有权限添加项目成员。\n在项目的菜单栏中选择「成员」，点击项目成员旁边的「+」，即可进入添加项目成员页面，目前支持 email，用户名和唯一标识添加。\n如果该成员已经注册了 Coding 账号，您的邀请将以私信的形式发送给TA，如果该成员还没有 Coding 账号，您的邀请则以 email 的形式发送给TA。\n\n## 我该如何退出项目？\n\n在项目的菜单栏中选择「成员」，在项目成员列表里面找到自己，然后点击退出按钮\n在项目的菜单栏选择「设置」，可以修改项目的名称、图标和描述。\n项目公开或者私有属性一经确定，便不可修改。\n\n## Coding 可以创建组织么？\n\nCoding 目前没有专门的“组织” 概念，后续会增加，目前可以用组织的名义注册账号，然后用这个账号创建项目，将组织成员加入到该项目里面。', '怎样创建一个新的项目？\n\n登录之后，将鼠标移至屏幕右上方的「+」，点击下拉菜单中的「项目」，即可进入新建项目操作流程。\n\n\n注意：项目一旦创建，项目属性（私有或者公开）便无法修改。\n\n\n一个账号可以创建多少个项目？\n\n单个账号可以创建总共1000个项目，包括公开和私有项目。\n\n\n公开项目与私有项目有什么区别？\n\n公开项目是完全公开的，包括源码，项目讨论，质量控制等，只有项目成员可以编辑该项目，但任何用户都可以进行\nfork，关注，收藏等操作。\n\n私有项目只对项目成员可见，并不会公开展示于项目成员的个人页面上。只有项目创建者才能添加项目成员，项目的所有内容和更新都只有项目上的成员可以进行操作和查看\n\n\n如何修改项目信息？\n\n只有项目创建者有权修改项目信息。\n\n私有项目在项目的左侧菜单栏选择「设置」，可以修改项目的名称、图标和描述。\n\n公开项目在项目tab栏目的[设置]，进行选择修改。\n\n\n项目公开或者私有属性一经确定，便不可修改。\n\n\n可以对项目进行分组吗？\n\n可以。进入项目页面，点击右上角“分组”即可移动项目到指定或新建分组。\n\n\n如何删除项目？\n\n只有项目创建者有权删除项目。\n\n在项目的左侧菜单栏选择「设置」，点击「高级设置」，即可删除该项目。\n\n删除项目将会连同其相关的所有数据（包括\nissues，pull\nrequests，动态等在内）一起删除。\n\n详细参见 \n项目设置\n[help/doc/project/getting-started.html]\n\n\n项目能否转让给他人？\n\n能。设置-高级设置-项目转让，创建者可以转让公开和私有项目。注意，项目转让会让创建者失去某些管理权限（如添加成员、开启演示、删除项目等），且只能转给项目成员。\n\n\n只有项目创建者有权修改项目信息。\n\n\n如何添加项目成员？\n\n只有项目创建者才有权限添加项目成员。\n\n在项目的菜单栏中选择「成员」，点击项目成员旁边的「+」，即可进入添加项目成员页面，目前支持\nemail，用户名和唯一标识添加。\n\n如果该成员已经注册了\nCoding\n账号，您的邀请将以私信的形式发送给TA，如果该成员还没有\nCoding\n账号，您的邀请则以\nemail\n的形式发送给TA。\n\n\n我该如何退出项目？\n\n在项目的菜单栏中选择「成员」，在项目成员列表里面找到自己，然后点击退出按钮\n\n在项目的菜单栏选择「设置」，可以修改项目的名称、图标和描述。\n\n项目公开或者私有属性一经确定，便不可修改。\n\n\nCODING\n可以创建组织么？\n\nCoding\n目前没有专门的“组织”\n概念，后续会增加，目前可以用组织的名义注册账号，然后用这个账号创建项目，将组织成员加入到该项目里面。', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00'), ('55', '1', '项目任务&讨论问题', 'https://coding.net/help/faq/project/task.html', '---\nlayout: post\n\ntitle: 项目任务&讨论问题\n---\n\n## 如何创建和指派任务？\n\n在项目的左侧菜单栏选择「任务」，在屏幕上方的文本框输入任务内容，点击右边的头像选择任务接受方，回车即可创建该任务。\n注意：目前只有私有项目具有任务功能！详细参见 [任务管理](/help/doc/project/task.html)\n\n## 任务评论支持 markdown 吗？\n\n可以。任务支持 markdown 评论，点击任务内容下方的“评论”会跳出文本框，可以对该任务进行评论。\n\n##  能否对任务进行关注和描述？\n\n可以。点击任务的时间， 进入详情，即可对任务进行关注和补充描述。\n\n\n## 私有项目如何给任务添加标签?\n\n创建任务的时候，点击右下角的标签，添加，详细参见 [任务管理](/help/doc/project/task.html)\n\n## 什么是项目讨论？\n\n项目讨论是只有项目成员可见的互动交流区域。该项目上的所有成员都可以在讨论区创建新的讨论帖，评论或者回复讨论。只有项目创建者和该讨论发起者可以编辑或删除已存在的讨论\n\n## 经常在讨论和任务看到 # 标志，这是什么？\n\n项目内的 Markdown 编辑器支持“#”自动提示，并通过 #ID 引用项目内任务和合并请求（公开项目引用 Pull Request）。\n\n## 如何创建新的讨论？\n\n在项目的左侧菜单栏选择「讨论」，点击项目讨论右边的「+」即可进入新讨论的创建页面。讨论的文本输入支持 Markdown 语法以及预览功能。\n详细参见 [讨论管理](/help/doc/project/discuss.html)  和 [markdown 语法说明](/help/doc/project/markdown.html)\n\n\n', '如何创建和指派任务？\n\n在项目的左侧菜单栏选择「任务」，在屏幕上方的文本框输入任务内容，点击右边的头像选择任务接受方，回车即可创建该任务。\n\n注意：目前只有私有项目具有任务功能！详细参见 \n任务管理\n[/help/doc/project/task.html]\n\n\n任务评论支持\nMARKDOWN\n吗？\n\n可以。任务支持\nmarkdown\n评论，点击任务内容下方的“评论”会跳出文本框，可以对该任务进行评论。\n\n\n能否对任务进行关注和描述？\n\n可以。点击任务的时间，\n进入详情，即可对任务进行关注和补充描述。\n\n\n私有项目如何给任务添加标签?\n\n创建任务的时候，点击右下角的标签，添加，详细参见 \n任务管理\n[/help/doc/project/task.html]\n\n\n什么是项目讨论？\n\n项目讨论是只有项目成员可见的互动交流区域。该项目上的所有成员都可以在讨论区创建新的讨论帖，评论或者回复讨论。只有项目创建者和该讨论发起者可以编辑或删除已存在的讨论\n\n\n经常在讨论和任务看到\n#\n标志，这是什么？\n\n项目内的\nMarkdown\n编辑器支持“#”自动提示，并通过\n#ID\n引用项目内任务和合并请求（公开项目引用\nPull\nRequest）。\n\n\n如何创建新的讨论？\n\n在项目的左侧菜单栏选择「讨论」，点击项目讨论右边的「+」即可进入新讨论的创建页面。讨论的文本输入支持\nMarkdown\n语法以及预览功能。\n\n详细参见 \n讨论管理\n[/help/doc/project/discuss.html] \n和 \nmarkdown\n语法说明\n[/help/doc/project/markdown.html]', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00'), ('56', '1', '用户账户常见问题', 'https://coding.net/help/faq/account/user.html', '---\nlayout: post\n\ntitle: 用户账户常见问题\n---\n\n\n## 无法收到激活邮件&重置密码邮件？\n\n如果长时间收不到激活邮件，请检查一下你的垃圾邮件夹，或者重新尝试一下。如果连续尝试都无法收到激活邮件，则很可能您的邮件服务器拒收了来自 Coding.net 的邮件，您需要将 Coding.net 加入域白名单以确保收到来自 Coding.net 的邮件。\n如果无法解决请发送邮箱至 support@coding.net\n\n\n## 激活邮件的链接点开跳到首页了？\n\n尝试将连接复制到浏览器地址栏里。\n如果依然无法激活请将此激活网址和您的浏览器版本发邮件至 support@coding.net\n\n## 怎么修改邮箱，个性后缀，昵称？\n\n 个性后缀一旦设置，无法修改，邮箱和昵称可以通过如下方法设置。\n \n - 方法一：\n 登录个人账户之后，将鼠标移至用户头像，点击下拉菜单中的「设置」，即可进入个人设置页面，进行个人资料的修改。\n - 方法二：\n 登录个人账户之后，点击屏幕左下角的「设置」，即可进入个人设置页面，进行个人资料的修改。\n\n## 手机号验证了，收不到验证码？\n\n如果您出现这样的问题，请发邮件包括您的手机号码和运营商至 support@coding.net\n                   \n## 什么是码币，码币有什么用？\n\n码币是 Coding 平台推出的线上虚拟货币，可通过在 Coding 上进行 push 代码、完善个人信息、冒泡等动作赚取，目前可用于购买 Coding 商店的礼品。\n你可以利用码币购买 Shop 页面所列 Coding 定制等商品：洋葱猴抱枕、Coding 毛巾、Coding 短裤、 书籍 ...... (推代码是真的能挣钱！)\n\n## 如何邀请好友？\n\n - 定向邀请好友：\n \n 1.点击页面右上方的+，点击 好友\n 2.点击马上邀请好友，输入您要邀请的好友的email，对方即可收到您的邀请邮件\n \n - 不定向邀请好友：\n \n 您可以复制你的专属链接给您的好友，无需知道对方email，将邀请链接发给对方就可以啦\n\n 详细参见 [用户注册](/help/doc/account/register)\n\n## 商城购买的商品什么时候发货，怎么没有货单？\n\nShop中的商品会在每周五进行发货（周五当天订购商品需等到下周五发货），物流信息会在三天内更新。\n\n## 什么是冒泡？ 可以在冒泡干嘛？\n\n冒泡是 Coding.net 为方便程序开发者们进行交流、享受技术开发乐趣而打造的即时状态更新功能。支持 Markdown 语法，Emoji 表情，3M 以下的图片上传，预览功能等。\n用户发布的冒泡是好友和关注相同话题的用户可见的，同时编辑会推荐部分有价值的冒泡广场可见，并支持评论和回复功能。\n[MarkDown语法说明](/help/doc/project/mardown.html))查看 Markdown 语法说明。\n\n## 怎么开启两步验证？两步验证手机丢失怎么办？\n\n详细步骤参见文档[两步验证](/help/doc/account/2fa.html)\n\n## 如果丢失了两步验证的身份验证器，该怎么办？\n\n请用您的注册邮箱发送一封邮件到 support@coding.net，并附上您的电话联系方式，客服会在24小时以内联系您，帮助关闭两步验证。', '无法收到激活邮件&重置密码邮件？\n\n如果长时间收不到激活邮件，请检查一下你的垃圾邮件夹，或者重新尝试一下。如果连续尝试都无法收到激活邮件，则很可能您的邮件服务器拒收了来自\nCoding.net\n的邮件，您需要将\nCoding.net\n加入域白名单以确保收到来自\nCoding.net\n的邮件。\n\n如果无法解决请发送邮箱至\nsupport@coding.net\n\n\n激活邮件的链接点开跳到首页了？\n\n尝试将连接复制到浏览器地址栏里。\n\n如果依然无法激活请将此激活网址和您的浏览器版本发邮件至\nsupport@coding.net\n\n\n怎么修改邮箱，个性后缀，昵称？\n\n个性后缀一旦设置，无法修改，邮箱和昵称可以通过如下方法设置。\n\n * \n   方法一：\n   \n   登录个人账户之后，将鼠标移至用户头像，点击下拉菜单中的「设置」，即可进入个人设置页面，进行个人资料的修改。\n * \n   方法二：\n   \n   登录个人账户之后，点击屏幕左下角的「设置」，即可进入个人设置页面，进行个人资料的修改。\n\n\n手机号验证了，收不到验证码？\n\n如果您出现这样的问题，请发邮件包括您的手机号码和运营商至\nsupport@coding.net\n\n\n什么是码币，码币有什么用？\n\n码币是\nCoding\n平台推出的线上虚拟货币，可通过在\nCoding\n上进行\npush\n代码、完善个人信息、冒泡等动作赚取，目前可用于购买\nCoding\n商店的礼品。\n\n你可以利用码币购买\nShop\n页面所列\nCoding\n定制等商品：洋葱猴抱枕、Coding\n毛巾、Coding\n短裤、\n书籍\n......\n(推代码是真的能挣钱！)\n\n\n如何邀请好友？\n * \n   定向邀请好友：\n   \n   \n   1.点击页面右上方的+，点击\n   好友\n   \n   2.点击马上邀请好友，输入您要邀请的好友的email，对方即可收到您的邀请邮件\n   \n   \n * \n   不定向邀请好友：\n   \n   \n   您可以复制你的专属链接给您的好友，无需知道对方email，将邀请链接发给对方就可以啦\n   \n   \n   详细参见 \n   用户注册\n   [/help/doc/account/register]\n   \n   \n\n\n商城购买的商品什么时候发货，怎么没有货单？\n\nShop中的商品会在每周五进行发货（周五当天订购商品需等到下周五发货），物流信息会在三天内更新。\n\n\n什么是冒泡？\n可以在冒泡干嘛？\n\n冒泡是\nCoding.net\n为方便程序开发者们进行交流、享受技术开发乐趣而打造的即时状态更新功能。支持\nMarkdown\n语法，Emoji\n表情，3M\n以下的图片上传，预览功能等。\n\n用户发布的冒泡是好友和关注相同话题的用户可见的，同时编辑会推荐部分有价值的冒泡广场可见，并支持评论和回复功能。\n\nMarkDown语法说明\n[/help/doc/project/mardown.html] \n)查看\nMarkdown\n语法说明。\n\n\n怎么开启两步验证？两步验证手机丢失怎么办？\n\n详细步骤参见文档 \n两步验证\n[/help/doc/account/2fa.html]\n\n\n如果丢失了两步验证的身份验证器，该怎么办？\n\n请用您的注册邮箱发送一封邮件到\nsupport@coding.net，并附上您的电话联系方式，客服会在24小时以内联系您，帮助关闭两步验证。', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00'), ('57', '1', '移动端常见问题', 'https://coding.net/help/faq/mobile/all.html', '---\nlayout: post\n\ntitle: 移动端常见问题\n---\n\n## 移动端可以删除项目吗？\n\n如果您是项目的创建者，才会有权限进行删除操作，请您在项目首页的项目信息点击右侧「>」进入项目设置界面，点击「高级设置」即可删除项目。\n\n## 如何给任务添加标签？\n\n在任务详情界面点击左上方「添加标签」，去往标签管理界面，选择相应的标签或者创建新标签即可。\n\n## 如何编辑 MarkDown 格式的讨论？\n\n在发讨论界面，讨论内容编辑状态下键盘顶部会出现 MarkDown 快捷键，您编辑完成 MarkDown 格式的讨论也可以进行预览。\n\n## 如何更改个性后缀？\n\n个性后缀一经确认，不能修改，个性后缀相当于你的身份ID。但是用户名可以去账户进行修改。\n\n## 如何发表话题冒泡？\n\n您在发表冒泡页面点击「#」，进入话题热门推荐列表，选择推荐话题或新建话题即可发表话题。\n\n## 如何批量下载、移动、删除文件？\n\n进入文件夹界面，点击左上角「编辑」，多项选中文件，点击底部「下载」、「移动」或「删除」即可。\n\n## 想要查看公开项目或者 fork 公开项目怎么办？\n\n客户端暂时还没有提供项目广场的入口，您可以去往好友的个人中心找到「Ta 的项目」，即可查看好友的公开项目。\n进入公开项目首页，点击「Fork」按钮，Fork 成功后将跳往复制后的新项目首页。\n\n## 代码提交历史在哪里？\n\n进入代码子目录列表点击右上角时钟 icon 即可进入「提交历史」列表。\n\n## 合并 Pull Request / Merge Request 有哪些限制？\n\n有权限操作分支的项目成员可进行 “合并”、“拒绝” 操作\n有权限操作分支的项目成员和 PR/MR 发起人若是同一人（ “合并”、“拒绝”、 “取消”皆可操作） \n非项目成员的 PR/MR 发起人只可进行 “取消” 操作\n\n## 如何查看某个提交的文件改动以及前后代码对比呢？\n\n进入某个 PR/MR 详情，点击查看「文件改动」，进入文件改动列表，点击某一个列即可查看文件改动详情。\n点击右上角「查看文件」即可查看某个提交的文件代码前后对比。\n\n## 如何开启两步验证？\n\n首先，您要登录 coding.net ，去往个人账户开启两步验证；\n其次，根据提示打开 Coding 客户端，点击项目列表右上方的「+」，选择下拉菜单中的「两步验证」，进入身份验证器界面，点击「开始验证」扫描 web 端二维码；\n最后，将扫描生成的动态验证码输入至 web 端，点击「验证并开启」，开启后需要输入登录密码验证，点击「确认」两步验证成功开启。\n\n\n', '移动端可以删除项目吗？\n\n如果您是项目的创建者，才会有权限进行删除操作，请您在项目首页的项目信息点击右侧「>」进入项目设置界面，点击「高级设置」即可删除项目。\n\n\n如何给任务添加标签？\n\n在任务详情界面点击左上方「添加标签」，去往标签管理界面，选择相应的标签或者创建新标签即可。\n\n\n如何编辑\nMARKDOWN\n格式的讨论？\n\n在发讨论界面，讨论内容编辑状态下键盘顶部会出现\nMarkDown\n快捷键，您编辑完成\nMarkDown\n格式的讨论也可以进行预览。\n\n\n如何更改个性后缀？\n\n个性后缀一经确认，不能修改，个性后缀相当于你的身份ID。但是用户名可以去账户进行修改。\n\n\n如何发表话题冒泡？\n\n您在发表冒泡页面点击「#」，进入话题热门推荐列表，选择推荐话题或新建话题即可发表话题。\n\n\n如何批量下载、移动、删除文件？\n\n进入文件夹界面，点击左上角「编辑」，多项选中文件，点击底部「下载」、「移动」或「删除」即可。\n\n\n想要查看公开项目或者\nFORK\n公开项目怎么办？\n\n客户端暂时还没有提供项目广场的入口，您可以去往好友的个人中心找到「Ta\n的项目」，即可查看好友的公开项目。\n\n进入公开项目首页，点击「Fork」按钮，Fork\n成功后将跳往复制后的新项目首页。\n\n\n代码提交历史在哪里？\n\n进入代码子目录列表点击右上角时钟\nicon\n即可进入「提交历史」列表。\n\n\n合并\nPULL\nREQUEST\n/\nMERGE\nREQUEST\n有哪些限制？\n\n有权限操作分支的项目成员可进行\n“合并”、“拒绝”\n操作\n\n有权限操作分支的项目成员和\nPR/MR\n发起人若是同一人（\n“合并”、“拒绝”、\n“取消”皆可操作）\n\n非项目成员的\nPR/MR\n发起人只可进行\n“取消”\n操作\n\n\n如何查看某个提交的文件改动以及前后代码对比呢？\n\n进入某个\nPR/MR\n详情，点击查看「文件改动」，进入文件改动列表，点击某一个列即可查看文件改动详情。\n\n点击右上角「查看文件」即可查看某个提交的文件代码前后对比。\n\n\n如何开启两步验证？\n\n首先，您要登录\ncoding.net\n，去往个人账户开启两步验证；\n\n其次，根据提示打开\nCoding\n客户端，点击项目列表右上方的「+」，选择下拉菜单中的「两步验证」，进入身份验证器界面，点击「开始验证」扫描\nweb\n端二维码；\n\n最后，将扫描生成的动态验证码输入至\nweb\n端，点击「验证并开启」，开启后需要输入登录密码验证，点击「确认」两步验证成功开启。', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00'), ('58', '1', 'WebIDE 常见问题', 'https://coding.net/help/faq/webide/ide.html', '---\nlayout: post\n\ntitle: WebIDE 常见问题\n---\n\n## WebIDE 能实现什么基础操作？\n\nWebIDE 可以编辑代码，实时自动保存编辑， 支持提交代码，Push/Pull 代码，将代码在终端运行起来。\n同时右键操作文件树目录，还有项目文件，上传下载和预览功能，可以预览 图片，pdf，markdown, html 等文件。\n\n## WebIDE 可以支持什么语言和框架？\n\nWebIDE 是一款在线IDE环境，包括编辑器和运行环境，编辑器支持主流的编程语言的语法高亮和自动提示， 运行环境只要是 Linux 下支持的都可以可以通过安装软件支持。\n\n\n## 什么是 WorkSpace ，如何管理？ \n\nWorkSpace 是 WebIDE 在云端创建的一个工作空间，每个用户对每个项目只能创建一个WorkSpace。\n它包含了用户在云端的代码根目录和可选的环境配置。 详细参加 [工作空间](/help/doc/webide/workspace.html)\n\n## 如何分享环境，可以分享给任何人吗？\n\n环境分享，目前只能分享给项目成员，具体操作详见 [环境管理](/help/doc/webide/environment.html)\n\n## WebIDE 如何安装软件？\n\nWebIDE 的终端使用的 Ubuntu Linux，使用 apt-get install 安装软件\n\n## 如何运行程序？\n\n目前 WebIDE 运行程序需要在终端运行，详细参见, [运行程序](/help/doc/webide/execution.html)\n\n## 运行程序后，生成的 Access URL 报502，404 是怎么回事？\n\n - 404 错误是程序返回的问题，说明你的程序可能有问题。\n - 502 错误一般是路由的问题，需要你的程序监听 0.0.0.0 地址，同时端口需要匹配。 \n    详细参见，[运行程序](/help/doc/webide/execution.html)\n \n## WebIDE 可以安装数据库吗？\n\n你可以在终端里用 apt-get 自行安装任何想要的软件，包括数据库，但由于资源限制，不建议安装大型数据库。\n\n## 终端断掉了，刷新后还是不行？\n\n可能是缓存问题，先尝试浏览器刷新，如果有报错信息，请到[在线提问](https://coding.net/u/coding/p/Coding-Feedback/topic)将 WorkSpace 地址提供给我们。', 'WEBIDE\n能实现什么基础操作？\n\nWebIDE\n可以编辑代码，实时自动保存编辑，\n支持提交代码，Push/Pull\n代码，将代码在终端运行起来。\n\n同时右键操作文件树目录，还有项目文件，上传下载和预览功能，可以预览\n图片，pdf，markdown,\nhtml\n等文件。\n\n\nWEBIDE\n可以支持什么语言和框架？\n\nWebIDE\n是一款在线IDE环境，包括编辑器和运行环境，编辑器支持主流的编程语言的语法高亮和自动提示，\n运行环境只要是\nLinux\n下支持的都可以可以通过安装软件支持。\n\n\n什么是\nWORKSPACE\n，如何管理？\n\nWorkSpace\n是\nWebIDE\n在云端创建的一个工作空间，每个用户对每个项目只能创建一个WorkSpace。\n\n它包含了用户在云端的代码根目录和可选的环境配置。\n详细参加 \n工作空间\n[/help/doc/webide/workspace.html]\n\n\n如何分享环境，可以分享给任何人吗？\n\n环境分享，目前只能分享给项目成员，具体操作详见 \n环境管理\n[/help/doc/webide/environment.html]\n\n\nWEBIDE\n如何安装软件？\n\nWebIDE\n的终端使用的\nUbuntu\nLinux，使用\napt-get\ninstall\n安装软件\n\n\n如何运行程序？\n\n目前\nWebIDE\n运行程序需要在终端运行，详细参见, \n运行程序\n[/help/doc/webide/execution.html]\n\n\n运行程序后，生成的\nACCESS\nURL\n报502，404\n是怎么回事？\n * \n   404\n   错误是程序返回的问题，说明你的程序可能有问题。\n * \n   502\n   错误一般是路由的问题，需要你的程序监听\n   0.0.0.0\n   地址，同时端口需要匹配。\n   \n   详细参见， \n   运行程序\n   [/help/doc/webide/execution.html]\n\n\nWEBIDE\n可以安装数据库吗？\n\n你可以在终端里用\napt-get\n自行安装任何想要的软件，包括数据库，但由于资源限制，不建议安装大型数据库。\n\n\n终端断掉了，刷新后还是不行？\n\n可能是缓存问题，先尝试浏览器刷新，如果有报错信息，请到 \n在线提问\n[https://coding.net/u/coding/p/Coding-Feedback/topic] \n将\nWorkSpace\n地址提供给我们。', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '1970-01-01 00:00:00');
COMMIT;

SET FOREIGN_KEY_CHECKS = 1;
